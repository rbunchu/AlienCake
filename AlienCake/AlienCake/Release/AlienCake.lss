
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  00000904  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3e  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d89  00000000  00000000  00002512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6f  00000000  00000000  0000329b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000860  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bce  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 31       	cpi	r26, 0x17	; 23
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ea e6       	ldi	r30, 0x6A	; 106
  e6:	f8 e0       	ldi	r31, 0x08	; 8
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	a6 30       	cpi	r26, 0x06	; 6
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>
  f4:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  f8:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <led_create>:
	return led;
}

void led_destroy(led_blinker* led)
{
	free(led);
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	18 2f       	mov	r17, r24
 10a:	09 2f       	mov	r16, r25
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 12 03 	call	0x624	; 0x624 <malloc>
 114:	ec 01       	movw	r28, r24
 116:	18 83       	st	Y, r17
 118:	09 83       	std	Y+1, r16	; 0x01
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 2f       	mov	r24, r17
 11e:	0e 94 55 02 	call	0x4aa	; 0x4aa <pinMode>
 122:	ce 01       	movw	r24, r28
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <led_turn_on>:
	pinMode(led_pin, OUTPUT);
}
 
void led_turn_on(int led_pin)
{
	digitalWrite(led_pin, HIGH);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	0c 94 91 02 	jmp	0x522	; 0x522 <digitalWrite>

00000134 <led_turn_off>:
}

void led_turn_off(int led_pin)
{
	digitalWrite(led_pin, LOW);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0c 94 91 02 	jmp	0x522	; 0x522 <digitalWrite>

0000013a <length_detector_create>:
#include "length_detector.h"


length_detector *length_detector_create(int trig_pin, int echo_pin)
{
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	18 2f       	mov	r17, r24
 148:	09 2f       	mov	r16, r25
 14a:	7b 01       	movw	r14, r22
  length_detector * detector = malloc(sizeof(length_detector));
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 12 03 	call	0x624	; 0x624 <malloc>
 154:	ec 01       	movw	r28, r24
  detector->trig_pin = trig_pin;
 156:	1a 83       	std	Y+2, r17	; 0x02
 158:	0b 83       	std	Y+3, r16	; 0x03
  detector->echo_pin = echo_pin;
 15a:	f9 82       	std	Y+1, r15	; 0x01
 15c:	e8 82       	st	Y, r14
  return detector;
}

void length_detector_init(length_detector * detector)
{
  pinMode(detector->trig_pin, OUTPUT);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	81 2f       	mov	r24, r17
 162:	0e 94 55 02 	call	0x4aa	; 0x4aa <pinMode>
  pinMode(detector->echo_pin, INPUT);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	88 81       	ld	r24, Y
 16a:	0e 94 55 02 	call	0x4aa	; 0x4aa <pinMode>
  length_detector * detector = malloc(sizeof(length_detector));
  detector->trig_pin = trig_pin;
  detector->echo_pin = echo_pin;
  length_detector_init(detector);
  return detector;
}
 16e:	ce 01       	movw	r24, r28
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <length_detector_measure>:
  delay(10);
  digitalWrite(trig_pin, LOW);
}

int length_detector_measure(length_detector * detector)
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
  pinMode(detector->echo_pin, INPUT);
}

void length_detector_ping(int trig_pin)
{
  digitalWrite(trig_pin, HIGH);
 188:	fc 01       	movw	r30, r24
 18a:	c2 81       	ldd	r28, Z+2	; 0x02
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
  delay(10);
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 b5 01 	call	0x36a	; 0x36a <delay>
  digitalWrite(trig_pin, LOW);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
int length_detector_measure(length_detector * detector)
{
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
 1a8:	f8 01       	movw	r30, r16
 1aa:	80 81       	ld	r24, Z
 1ac:	0e 94 c0 02 	call	0x580	; 0x580 <digitalRead>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	e1 f4       	brne	.+56     	; 0x1ec <length_detector_measure+0x6e>
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
  {
    return -1;
  }
  
  int time = 0;  
  while(digitalRead(detector->echo_pin) != LOW) {
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 c0 02 	call	0x580	; 0x580 <digitalRead>
 1c0:	89 2b       	or	r24, r25
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <length_detector_measure+0x56>
    time++;
 1c4:	21 96       	adiw	r28, 0x01	; 1
    delay(1);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 b5 01 	call	0x36a	; 0x36a <delay>
 1d2:	f2 cf       	rjmp	.-28     	; 0x1b8 <length_detector_measure+0x3a>
  }
  
  return (time * 34) / 2000;
 1d4:	22 e2       	ldi	r18, 0x22	; 34
 1d6:	2c 9f       	mul	r18, r28
 1d8:	c0 01       	movw	r24, r0
 1da:	2d 9f       	mul	r18, r29
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	60 ed       	ldi	r22, 0xD0	; 208
 1e2:	77 e0       	ldi	r23, 0x07	; 7
 1e4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__divmodhi4>
 1e8:	cb 01       	movw	r24, r22
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <length_detector_measure+0x72>
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
  {
    return -1;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
    time++;
    delay(1);
  }
  
  return (time * 34) / 2000;
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <setup>:
		serial = hardware_serial_get();
		hardware_serial_begin(serial, 9600);
		hardware_serial_println(serial, "Starting program for Alien Cake");
	#endif
	// put your setup code here, to run once:
	led = led_create(PIN_D4);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 80 00 	call	0x100	; 0x100 <led_create>
 202:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <led+0x1>
 206:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <led>
	detector = length_detector_create(TRIG_PIN, ECHO_PIN);
 20a:	69 e0       	ldi	r22, 0x09	; 9
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 9d 00 	call	0x13a	; 0x13a <length_detector_create>
 216:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <detector+0x1>
 21a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <detector>
	
	led_turn_off(led->led_pin);
 21e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <led>
 222:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <led+0x1>
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	0c 94 9a 00 	jmp	0x134	; 0x134 <led_turn_off>

0000022e <loop>:
}

void loop() {
  // put your main code here, to run repeatedly:
	int distance = length_detector_measure(detector);
 22e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <detector>
 232:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <detector+0x1>
 236:	0e 94 bf 00 	call	0x17e	; 0x17e <length_detector_measure>
	
	if(distance > 0)
 23a:	18 16       	cp	r1, r24
 23c:	19 06       	cpc	r1, r25
 23e:	74 f4       	brge	.+28     	; 0x25c <loop+0x2e>
	{
		led_turn_on(led->led_pin);
 240:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <led>
 244:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <led+0x1>
 248:	80 81       	ld	r24, Z
 24a:	91 81       	ldd	r25, Z+1	; 0x01
 24c:	0e 94 97 00 	call	0x12e	; 0x12e <led_turn_on>
		delay(2000);
 250:	60 ed       	ldi	r22, 0xD0	; 208
 252:	77 e0       	ldi	r23, 0x07	; 7
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 b5 01 	call	0x36a	; 0x36a <delay>
	}
	
	led_turn_off(led->led_pin);
 25c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <led>
 260:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <led+0x1>
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	0c 94 9a 00 	jmp	0x134	; 0x134 <led_turn_off>

0000026c <initVariant>:
 26c:	08 95       	ret

0000026e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 26e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <init>

	initVariant();
 272:	0e 94 36 01 	call	0x26c	; 0x26c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 276:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 27e:	0e 94 17 01 	call	0x22e	; 0x22e <loop>
		if (serialEventRun) serialEventRun();
 282:	20 97       	sbiw	r28, 0x00	; 0
 284:	e1 f3       	breq	.-8      	; 0x27e <main+0x10>
 286:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 28a:	f9 cf       	rjmp	.-14     	; 0x27e <main+0x10>

0000028c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 2a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 2aa:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 2ae:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 2b2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__data_end>
 2b6:	23 e0       	ldi	r18, 0x03	; 3
 2b8:	23 0f       	add	r18, r19
 2ba:	2d 37       	cpi	r18, 0x7D	; 125
 2bc:	20 f4       	brcc	.+8      	; 0x2c6 <__vector_16+0x3a>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	a1 1d       	adc	r26, r1
 2c2:	b1 1d       	adc	r27, r1
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__vector_16+0x44>
 2c6:	26 e8       	ldi	r18, 0x86	; 134
 2c8:	23 0f       	add	r18, r19
 2ca:	02 96       	adiw	r24, 0x02	; 2
 2cc:	a1 1d       	adc	r26, r1
 2ce:	b1 1d       	adc	r27, r1
 2d0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 2d4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 2d8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 2dc:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 2e0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 2e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 2e8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 2ec:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 2f0:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	a1 1d       	adc	r26, r1
 2f8:	b1 1d       	adc	r27, r1
 2fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 2fe:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 302:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 306:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <micros>:
 320:	3f b7       	in	r19, 0x3f	; 63
 322:	f8 94       	cli
 324:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 328:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 32c:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 330:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 334:	26 b5       	in	r18, 0x26	; 38
 336:	a8 9b       	sbis	0x15, 0	; 21
 338:	05 c0       	rjmp	.+10     	; 0x344 <micros+0x24>
 33a:	2f 3f       	cpi	r18, 0xFF	; 255
 33c:	19 f0       	breq	.+6      	; 0x344 <micros+0x24>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	a1 1d       	adc	r26, r1
 342:	b1 1d       	adc	r27, r1
 344:	3f bf       	out	0x3f, r19	; 63
 346:	ba 2f       	mov	r27, r26
 348:	a9 2f       	mov	r26, r25
 34a:	98 2f       	mov	r25, r24
 34c:	88 27       	eor	r24, r24
 34e:	82 0f       	add	r24, r18
 350:	91 1d       	adc	r25, r1
 352:	a1 1d       	adc	r26, r1
 354:	b1 1d       	adc	r27, r1
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	42 e0       	ldi	r20, 0x02	; 2
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	88 1f       	adc	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	4a 95       	dec	r20
 366:	d1 f7       	brne	.-12     	; 0x35c <micros+0x3c>
 368:	08 95       	ret

0000036a <delay>:
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	6b 01       	movw	r12, r22
 37c:	7c 01       	movw	r14, r24
 37e:	0e 94 90 01 	call	0x320	; 0x320 <micros>
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
 386:	c1 14       	cp	r12, r1
 388:	d1 04       	cpc	r13, r1
 38a:	e1 04       	cpc	r14, r1
 38c:	f1 04       	cpc	r15, r1
 38e:	01 f1       	breq	.+64     	; 0x3d0 <delay+0x66>
 390:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <yield>
 394:	0e 94 90 01 	call	0x320	; 0x320 <micros>
 398:	dc 01       	movw	r26, r24
 39a:	cb 01       	movw	r24, r22
 39c:	88 19       	sub	r24, r8
 39e:	99 09       	sbc	r25, r9
 3a0:	aa 09       	sbc	r26, r10
 3a2:	bb 09       	sbc	r27, r11
 3a4:	88 3e       	cpi	r24, 0xE8	; 232
 3a6:	93 40       	sbci	r25, 0x03	; 3
 3a8:	a1 05       	cpc	r26, r1
 3aa:	b1 05       	cpc	r27, r1
 3ac:	60 f3       	brcs	.-40     	; 0x386 <delay+0x1c>
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	c2 1a       	sub	r12, r18
 3b2:	d1 08       	sbc	r13, r1
 3b4:	e1 08       	sbc	r14, r1
 3b6:	f1 08       	sbc	r15, r1
 3b8:	88 ee       	ldi	r24, 0xE8	; 232
 3ba:	88 0e       	add	r8, r24
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	98 1e       	adc	r9, r24
 3c0:	a1 1c       	adc	r10, r1
 3c2:	b1 1c       	adc	r11, r1
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	19 f7       	brne	.-58     	; 0x394 <delay+0x2a>
 3ce:	db cf       	rjmp	.-74     	; 0x386 <delay+0x1c>
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	bf 90       	pop	r11
 3da:	af 90       	pop	r10
 3dc:	9f 90       	pop	r9
 3de:	8f 90       	pop	r8
 3e0:	08 95       	ret

000003e2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3e2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3e4:	84 b5       	in	r24, 0x24	; 36
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3ea:	84 b5       	in	r24, 0x24	; 36
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3f0:	85 b5       	in	r24, 0x25	; 37
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3f6:	85 b5       	in	r24, 0x25	; 37
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3fc:	ee e6       	ldi	r30, 0x6E	; 110
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	81 60       	ori	r24, 0x01	; 1
 404:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 406:	e1 e8       	ldi	r30, 0x81	; 129
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 40c:	80 81       	ld	r24, Z
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 412:	80 81       	ld	r24, Z
 414:	81 60       	ori	r24, 0x01	; 1
 416:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 422:	e1 eb       	ldi	r30, 0xB1	; 177
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	84 60       	ori	r24, 0x04	; 4
 42a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 42c:	e0 eb       	ldi	r30, 0xB0	; 176
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	81 60       	ori	r24, 0x01	; 1
 434:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 436:	ea e7       	ldi	r30, 0x7A	; 122
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 440:	80 81       	ld	r24, Z
 442:	82 60       	ori	r24, 0x02	; 2
 444:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 44c:	80 81       	ld	r24, Z
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 452:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 456:	08 95       	ret

00000458 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 458:	83 30       	cpi	r24, 0x03	; 3
 45a:	81 f0       	breq	.+32     	; 0x47c <turnOffPWM+0x24>
 45c:	28 f4       	brcc	.+10     	; 0x468 <turnOffPWM+0x10>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	99 f0       	breq	.+38     	; 0x488 <turnOffPWM+0x30>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	a1 f0       	breq	.+40     	; 0x48e <turnOffPWM+0x36>
 466:	08 95       	ret
 468:	87 30       	cpi	r24, 0x07	; 7
 46a:	a9 f0       	breq	.+42     	; 0x496 <turnOffPWM+0x3e>
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	b9 f0       	breq	.+46     	; 0x49e <turnOffPWM+0x46>
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	d1 f4       	brne	.+52     	; 0x4a8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 474:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 478:	8f 7d       	andi	r24, 0xDF	; 223
 47a:	03 c0       	rjmp	.+6      	; 0x482 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 47c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 480:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 482:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 486:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 488:	84 b5       	in	r24, 0x24	; 36
 48a:	8f 77       	andi	r24, 0x7F	; 127
 48c:	02 c0       	rjmp	.+4      	; 0x492 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 48e:	84 b5       	in	r24, 0x24	; 36
 490:	8f 7d       	andi	r24, 0xDF	; 223
 492:	84 bd       	out	0x24, r24	; 36
 494:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 496:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 49a:	8f 77       	andi	r24, 0x7F	; 127
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 49e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4a2:	8f 7d       	andi	r24, 0xDF	; 223
 4a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4a8:	08 95       	ret

000004aa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	e4 58       	subi	r30, 0x84	; 132
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 4b8:	fc 01       	movw	r30, r24
 4ba:	e0 57       	subi	r30, 0x70	; 112
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 4c0:	88 23       	and	r24, r24
 4c2:	61 f1       	breq	.+88     	; 0x51c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	fc 01       	movw	r30, r24
 4cc:	e8 54       	subi	r30, 0x48	; 72
 4ce:	ff 4f       	sbci	r31, 0xFF	; 255
 4d0:	c5 91       	lpm	r28, Z+
 4d2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 4d4:	fc 01       	movw	r30, r24
 4d6:	e2 55       	subi	r30, 0x52	; 82
 4d8:	ff 4f       	sbci	r31, 0xFF	; 255
 4da:	a5 91       	lpm	r26, Z+
 4dc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 4de:	61 11       	cpse	r22, r1
 4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 4e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4e4:	f8 94       	cli
		*reg &= ~bit;
 4e6:	88 81       	ld	r24, Y
 4e8:	20 95       	com	r18
 4ea:	82 23       	and	r24, r18
 4ec:	88 83       	st	Y, r24
		*out &= ~bit;
 4ee:	ec 91       	ld	r30, X
 4f0:	2e 23       	and	r18, r30
 4f2:	0b c0       	rjmp	.+22     	; 0x50a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 4f4:	62 30       	cpi	r22, 0x02	; 2
 4f6:	61 f4       	brne	.+24     	; 0x510 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 4f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4fa:	f8 94       	cli
		*reg &= ~bit;
 4fc:	88 81       	ld	r24, Y
 4fe:	32 2f       	mov	r19, r18
 500:	30 95       	com	r19
 502:	83 23       	and	r24, r19
 504:	88 83       	st	Y, r24
		*out |= bit;
 506:	ec 91       	ld	r30, X
 508:	2e 2b       	or	r18, r30
 50a:	2c 93       	st	X, r18
		SREG = oldSREG;
 50c:	9f bf       	out	0x3f, r25	; 63
 50e:	06 c0       	rjmp	.+12     	; 0x51c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 510:	8f b7       	in	r24, 0x3f	; 63
                cli();
 512:	f8 94       	cli
		*reg |= bit;
 514:	e8 81       	ld	r30, Y
 516:	2e 2b       	or	r18, r30
 518:	28 83       	st	Y, r18
		SREG = oldSREG;
 51a:	8f bf       	out	0x3f, r24	; 63
	}
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	e8 59       	subi	r30, 0x98	; 152
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 534:	f9 01       	movw	r30, r18
 536:	e4 58       	subi	r30, 0x84	; 132
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 53c:	f9 01       	movw	r30, r18
 53e:	e0 57       	subi	r30, 0x70	; 112
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 544:	cc 23       	and	r28, r28
 546:	c1 f0       	breq	.+48     	; 0x578 <digitalWrite+0x56>
 548:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 54a:	81 11       	cpse	r24, r1
 54c:	0e 94 2c 02 	call	0x458	; 0x458 <turnOffPWM>

	out = portOutputRegister(port);
 550:	ec 2f       	mov	r30, r28
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e2 55       	subi	r30, 0x52	; 82
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	a5 91       	lpm	r26, Z+
 55e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 560:	9f b7       	in	r25, 0x3f	; 63
	cli();
 562:	f8 94       	cli

	if (val == LOW) {
 564:	11 11       	cpse	r17, r1
 566:	04 c0       	rjmp	.+8      	; 0x570 <digitalWrite+0x4e>
		*out &= ~bit;
 568:	8c 91       	ld	r24, X
 56a:	d0 95       	com	r29
 56c:	d8 23       	and	r29, r24
 56e:	02 c0       	rjmp	.+4      	; 0x574 <digitalWrite+0x52>
	} else {
		*out |= bit;
 570:	ec 91       	ld	r30, X
 572:	de 2b       	or	r29, r30
 574:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 576:	9f bf       	out	0x3f, r25	; 63
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	08 95       	ret

00000580 <digitalRead>:

int digitalRead(uint8_t pin)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	f9 01       	movw	r30, r18
 58a:	e8 59       	subi	r30, 0x98	; 152
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 590:	f9 01       	movw	r30, r18
 592:	e4 58       	subi	r30, 0x84	; 132
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 598:	f9 01       	movw	r30, r18
 59a:	e0 57       	subi	r30, 0x70	; 112
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 5a0:	cc 23       	and	r28, r28
 5a2:	91 f0       	breq	.+36     	; 0x5c8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5a4:	81 11       	cpse	r24, r1
 5a6:	0e 94 2c 02 	call	0x458	; 0x458 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 5aa:	ec 2f       	mov	r30, r28
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	ec 55       	subi	r30, 0x5C	; 92
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	a5 91       	lpm	r26, Z+
 5b8:	b4 91       	lpm	r27, Z
 5ba:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 5bc:	ed 23       	and	r30, r29
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	21 f4       	brne	.+8      	; 0x5cc <digitalRead+0x4c>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <digitalRead+0x4c>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5d2:	08 95       	ret

000005d4 <__divmodhi4>:
 5d4:	97 fb       	bst	r25, 7
 5d6:	07 2e       	mov	r0, r23
 5d8:	16 f4       	brtc	.+4      	; 0x5de <__divmodhi4+0xa>
 5da:	00 94       	com	r0
 5dc:	07 d0       	rcall	.+14     	; 0x5ec <__divmodhi4_neg1>
 5de:	77 fd       	sbrc	r23, 7
 5e0:	09 d0       	rcall	.+18     	; 0x5f4 <__divmodhi4_neg2>
 5e2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__udivmodhi4>
 5e6:	07 fc       	sbrc	r0, 7
 5e8:	05 d0       	rcall	.+10     	; 0x5f4 <__divmodhi4_neg2>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__divmodhi4_exit>

000005ec <__divmodhi4_neg1>:
 5ec:	90 95       	com	r25
 5ee:	81 95       	neg	r24
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__divmodhi4_neg2>:
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255

000005fa <__divmodhi4_exit>:
 5fa:	08 95       	ret

000005fc <__udivmodhi4>:
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	51 e1       	ldi	r21, 0x11	; 17
 602:	07 c0       	rjmp	.+14     	; 0x612 <__udivmodhi4_ep>

00000604 <__udivmodhi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	a6 17       	cp	r26, r22
 60a:	b7 07       	cpc	r27, r23
 60c:	10 f0       	brcs	.+4      	; 0x612 <__udivmodhi4_ep>
 60e:	a6 1b       	sub	r26, r22
 610:	b7 0b       	sbc	r27, r23

00000612 <__udivmodhi4_ep>:
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	5a 95       	dec	r21
 618:	a9 f7       	brne	.-22     	; 0x604 <__udivmodhi4_loop>
 61a:	80 95       	com	r24
 61c:	90 95       	com	r25
 61e:	bc 01       	movw	r22, r24
 620:	cd 01       	movw	r24, r26
 622:	08 95       	ret

00000624 <malloc>:
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	91 05       	cpc	r25, r1
 630:	10 f4       	brcc	.+4      	; 0x636 <malloc+0x12>
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <__flp>
 63a:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <__flp+0x1>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	a0 e0       	ldi	r26, 0x00	; 0
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	30 97       	sbiw	r30, 0x00	; 0
 648:	19 f1       	breq	.+70     	; 0x690 <malloc+0x6c>
 64a:	40 81       	ld	r20, Z
 64c:	51 81       	ldd	r21, Z+1	; 0x01
 64e:	02 81       	ldd	r16, Z+2	; 0x02
 650:	13 81       	ldd	r17, Z+3	; 0x03
 652:	48 17       	cp	r20, r24
 654:	59 07       	cpc	r21, r25
 656:	c8 f0       	brcs	.+50     	; 0x68a <malloc+0x66>
 658:	84 17       	cp	r24, r20
 65a:	95 07       	cpc	r25, r21
 65c:	69 f4       	brne	.+26     	; 0x678 <malloc+0x54>
 65e:	10 97       	sbiw	r26, 0x00	; 0
 660:	31 f0       	breq	.+12     	; 0x66e <malloc+0x4a>
 662:	12 96       	adiw	r26, 0x02	; 2
 664:	0c 93       	st	X, r16
 666:	12 97       	sbiw	r26, 0x02	; 2
 668:	13 96       	adiw	r26, 0x03	; 3
 66a:	1c 93       	st	X, r17
 66c:	27 c0       	rjmp	.+78     	; 0x6bc <malloc+0x98>
 66e:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <__flp>
 672:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <__flp+0x1>
 676:	22 c0       	rjmp	.+68     	; 0x6bc <malloc+0x98>
 678:	21 15       	cp	r18, r1
 67a:	31 05       	cpc	r19, r1
 67c:	19 f0       	breq	.+6      	; 0x684 <malloc+0x60>
 67e:	42 17       	cp	r20, r18
 680:	53 07       	cpc	r21, r19
 682:	18 f4       	brcc	.+6      	; 0x68a <malloc+0x66>
 684:	9a 01       	movw	r18, r20
 686:	bd 01       	movw	r22, r26
 688:	ef 01       	movw	r28, r30
 68a:	df 01       	movw	r26, r30
 68c:	f8 01       	movw	r30, r16
 68e:	db cf       	rjmp	.-74     	; 0x646 <malloc+0x22>
 690:	21 15       	cp	r18, r1
 692:	31 05       	cpc	r19, r1
 694:	f9 f0       	breq	.+62     	; 0x6d4 <malloc+0xb0>
 696:	28 1b       	sub	r18, r24
 698:	39 0b       	sbc	r19, r25
 69a:	24 30       	cpi	r18, 0x04	; 4
 69c:	31 05       	cpc	r19, r1
 69e:	80 f4       	brcc	.+32     	; 0x6c0 <malloc+0x9c>
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	9b 81       	ldd	r25, Y+3	; 0x03
 6a4:	61 15       	cp	r22, r1
 6a6:	71 05       	cpc	r23, r1
 6a8:	21 f0       	breq	.+8      	; 0x6b2 <malloc+0x8e>
 6aa:	fb 01       	movw	r30, r22
 6ac:	93 83       	std	Z+3, r25	; 0x03
 6ae:	82 83       	std	Z+2, r24	; 0x02
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <malloc+0x96>
 6b2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__flp+0x1>
 6b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <__flp>
 6ba:	fe 01       	movw	r30, r28
 6bc:	32 96       	adiw	r30, 0x02	; 2
 6be:	44 c0       	rjmp	.+136    	; 0x748 <malloc+0x124>
 6c0:	fe 01       	movw	r30, r28
 6c2:	e2 0f       	add	r30, r18
 6c4:	f3 1f       	adc	r31, r19
 6c6:	81 93       	st	Z+, r24
 6c8:	91 93       	st	Z+, r25
 6ca:	22 50       	subi	r18, 0x02	; 2
 6cc:	31 09       	sbc	r19, r1
 6ce:	39 83       	std	Y+1, r19	; 0x01
 6d0:	28 83       	st	Y, r18
 6d2:	3a c0       	rjmp	.+116    	; 0x748 <malloc+0x124>
 6d4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 6d8:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 6dc:	23 2b       	or	r18, r19
 6de:	41 f4       	brne	.+16     	; 0x6f0 <malloc+0xcc>
 6e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 6e4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 6e8:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <__brkval+0x1>
 6ec:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <__brkval>
 6f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6f8:	21 15       	cp	r18, r1
 6fa:	31 05       	cpc	r19, r1
 6fc:	41 f4       	brne	.+16     	; 0x70e <malloc+0xea>
 6fe:	2d b7       	in	r18, 0x3d	; 61
 700:	3e b7       	in	r19, 0x3e	; 62
 702:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 706:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 70a:	24 1b       	sub	r18, r20
 70c:	35 0b       	sbc	r19, r21
 70e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <__brkval>
 712:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <__brkval+0x1>
 716:	e2 17       	cp	r30, r18
 718:	f3 07       	cpc	r31, r19
 71a:	a0 f4       	brcc	.+40     	; 0x744 <malloc+0x120>
 71c:	2e 1b       	sub	r18, r30
 71e:	3f 0b       	sbc	r19, r31
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	78 f0       	brcs	.+30     	; 0x744 <malloc+0x120>
 726:	ac 01       	movw	r20, r24
 728:	4e 5f       	subi	r20, 0xFE	; 254
 72a:	5f 4f       	sbci	r21, 0xFF	; 255
 72c:	24 17       	cp	r18, r20
 72e:	35 07       	cpc	r19, r21
 730:	48 f0       	brcs	.+18     	; 0x744 <malloc+0x120>
 732:	4e 0f       	add	r20, r30
 734:	5f 1f       	adc	r21, r31
 736:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <__brkval+0x1>
 73a:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <__brkval>
 73e:	81 93       	st	Z+, r24
 740:	91 93       	st	Z+, r25
 742:	02 c0       	rjmp	.+4      	; 0x748 <malloc+0x124>
 744:	e0 e0       	ldi	r30, 0x00	; 0
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	cf 01       	movw	r24, r30
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	08 95       	ret

00000754 <free>:
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	09 f4       	brne	.+2      	; 0x75e <free+0xa>
 75c:	81 c0       	rjmp	.+258    	; 0x860 <free+0x10c>
 75e:	fc 01       	movw	r30, r24
 760:	32 97       	sbiw	r30, 0x02	; 2
 762:	13 82       	std	Z+3, r1	; 0x03
 764:	12 82       	std	Z+2, r1	; 0x02
 766:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <__flp>
 76a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <__flp+0x1>
 76e:	10 97       	sbiw	r26, 0x00	; 0
 770:	81 f4       	brne	.+32     	; 0x792 <free+0x3e>
 772:	20 81       	ld	r18, Z
 774:	31 81       	ldd	r19, Z+1	; 0x01
 776:	82 0f       	add	r24, r18
 778:	93 1f       	adc	r25, r19
 77a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 77e:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 782:	28 17       	cp	r18, r24
 784:	39 07       	cpc	r19, r25
 786:	51 f5       	brne	.+84     	; 0x7dc <free+0x88>
 788:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <__brkval+0x1>
 78c:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <__brkval>
 790:	67 c0       	rjmp	.+206    	; 0x860 <free+0x10c>
 792:	ed 01       	movw	r28, r26
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	ce 17       	cp	r28, r30
 79a:	df 07       	cpc	r29, r31
 79c:	40 f4       	brcc	.+16     	; 0x7ae <free+0x5a>
 79e:	4a 81       	ldd	r20, Y+2	; 0x02
 7a0:	5b 81       	ldd	r21, Y+3	; 0x03
 7a2:	9e 01       	movw	r18, r28
 7a4:	41 15       	cp	r20, r1
 7a6:	51 05       	cpc	r21, r1
 7a8:	f1 f0       	breq	.+60     	; 0x7e6 <free+0x92>
 7aa:	ea 01       	movw	r28, r20
 7ac:	f5 cf       	rjmp	.-22     	; 0x798 <free+0x44>
 7ae:	d3 83       	std	Z+3, r29	; 0x03
 7b0:	c2 83       	std	Z+2, r28	; 0x02
 7b2:	40 81       	ld	r20, Z
 7b4:	51 81       	ldd	r21, Z+1	; 0x01
 7b6:	84 0f       	add	r24, r20
 7b8:	95 1f       	adc	r25, r21
 7ba:	c8 17       	cp	r28, r24
 7bc:	d9 07       	cpc	r29, r25
 7be:	59 f4       	brne	.+22     	; 0x7d6 <free+0x82>
 7c0:	88 81       	ld	r24, Y
 7c2:	99 81       	ldd	r25, Y+1	; 0x01
 7c4:	84 0f       	add	r24, r20
 7c6:	95 1f       	adc	r25, r21
 7c8:	02 96       	adiw	r24, 0x02	; 2
 7ca:	91 83       	std	Z+1, r25	; 0x01
 7cc:	80 83       	st	Z, r24
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	9b 81       	ldd	r25, Y+3	; 0x03
 7d2:	93 83       	std	Z+3, r25	; 0x03
 7d4:	82 83       	std	Z+2, r24	; 0x02
 7d6:	21 15       	cp	r18, r1
 7d8:	31 05       	cpc	r19, r1
 7da:	29 f4       	brne	.+10     	; 0x7e6 <free+0x92>
 7dc:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <__flp+0x1>
 7e0:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <__flp>
 7e4:	3d c0       	rjmp	.+122    	; 0x860 <free+0x10c>
 7e6:	e9 01       	movw	r28, r18
 7e8:	fb 83       	std	Y+3, r31	; 0x03
 7ea:	ea 83       	std	Y+2, r30	; 0x02
 7ec:	49 91       	ld	r20, Y+
 7ee:	59 91       	ld	r21, Y+
 7f0:	c4 0f       	add	r28, r20
 7f2:	d5 1f       	adc	r29, r21
 7f4:	ec 17       	cp	r30, r28
 7f6:	fd 07       	cpc	r31, r29
 7f8:	61 f4       	brne	.+24     	; 0x812 <free+0xbe>
 7fa:	80 81       	ld	r24, Z
 7fc:	91 81       	ldd	r25, Z+1	; 0x01
 7fe:	84 0f       	add	r24, r20
 800:	95 1f       	adc	r25, r21
 802:	02 96       	adiw	r24, 0x02	; 2
 804:	e9 01       	movw	r28, r18
 806:	99 83       	std	Y+1, r25	; 0x01
 808:	88 83       	st	Y, r24
 80a:	82 81       	ldd	r24, Z+2	; 0x02
 80c:	93 81       	ldd	r25, Z+3	; 0x03
 80e:	9b 83       	std	Y+3, r25	; 0x03
 810:	8a 83       	std	Y+2, r24	; 0x02
 812:	e0 e0       	ldi	r30, 0x00	; 0
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	12 96       	adiw	r26, 0x02	; 2
 818:	8d 91       	ld	r24, X+
 81a:	9c 91       	ld	r25, X
 81c:	13 97       	sbiw	r26, 0x03	; 3
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	19 f0       	breq	.+6      	; 0x828 <free+0xd4>
 822:	fd 01       	movw	r30, r26
 824:	dc 01       	movw	r26, r24
 826:	f7 cf       	rjmp	.-18     	; 0x816 <free+0xc2>
 828:	8d 91       	ld	r24, X+
 82a:	9c 91       	ld	r25, X
 82c:	11 97       	sbiw	r26, 0x01	; 1
 82e:	9d 01       	movw	r18, r26
 830:	2e 5f       	subi	r18, 0xFE	; 254
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
 838:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 83c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 840:	28 17       	cp	r18, r24
 842:	39 07       	cpc	r19, r25
 844:	69 f4       	brne	.+26     	; 0x860 <free+0x10c>
 846:	30 97       	sbiw	r30, 0x00	; 0
 848:	29 f4       	brne	.+10     	; 0x854 <free+0x100>
 84a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp+0x1>
 84e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp>
 852:	02 c0       	rjmp	.+4      	; 0x858 <free+0x104>
 854:	13 82       	std	Z+3, r1	; 0x03
 856:	12 82       	std	Z+2, r1	; 0x02
 858:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <__brkval+0x1>
 85c:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <__brkval>
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
