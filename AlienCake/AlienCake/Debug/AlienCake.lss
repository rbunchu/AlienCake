
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005ec  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c1  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c02  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b3  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079e  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ba  00000000  00000000  00003d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a6 e0       	ldi	r26, 0x06	; 6
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a5 31       	cpi	r26, 0x15	; 21
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ec ee       	ldi	r30, 0xEC	; 236
  dc:	f5 e0       	ldi	r31, 0x05	; 5
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a6 30       	cpi	r26, 0x06	; 6
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>
  ea:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  ee:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <led_turn_off>:
	digitalWrite(led_pin, HIGH);
}

void led_turn_off(int led_pin)
{
	digitalWrite(led_pin, LOW);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <digitalWrite>

000000fc <led_turn_on>:
	pinMode(led_pin, OUTPUT);
}
 
void led_turn_on(int led_pin)
{
	digitalWrite(led_pin, HIGH);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	0c 94 a4 01 	jmp	0x348	; 0x348 <digitalWrite>

00000102 <led_create>:
#include "Arduino.h"
#include "led_blinker.h"


led_blinker* led_create(int led_pin)
{
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	18 2f       	mov	r17, r24
 10c:	09 2f       	mov	r16, r25
	led_blinker *led = malloc(sizeof(led_blinker));
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <malloc>
 116:	ec 01       	movw	r28, r24
	led->led_pin = led_pin;
 118:	18 83       	st	Y, r17
 11a:	09 83       	std	Y+1, r16	; 0x01
	led->turn_on = led_turn_on;
 11c:	8e e7       	ldi	r24, 0x7E	; 126
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9b 83       	std	Y+3, r25	; 0x03
 122:	8a 83       	std	Y+2, r24	; 0x02
	led->turn_off = led_turn_off;
 124:	8b e7       	ldi	r24, 0x7B	; 123
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	9d 83       	std	Y+5, r25	; 0x05
 12a:	8c 83       	std	Y+4, r24	; 0x04
	free(led);
}

void led_init(int led_pin)
{
	pinMode(led_pin, OUTPUT);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 2f       	mov	r24, r17
 130:	0e 94 68 01 	call	0x2d0	; 0x2d0 <pinMode>
	led->turn_on = led_turn_on;
	led->turn_off = led_turn_off;
	led_init(led->led_pin);

	return led;
}
 134:	ce 01       	movw	r24, r28
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <setup>:

led_blinker *led;

void setup() {
  // put your setup code here, to run once:
  led = led_create(PIN_D4);
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 81 00 	call	0x102	; 0x102 <led_create>
 148:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <led+0x1>
 14c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <led>
 150:	08 95       	ret

00000152 <loop>:
}

void loop() {
 152:	08 95       	ret

00000154 <initVariant>:
 154:	08 95       	ret

00000156 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 156:	0e 94 04 01 	call	0x208	; 0x208 <init>

	initVariant();
 15a:	0e 94 aa 00 	call	0x154	; 0x154 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 15e:	0e 94 a0 00 	call	0x140	; 0x140 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 166:	0e 94 a9 00 	call	0x152	; 0x152 <loop>
		if (serialEventRun) serialEventRun();
 16a:	20 97       	sbiw	r28, 0x00	; 0
 16c:	e1 f3       	breq	.-8      	; 0x166 <main+0x10>
 16e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 172:	f9 cf       	rjmp	.-14     	; 0x166 <main+0x10>

00000174 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 18e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 192:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 196:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 19a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__data_end>
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	23 0f       	add	r18, r19
 1a2:	2d 37       	cpi	r18, 0x7D	; 125
 1a4:	20 f4       	brcc	.+8      	; 0x1ae <__vector_16+0x3a>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	a1 1d       	adc	r26, r1
 1aa:	b1 1d       	adc	r27, r1
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_16+0x44>
 1ae:	26 e8       	ldi	r18, 0x86	; 134
 1b0:	23 0f       	add	r18, r19
 1b2:	02 96       	adiw	r24, 0x02	; 2
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
 1b8:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 1bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 1c0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 1c4:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 1c8:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 1cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 1d0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 1d4:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 1d8:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 1e6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 1ea:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 1ee:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 208:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 20a:	84 b5       	in	r24, 0x24	; 36
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 210:	84 b5       	in	r24, 0x24	; 36
 212:	81 60       	ori	r24, 0x01	; 1
 214:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 216:	85 b5       	in	r24, 0x25	; 37
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 21c:	85 b5       	in	r24, 0x25	; 37
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 222:	ee e6       	ldi	r30, 0x6E	; 110
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 22c:	e1 e8       	ldi	r30, 0x81	; 129
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 23e:	e0 e8       	ldi	r30, 0x80	; 128
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 248:	e1 eb       	ldi	r30, 0xB1	; 177
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 252:	e0 eb       	ldi	r30, 0xB0	; 176
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 25c:	ea e7       	ldi	r30, 0x7A	; 122
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	84 60       	ori	r24, 0x04	; 4
 264:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 272:	80 81       	ld	r24, Z
 274:	80 68       	ori	r24, 0x80	; 128
 276:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 278:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 27c:	08 95       	ret

0000027e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	81 f0       	breq	.+32     	; 0x2a2 <turnOffPWM+0x24>
 282:	28 f4       	brcc	.+10     	; 0x28e <turnOffPWM+0x10>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	99 f0       	breq	.+38     	; 0x2ae <turnOffPWM+0x30>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	a1 f0       	breq	.+40     	; 0x2b4 <turnOffPWM+0x36>
 28c:	08 95       	ret
 28e:	87 30       	cpi	r24, 0x07	; 7
 290:	a9 f0       	breq	.+42     	; 0x2bc <turnOffPWM+0x3e>
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	b9 f0       	breq	.+46     	; 0x2c4 <turnOffPWM+0x46>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	d1 f4       	brne	.+52     	; 0x2ce <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 29a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 29e:	8f 7d       	andi	r24, 0xDF	; 223
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 2a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 2a6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 2a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 2ac:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 2ae:	84 b5       	in	r24, 0x24	; 36
 2b0:	8f 77       	andi	r24, 0x7F	; 127
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 2b4:	84 b5       	in	r24, 0x24	; 36
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	84 bd       	out	0x24, r24	; 36
 2ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 2bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2c0:	8f 77       	andi	r24, 0x7F	; 127
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 2c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2ce:	08 95       	ret

000002d0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	fc 01       	movw	r30, r24
 2d8:	e4 58       	subi	r30, 0x84	; 132
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 2de:	fc 01       	movw	r30, r24
 2e0:	e0 57       	subi	r30, 0x70	; 112
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2e6:	88 23       	and	r24, r24
 2e8:	61 f1       	breq	.+88     	; 0x342 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	fc 01       	movw	r30, r24
 2f2:	e2 55       	subi	r30, 0x52	; 82
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	c5 91       	lpm	r28, Z+
 2f8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 2fa:	fc 01       	movw	r30, r24
 2fc:	ec 55       	subi	r30, 0x5C	; 92
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	a5 91       	lpm	r26, Z+
 302:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 304:	61 11       	cpse	r22, r1
 306:	09 c0       	rjmp	.+18     	; 0x31a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 308:	9f b7       	in	r25, 0x3f	; 63
                cli();
 30a:	f8 94       	cli
		*reg &= ~bit;
 30c:	88 81       	ld	r24, Y
 30e:	20 95       	com	r18
 310:	82 23       	and	r24, r18
 312:	88 83       	st	Y, r24
		*out &= ~bit;
 314:	ec 91       	ld	r30, X
 316:	2e 23       	and	r18, r30
 318:	0b c0       	rjmp	.+22     	; 0x330 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 31a:	62 30       	cpi	r22, 0x02	; 2
 31c:	61 f4       	brne	.+24     	; 0x336 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 31e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 320:	f8 94       	cli
		*reg &= ~bit;
 322:	88 81       	ld	r24, Y
 324:	32 2f       	mov	r19, r18
 326:	30 95       	com	r19
 328:	83 23       	and	r24, r19
 32a:	88 83       	st	Y, r24
		*out |= bit;
 32c:	ec 91       	ld	r30, X
 32e:	2e 2b       	or	r18, r30
 330:	2c 93       	st	X, r18
		SREG = oldSREG;
 332:	9f bf       	out	0x3f, r25	; 63
 334:	06 c0       	rjmp	.+12     	; 0x342 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 336:	8f b7       	in	r24, 0x3f	; 63
                cli();
 338:	f8 94       	cli
		*reg |= bit;
 33a:	e8 81       	ld	r30, Y
 33c:	2e 2b       	or	r18, r30
 33e:	28 83       	st	Y, r18
		SREG = oldSREG;
 340:	8f bf       	out	0x3f, r24	; 63
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	e8 59       	subi	r30, 0x98	; 152
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 35a:	f9 01       	movw	r30, r18
 35c:	e4 58       	subi	r30, 0x84	; 132
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 362:	f9 01       	movw	r30, r18
 364:	e0 57       	subi	r30, 0x70	; 112
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 36a:	cc 23       	and	r28, r28
 36c:	c1 f0       	breq	.+48     	; 0x39e <digitalWrite+0x56>
 36e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 370:	81 11       	cpse	r24, r1
 372:	0e 94 3f 01 	call	0x27e	; 0x27e <turnOffPWM>

	out = portOutputRegister(port);
 376:	ec 2f       	mov	r30, r28
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ec 55       	subi	r30, 0x5C	; 92
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	a5 91       	lpm	r26, Z+
 384:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 386:	9f b7       	in	r25, 0x3f	; 63
	cli();
 388:	f8 94       	cli

	if (val == LOW) {
 38a:	11 11       	cpse	r17, r1
 38c:	04 c0       	rjmp	.+8      	; 0x396 <digitalWrite+0x4e>
		*out &= ~bit;
 38e:	8c 91       	ld	r24, X
 390:	d0 95       	com	r29
 392:	d8 23       	and	r29, r24
 394:	02 c0       	rjmp	.+4      	; 0x39a <digitalWrite+0x52>
	} else {
		*out |= bit;
 396:	ec 91       	ld	r30, X
 398:	de 2b       	or	r29, r30
 39a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 39c:	9f bf       	out	0x3f, r25	; 63
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <malloc>:
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	10 f4       	brcc	.+4      	; 0x3b8 <malloc+0x12>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <__flp>
 3bc:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <__flp+0x1>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	30 97       	sbiw	r30, 0x00	; 0
 3ca:	19 f1       	breq	.+70     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3cc:	40 81       	ld	r20, Z
 3ce:	51 81       	ldd	r21, Z+1	; 0x01
 3d0:	02 81       	ldd	r16, Z+2	; 0x02
 3d2:	13 81       	ldd	r17, Z+3	; 0x03
 3d4:	48 17       	cp	r20, r24
 3d6:	59 07       	cpc	r21, r25
 3d8:	c8 f0       	brcs	.+50     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3da:	84 17       	cp	r24, r20
 3dc:	95 07       	cpc	r25, r21
 3de:	69 f4       	brne	.+26     	; 0x3fa <malloc+0x54>
 3e0:	10 97       	sbiw	r26, 0x00	; 0
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <malloc+0x4a>
 3e4:	12 96       	adiw	r26, 0x02	; 2
 3e6:	0c 93       	st	X, r16
 3e8:	12 97       	sbiw	r26, 0x02	; 2
 3ea:	13 96       	adiw	r26, 0x03	; 3
 3ec:	1c 93       	st	X, r17
 3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f0:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <__flp>
 3f4:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <__flp+0x1>
 3f8:	22 c0       	rjmp	.+68     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3fa:	21 15       	cp	r18, r1
 3fc:	31 05       	cpc	r19, r1
 3fe:	19 f0       	breq	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	42 17       	cp	r20, r18
 402:	53 07       	cpc	r21, r19
 404:	18 f4       	brcc	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	9a 01       	movw	r18, r20
 408:	bd 01       	movw	r22, r26
 40a:	ef 01       	movw	r28, r30
 40c:	df 01       	movw	r26, r30
 40e:	f8 01       	movw	r30, r16
 410:	db cf       	rjmp	.-74     	; 0x3c8 <malloc+0x22>
 412:	21 15       	cp	r18, r1
 414:	31 05       	cpc	r19, r1
 416:	f9 f0       	breq	.+62     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 418:	28 1b       	sub	r18, r24
 41a:	39 0b       	sbc	r19, r25
 41c:	24 30       	cpi	r18, 0x04	; 4
 41e:	31 05       	cpc	r19, r1
 420:	80 f4       	brcc	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	61 15       	cp	r22, r1
 428:	71 05       	cpc	r23, r1
 42a:	21 f0       	breq	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	fb 01       	movw	r30, r22
 42e:	93 83       	std	Z+3, r25	; 0x03
 430:	82 83       	std	Z+2, r24	; 0x02
 432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <__flp+0x1>
 438:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__flp>
 43c:	fe 01       	movw	r30, r28
 43e:	32 96       	adiw	r30, 0x02	; 2
 440:	44 c0       	rjmp	.+136    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 442:	fe 01       	movw	r30, r28
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	81 93       	st	Z+, r24
 44a:	91 93       	st	Z+, r25
 44c:	22 50       	subi	r18, 0x02	; 2
 44e:	31 09       	sbc	r19, r1
 450:	39 83       	std	Y+1, r19	; 0x01
 452:	28 83       	st	Y, r18
 454:	3a c0       	rjmp	.+116    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 456:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <__brkval>
 45a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <__brkval+0x1>
 45e:	23 2b       	or	r18, r19
 460:	41 f4       	brne	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 462:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 466:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 46a:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <__brkval+0x1>
 46e:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <__brkval>
 472:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 476:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 47a:	21 15       	cp	r18, r1
 47c:	31 05       	cpc	r19, r1
 47e:	41 f4       	brne	.+16     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 480:	2d b7       	in	r18, 0x3d	; 61
 482:	3e b7       	in	r19, 0x3e	; 62
 484:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 488:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 48c:	24 1b       	sub	r18, r20
 48e:	35 0b       	sbc	r19, r21
 490:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <__brkval>
 494:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <__brkval+0x1>
 498:	e2 17       	cp	r30, r18
 49a:	f3 07       	cpc	r31, r19
 49c:	a0 f4       	brcc	.+40     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 49e:	2e 1b       	sub	r18, r30
 4a0:	3f 0b       	sbc	r19, r31
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	78 f0       	brcs	.+30     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4a8:	ac 01       	movw	r20, r24
 4aa:	4e 5f       	subi	r20, 0xFE	; 254
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	24 17       	cp	r18, r20
 4b0:	35 07       	cpc	r19, r21
 4b2:	48 f0       	brcs	.+18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b4:	4e 0f       	add	r20, r30
 4b6:	5f 1f       	adc	r21, r31
 4b8:	50 93 12 01 	sts	0x0112, r21	; 0x800112 <__brkval+0x1>
 4bc:	40 93 11 01 	sts	0x0111, r20	; 0x800111 <__brkval>
 4c0:	81 93       	st	Z+, r24
 4c2:	91 93       	st	Z+, r25
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	e0 e0       	ldi	r30, 0x00	; 0
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	cf 01       	movw	r24, r30
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <free>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <free+0xa>
 4de:	81 c0       	rjmp	.+258    	; 0x5e2 <free+0x10c>
 4e0:	fc 01       	movw	r30, r24
 4e2:	32 97       	sbiw	r30, 0x02	; 2
 4e4:	13 82       	std	Z+3, r1	; 0x03
 4e6:	12 82       	std	Z+2, r1	; 0x02
 4e8:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <__flp>
 4ec:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <__flp+0x1>
 4f0:	10 97       	sbiw	r26, 0x00	; 0
 4f2:	81 f4       	brne	.+32     	; 0x514 <free+0x3e>
 4f4:	20 81       	ld	r18, Z
 4f6:	31 81       	ldd	r19, Z+1	; 0x01
 4f8:	82 0f       	add	r24, r18
 4fa:	93 1f       	adc	r25, r19
 4fc:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <__brkval>
 500:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <__brkval+0x1>
 504:	28 17       	cp	r18, r24
 506:	39 07       	cpc	r19, r25
 508:	51 f5       	brne	.+84     	; 0x55e <free+0x88>
 50a:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <__brkval+0x1>
 50e:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <__brkval>
 512:	67 c0       	rjmp	.+206    	; 0x5e2 <free+0x10c>
 514:	ed 01       	movw	r28, r26
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	ce 17       	cp	r28, r30
 51c:	df 07       	cpc	r29, r31
 51e:	40 f4       	brcc	.+16     	; 0x530 <free+0x5a>
 520:	4a 81       	ldd	r20, Y+2	; 0x02
 522:	5b 81       	ldd	r21, Y+3	; 0x03
 524:	9e 01       	movw	r18, r28
 526:	41 15       	cp	r20, r1
 528:	51 05       	cpc	r21, r1
 52a:	f1 f0       	breq	.+60     	; 0x568 <free+0x92>
 52c:	ea 01       	movw	r28, r20
 52e:	f5 cf       	rjmp	.-22     	; 0x51a <free+0x44>
 530:	d3 83       	std	Z+3, r29	; 0x03
 532:	c2 83       	std	Z+2, r28	; 0x02
 534:	40 81       	ld	r20, Z
 536:	51 81       	ldd	r21, Z+1	; 0x01
 538:	84 0f       	add	r24, r20
 53a:	95 1f       	adc	r25, r21
 53c:	c8 17       	cp	r28, r24
 53e:	d9 07       	cpc	r29, r25
 540:	59 f4       	brne	.+22     	; 0x558 <free+0x82>
 542:	88 81       	ld	r24, Y
 544:	99 81       	ldd	r25, Y+1	; 0x01
 546:	84 0f       	add	r24, r20
 548:	95 1f       	adc	r25, r21
 54a:	02 96       	adiw	r24, 0x02	; 2
 54c:	91 83       	std	Z+1, r25	; 0x01
 54e:	80 83       	st	Z, r24
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	9b 81       	ldd	r25, Y+3	; 0x03
 554:	93 83       	std	Z+3, r25	; 0x03
 556:	82 83       	std	Z+2, r24	; 0x02
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	29 f4       	brne	.+10     	; 0x568 <free+0x92>
 55e:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <__flp+0x1>
 562:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <__flp>
 566:	3d c0       	rjmp	.+122    	; 0x5e2 <free+0x10c>
 568:	e9 01       	movw	r28, r18
 56a:	fb 83       	std	Y+3, r31	; 0x03
 56c:	ea 83       	std	Y+2, r30	; 0x02
 56e:	49 91       	ld	r20, Y+
 570:	59 91       	ld	r21, Y+
 572:	c4 0f       	add	r28, r20
 574:	d5 1f       	adc	r29, r21
 576:	ec 17       	cp	r30, r28
 578:	fd 07       	cpc	r31, r29
 57a:	61 f4       	brne	.+24     	; 0x594 <free+0xbe>
 57c:	80 81       	ld	r24, Z
 57e:	91 81       	ldd	r25, Z+1	; 0x01
 580:	84 0f       	add	r24, r20
 582:	95 1f       	adc	r25, r21
 584:	02 96       	adiw	r24, 0x02	; 2
 586:	e9 01       	movw	r28, r18
 588:	99 83       	std	Y+1, r25	; 0x01
 58a:	88 83       	st	Y, r24
 58c:	82 81       	ldd	r24, Z+2	; 0x02
 58e:	93 81       	ldd	r25, Z+3	; 0x03
 590:	9b 83       	std	Y+3, r25	; 0x03
 592:	8a 83       	std	Y+2, r24	; 0x02
 594:	e0 e0       	ldi	r30, 0x00	; 0
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	12 96       	adiw	r26, 0x02	; 2
 59a:	8d 91       	ld	r24, X+
 59c:	9c 91       	ld	r25, X
 59e:	13 97       	sbiw	r26, 0x03	; 3
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	19 f0       	breq	.+6      	; 0x5aa <free+0xd4>
 5a4:	fd 01       	movw	r30, r26
 5a6:	dc 01       	movw	r26, r24
 5a8:	f7 cf       	rjmp	.-18     	; 0x598 <free+0xc2>
 5aa:	8d 91       	ld	r24, X+
 5ac:	9c 91       	ld	r25, X
 5ae:	11 97       	sbiw	r26, 0x01	; 1
 5b0:	9d 01       	movw	r18, r26
 5b2:	2e 5f       	subi	r18, 0xFE	; 254
 5b4:	3f 4f       	sbci	r19, 0xFF	; 255
 5b6:	82 0f       	add	r24, r18
 5b8:	93 1f       	adc	r25, r19
 5ba:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <__brkval>
 5be:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <__brkval+0x1>
 5c2:	28 17       	cp	r18, r24
 5c4:	39 07       	cpc	r19, r25
 5c6:	69 f4       	brne	.+26     	; 0x5e2 <free+0x10c>
 5c8:	30 97       	sbiw	r30, 0x00	; 0
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <free+0x100>
 5cc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__flp+0x1>
 5d0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__flp>
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <free+0x104>
 5d6:	13 82       	std	Z+3, r1	; 0x03
 5d8:	12 82       	std	Z+2, r1	; 0x02
 5da:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <__brkval+0x1>
 5de:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <__brkval>
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
