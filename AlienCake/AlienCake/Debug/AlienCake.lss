
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000ec4  00000f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  0080015c  0080015c  00000fb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007fb2  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b59  00000000  00000000  000092fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aed  00000000  00000000  0000ae57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000888  00000000  00000000  0000c944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002185  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fd5  00000000  00000000  0000f351  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00012326  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_18>
  4c:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	bc 04       	cpc	r11, r12

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 ec       	ldi	r30, 0xC4	; 196
  d8:	fe e0       	ldi	r31, 0x0E	; 14
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	ac 35       	cpi	r26, 0x5C	; 92
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	22 e0       	ldi	r18, 0x02	; 2
  e8:	ac e5       	ldi	r26, 0x5C	; 92
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ac 30       	cpi	r26, 0x0C	; 12
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 39 06 	call	0xc72	; 0xc72 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
 110:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <led_create>:
	return led;
}

void led_destroy(led_blinker* led)
{
	free(led);
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	18 2f       	mov	r17, r24
 122:	09 2f       	mov	r16, r25
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 3f 06 	call	0xc7e	; 0xc7e <malloc>
 12c:	ec 01       	movw	r28, r24
 12e:	18 83       	st	Y, r17
 130:	09 83       	std	Y+1, r16	; 0x01
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 2f       	mov	r24, r17
 136:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <led_turn_on>:
	pinMode(led_pin, OUTPUT);
}
 
void led_turn_on(int led_pin)
{
	digitalWrite(led_pin, HIGH);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0c 94 c3 02 	jmp	0x586	; 0x586 <digitalWrite>

0000014c <led_turn_off>:
}

void led_turn_off(int led_pin)
{
	digitalWrite(led_pin, LOW);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	0c 94 c3 02 	jmp	0x586	; 0x586 <digitalWrite>

00000152 <length_detector_create>:
#include "length_detector.h"


length_detector *length_detector_create(int trig_pin, int echo_pin)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	18 2f       	mov	r17, r24
 160:	09 2f       	mov	r16, r25
 162:	7b 01       	movw	r14, r22
  length_detector * detector = malloc(sizeof(length_detector));
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 3f 06 	call	0xc7e	; 0xc7e <malloc>
 16c:	ec 01       	movw	r28, r24
  detector->trig_pin = trig_pin;
 16e:	1a 83       	std	Y+2, r17	; 0x02
 170:	0b 83       	std	Y+3, r16	; 0x03
  detector->echo_pin = echo_pin;
 172:	f9 82       	std	Y+1, r15	; 0x01
 174:	e8 82       	st	Y, r14
  return detector;
}

void length_detector_init(length_detector * detector)
{
  pinMode(detector->trig_pin, OUTPUT);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 2f       	mov	r24, r17
 17a:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
  pinMode(detector->echo_pin, INPUT);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	88 81       	ld	r24, Y
 182:	0e 94 87 02 	call	0x50e	; 0x50e <pinMode>
  length_detector * detector = malloc(sizeof(length_detector));
  detector->trig_pin = trig_pin;
  detector->echo_pin = echo_pin;
  length_detector_init(detector);
  return detector;
}
 186:	ce 01       	movw	r24, r28
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <length_detector_measure>:
  delay(10);
  digitalWrite(trig_pin, LOW);
}

int length_detector_measure(length_detector * detector)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	8c 01       	movw	r16, r24
  pinMode(detector->echo_pin, INPUT);
}

void length_detector_ping(int trig_pin)
{
  digitalWrite(trig_pin, HIGH);
 1a0:	fc 01       	movw	r30, r24
 1a2:	c2 81       	ldd	r28, Z+2	; 0x02
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
  delay(10);
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
  digitalWrite(trig_pin, LOW);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 c3 02 	call	0x586	; 0x586 <digitalWrite>
int length_detector_measure(length_detector * detector)
{
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
 1c0:	f8 01       	movw	r30, r16
 1c2:	80 81       	ld	r24, Z
 1c4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <digitalRead>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	e1 f4       	brne	.+56     	; 0x204 <length_detector_measure+0x6e>
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
  {
    return -1;
  }
  
  int time = 0;  
  while(digitalRead(detector->echo_pin) != LOW) {
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 81       	ld	r24, Z
 1d4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <digitalRead>
 1d8:	89 2b       	or	r24, r25
 1da:	41 f0       	breq	.+16     	; 0x1ec <length_detector_measure+0x56>
    time++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
    delay(1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
 1ea:	f2 cf       	rjmp	.-28     	; 0x1d0 <length_detector_measure+0x3a>
  }
  
  return (time * 34) / 2000;
 1ec:	22 e2       	ldi	r18, 0x22	; 34
 1ee:	2c 9f       	mul	r18, r28
 1f0:	c0 01       	movw	r24, r0
 1f2:	2d 9f       	mul	r18, r29
 1f4:	90 0d       	add	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	60 ed       	ldi	r22, 0xD0	; 208
 1fa:	77 e0       	ldi	r23, 0x07	; 7
 1fc:	0e 94 ef 05 	call	0xbde	; 0xbde <__divmodhi4>
 200:	cb 01       	movw	r24, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <length_detector_measure+0x72>
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
  {
    return -1;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	9f ef       	ldi	r25, 0xFF	; 255
    time++;
    delay(1);
  }
  
  return (time * 34) / 2000;
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <setup>:
HardwareSerial *serial;
#endif

void setup() {
	#ifdef DEBUG
		serial = hardware_serial_get();
 212:	0e 94 1c 03 	call	0x638	; 0x638 <hardware_serial_get>
 216:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <serial+0x1>
 21a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <serial>
		hardware_serial_begin(serial, 9600);
 21e:	60 e8       	ldi	r22, 0x80	; 128
 220:	75 e2       	ldi	r23, 0x25	; 37
 222:	0e 94 1f 03 	call	0x63e	; 0x63e <hardware_serial_begin>
		hardware_serial_println(serial, "Starting program for Alien Cake\n");
 226:	66 e0       	ldi	r22, 0x06	; 6
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <serial>
 22e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <serial+0x1>
 232:	0e 94 27 03 	call	0x64e	; 0x64e <hardware_serial_println>
	#endif
	// put your setup code here, to run once:
	led = led_create(PIN_D4);
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 8c 00 	call	0x118	; 0x118 <led_create>
 23e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <led+0x1>
 242:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <led>
	detector = length_detector_create(TRIG_PIN, ECHO_PIN);
 246:	69 e0       	ldi	r22, 0x09	; 9
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 a9 00 	call	0x152	; 0x152 <length_detector_create>
 252:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <detector+0x1>
 256:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <detector>
	
	led_turn_off(led->led_pin);
 25a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <led>
 25e:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <led+0x1>
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	0c 94 a6 00 	jmp	0x14c	; 0x14c <led_turn_off>

0000026a <loop>:
}

void loop() {
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	#ifdef DEBUG
		hardware_serial_println(serial, "Distance detector on\n");
 26e:	67 e2       	ldi	r22, 0x27	; 39
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <serial>
 276:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <serial+0x1>
 27a:	0e 94 27 03 	call	0x64e	; 0x64e <hardware_serial_println>
	#endif
  // put your main code here, to run repeatedly:
	int distance = length_detector_measure(detector);
 27e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <detector>
 282:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <detector+0x1>
 286:	0e 94 cb 00 	call	0x196	; 0x196 <length_detector_measure>
 28a:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		hardware_serial_printNumber(serial, distance);
 28c:	bc 01       	movw	r22, r24
 28e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <serial>
 292:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <serial+0x1>
 296:	0e 94 2a 03 	call	0x654	; 0x654 <hardware_serial_printNumber>
	#endif
		
	if(distance > 0)
 29a:	1c 16       	cp	r1, r28
 29c:	1d 06       	cpc	r1, r29
 29e:	74 f4       	brge	.+28     	; 0x2bc <loop+0x52>
	{
		led_turn_on(led->led_pin);
 2a0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <led>
 2a4:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <led+0x1>
 2a8:	80 81       	ld	r24, Z
 2aa:	91 81       	ldd	r25, Z+1	; 0x01
 2ac:	0e 94 a3 00 	call	0x146	; 0x146 <led_turn_on>
		delay(2000);
 2b0:	60 ed       	ldi	r22, 0xD0	; 208
 2b2:	77 e0       	ldi	r23, 0x07	; 7
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <delay>
	}
	
	led_turn_off(led->led_pin);
 2bc:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <led>
 2c0:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <led+0x1>
 2c4:	80 81       	ld	r24, Z
 2c6:	91 81       	ldd	r25, Z+1	; 0x01
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
	{
		led_turn_on(led->led_pin);
		delay(2000);
	}
	
	led_turn_off(led->led_pin);
 2cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <led_turn_off>

000002d0 <initVariant>:
 2d0:	08 95       	ret

000002d2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 2d2:	0e 94 23 02 	call	0x446	; 0x446 <init>

	initVariant();
 2d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 2da:	0e 94 09 01 	call	0x212	; 0x212 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2de:	cd e5       	ldi	r28, 0x5D	; 93
 2e0:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 2e2:	0e 94 35 01 	call	0x26a	; 0x26a <loop>
		if (serialEventRun) serialEventRun();
 2e6:	20 97       	sbiw	r28, 0x00	; 0
 2e8:	e1 f3       	breq	.-8      	; 0x2e2 <main+0x10>
 2ea:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z14serialEventRunv>
 2ee:	f9 cf       	rjmp	.-14     	; 0x2e2 <main+0x10>

000002f0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <timer0_millis>
 30a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <timer0_millis+0x1>
 30e:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <timer0_millis+0x2>
 312:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <timer0_millis+0x3>
 316:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__data_end>
 31a:	23 e0       	ldi	r18, 0x03	; 3
 31c:	23 0f       	add	r18, r19
 31e:	2d 37       	cpi	r18, 0x7D	; 125
 320:	20 f4       	brcc	.+8      	; 0x32a <__vector_16+0x3a>
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	a1 1d       	adc	r26, r1
 326:	b1 1d       	adc	r27, r1
 328:	05 c0       	rjmp	.+10     	; 0x334 <__vector_16+0x44>
 32a:	26 e8       	ldi	r18, 0x86	; 134
 32c:	23 0f       	add	r18, r19
 32e:	02 96       	adiw	r24, 0x02	; 2
 330:	a1 1d       	adc	r26, r1
 332:	b1 1d       	adc	r27, r1
 334:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <__data_end>
 338:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <timer0_millis>
 33c:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <timer0_millis+0x1>
 340:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <timer0_millis+0x2>
 344:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <timer0_millis+0x3>
 348:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <timer0_overflow_count>
 34c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <timer0_overflow_count+0x1>
 350:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <timer0_overflow_count+0x2>
 354:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <timer0_overflow_count+0x3>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	a1 1d       	adc	r26, r1
 35c:	b1 1d       	adc	r27, r1
 35e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <timer0_overflow_count>
 362:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <timer0_overflow_count+0x1>
 366:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <timer0_overflow_count+0x2>
 36a:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <timer0_overflow_count+0x3>
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <micros>:
 384:	3f b7       	in	r19, 0x3f	; 63
 386:	f8 94       	cli
 388:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <timer0_overflow_count>
 38c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <timer0_overflow_count+0x1>
 390:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <timer0_overflow_count+0x2>
 394:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <timer0_overflow_count+0x3>
 398:	26 b5       	in	r18, 0x26	; 38
 39a:	a8 9b       	sbis	0x15, 0	; 21
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <micros+0x24>
 39e:	2f 3f       	cpi	r18, 0xFF	; 255
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <micros+0x24>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	a1 1d       	adc	r26, r1
 3a6:	b1 1d       	adc	r27, r1
 3a8:	3f bf       	out	0x3f, r19	; 63
 3aa:	ba 2f       	mov	r27, r26
 3ac:	a9 2f       	mov	r26, r25
 3ae:	98 2f       	mov	r25, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	82 0f       	add	r24, r18
 3b4:	91 1d       	adc	r25, r1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	42 e0       	ldi	r20, 0x02	; 2
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	4a 95       	dec	r20
 3ca:	d1 f7       	brne	.-12     	; 0x3c0 <micros+0x3c>
 3cc:	08 95       	ret

000003ce <delay>:
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
 3e2:	0e 94 c2 01 	call	0x384	; 0x384 <micros>
 3e6:	4b 01       	movw	r8, r22
 3e8:	5c 01       	movw	r10, r24
 3ea:	c1 14       	cp	r12, r1
 3ec:	d1 04       	cpc	r13, r1
 3ee:	e1 04       	cpc	r14, r1
 3f0:	f1 04       	cpc	r15, r1
 3f2:	01 f1       	breq	.+64     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f4:	0e 94 1b 03 	call	0x636	; 0x636 <yield>
 3f8:	0e 94 c2 01 	call	0x384	; 0x384 <micros>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	88 19       	sub	r24, r8
 402:	99 09       	sbc	r25, r9
 404:	aa 09       	sbc	r26, r10
 406:	bb 09       	sbc	r27, r11
 408:	88 3e       	cpi	r24, 0xE8	; 232
 40a:	93 40       	sbci	r25, 0x03	; 3
 40c:	a1 05       	cpc	r26, r1
 40e:	b1 05       	cpc	r27, r1
 410:	60 f3       	brcs	.-40     	; 0x3ea <delay+0x1c>
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	c2 1a       	sub	r12, r18
 416:	d1 08       	sbc	r13, r1
 418:	e1 08       	sbc	r14, r1
 41a:	f1 08       	sbc	r15, r1
 41c:	88 ee       	ldi	r24, 0xE8	; 232
 41e:	88 0e       	add	r8, r24
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	98 1e       	adc	r9, r24
 424:	a1 1c       	adc	r10, r1
 426:	b1 1c       	adc	r11, r1
 428:	c1 14       	cp	r12, r1
 42a:	d1 04       	cpc	r13, r1
 42c:	e1 04       	cpc	r14, r1
 42e:	f1 04       	cpc	r15, r1
 430:	19 f7       	brne	.-58     	; 0x3f8 <delay+0x2a>
 432:	db cf       	rjmp	.-74     	; 0x3ea <delay+0x1c>
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	bf 90       	pop	r11
 43e:	af 90       	pop	r10
 440:	9f 90       	pop	r9
 442:	8f 90       	pop	r8
 444:	08 95       	ret

00000446 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 446:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 448:	84 b5       	in	r24, 0x24	; 36
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 44e:	84 b5       	in	r24, 0x24	; 36
 450:	81 60       	ori	r24, 0x01	; 1
 452:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 454:	85 b5       	in	r24, 0x25	; 37
 456:	82 60       	ori	r24, 0x02	; 2
 458:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 45a:	85 b5       	in	r24, 0x25	; 37
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 460:	ee e6       	ldi	r30, 0x6E	; 110
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	81 60       	ori	r24, 0x01	; 1
 468:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 46a:	e1 e8       	ldi	r30, 0x81	; 129
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 47c:	e0 e8       	ldi	r30, 0x80	; 128
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 486:	e1 eb       	ldi	r30, 0xB1	; 177
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	84 60       	ori	r24, 0x04	; 4
 48e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 490:	e0 eb       	ldi	r30, 0xB0	; 176
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 49a:	ea e7       	ldi	r30, 0x7A	; 122
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	84 60       	ori	r24, 0x04	; 4
 4a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 4a4:	80 81       	ld	r24, Z
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4b0:	80 81       	ld	r24, Z
 4b2:	80 68       	ori	r24, 0x80	; 128
 4b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ba:	08 95       	ret

000004bc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	81 f0       	breq	.+32     	; 0x4e0 <turnOffPWM+0x24>
 4c0:	28 f4       	brcc	.+10     	; 0x4cc <turnOffPWM+0x10>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	99 f0       	breq	.+38     	; 0x4ec <turnOffPWM+0x30>
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	a1 f0       	breq	.+40     	; 0x4f2 <turnOffPWM+0x36>
 4ca:	08 95       	ret
 4cc:	87 30       	cpi	r24, 0x07	; 7
 4ce:	a9 f0       	breq	.+42     	; 0x4fa <turnOffPWM+0x3e>
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	b9 f0       	breq	.+46     	; 0x502 <turnOffPWM+0x46>
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	d1 f4       	brne	.+52     	; 0x50c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4ea:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4ec:	84 b5       	in	r24, 0x24	; 36
 4ee:	8f 77       	andi	r24, 0x7F	; 127
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4f2:	84 b5       	in	r24, 0x24	; 36
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	84 bd       	out	0x24, r24	; 36
 4f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4fe:	8f 77       	andi	r24, 0x7F	; 127
 500:	03 c0       	rjmp	.+6      	; 0x508 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 502:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 50c:	08 95       	ret

0000050e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	e4 58       	subi	r30, 0x84	; 132
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 51c:	fc 01       	movw	r30, r24
 51e:	e0 57       	subi	r30, 0x70	; 112
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 524:	88 23       	and	r24, r24
 526:	61 f1       	breq	.+88     	; 0x580 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	fc 01       	movw	r30, r24
 530:	e8 54       	subi	r30, 0x48	; 72
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	c5 91       	lpm	r28, Z+
 536:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 538:	fc 01       	movw	r30, r24
 53a:	e2 55       	subi	r30, 0x52	; 82
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	a5 91       	lpm	r26, Z+
 540:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 542:	61 11       	cpse	r22, r1
 544:	09 c0       	rjmp	.+18     	; 0x558 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 546:	9f b7       	in	r25, 0x3f	; 63
                cli();
 548:	f8 94       	cli
		*reg &= ~bit;
 54a:	88 81       	ld	r24, Y
 54c:	20 95       	com	r18
 54e:	82 23       	and	r24, r18
 550:	88 83       	st	Y, r24
		*out &= ~bit;
 552:	ec 91       	ld	r30, X
 554:	2e 23       	and	r18, r30
 556:	0b c0       	rjmp	.+22     	; 0x56e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 558:	62 30       	cpi	r22, 0x02	; 2
 55a:	61 f4       	brne	.+24     	; 0x574 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 55c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 55e:	f8 94       	cli
		*reg &= ~bit;
 560:	88 81       	ld	r24, Y
 562:	32 2f       	mov	r19, r18
 564:	30 95       	com	r19
 566:	83 23       	and	r24, r19
 568:	88 83       	st	Y, r24
		*out |= bit;
 56a:	ec 91       	ld	r30, X
 56c:	2e 2b       	or	r18, r30
 56e:	2c 93       	st	X, r18
		SREG = oldSREG;
 570:	9f bf       	out	0x3f, r25	; 63
 572:	06 c0       	rjmp	.+12     	; 0x580 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 574:	8f b7       	in	r24, 0x3f	; 63
                cli();
 576:	f8 94       	cli
		*reg |= bit;
 578:	e8 81       	ld	r30, Y
 57a:	2e 2b       	or	r18, r30
 57c:	28 83       	st	Y, r18
		SREG = oldSREG;
 57e:	8f bf       	out	0x3f, r24	; 63
	}
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	e8 59       	subi	r30, 0x98	; 152
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 598:	f9 01       	movw	r30, r18
 59a:	e4 58       	subi	r30, 0x84	; 132
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5a0:	f9 01       	movw	r30, r18
 5a2:	e0 57       	subi	r30, 0x70	; 112
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5a8:	cc 23       	and	r28, r28
 5aa:	c1 f0       	breq	.+48     	; 0x5dc <digitalWrite+0x56>
 5ac:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5ae:	81 11       	cpse	r24, r1
 5b0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <turnOffPWM>

	out = portOutputRegister(port);
 5b4:	ec 2f       	mov	r30, r28
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e2 55       	subi	r30, 0x52	; 82
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	a5 91       	lpm	r26, Z+
 5c2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5c4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5c6:	f8 94       	cli

	if (val == LOW) {
 5c8:	11 11       	cpse	r17, r1
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <digitalWrite+0x4e>
		*out &= ~bit;
 5cc:	8c 91       	ld	r24, X
 5ce:	d0 95       	com	r29
 5d0:	d8 23       	and	r29, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5d4:	ec 91       	ld	r30, X
 5d6:	de 2b       	or	r29, r30
 5d8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5da:	9f bf       	out	0x3f, r25	; 63
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	08 95       	ret

000005e4 <digitalRead>:

int digitalRead(uint8_t pin)
{
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	f9 01       	movw	r30, r18
 5ee:	e8 59       	subi	r30, 0x98	; 152
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5f4:	f9 01       	movw	r30, r18
 5f6:	e4 58       	subi	r30, 0x84	; 132
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5fc:	f9 01       	movw	r30, r18
 5fe:	e0 57       	subi	r30, 0x70	; 112
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 604:	cc 23       	and	r28, r28
 606:	91 f0       	breq	.+36     	; 0x62c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 608:	81 11       	cpse	r24, r1
 60a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 60e:	ec 2f       	mov	r30, r28
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	ec 55       	subi	r30, 0x5C	; 92
 618:	ff 4f       	sbci	r31, 0xFF	; 255
 61a:	a5 91       	lpm	r26, Z+
 61c:	b4 91       	lpm	r27, Z
 61e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 620:	ed 23       	and	r30, r29
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	21 f4       	brne	.+8      	; 0x630 <digitalRead+0x4c>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <digitalRead+0x4c>
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 636:	08 95       	ret

00000638 <hardware_serial_get>:
 extern "C"
 {
	HardwareSerial* hardware_serial_get(void)
	{
		return &Serial;
	}
 638:	85 e6       	ldi	r24, 0x65	; 101
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	08 95       	ret

0000063e <hardware_serial_begin>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 63e:	ab 01       	movw	r20, r22
 640:	77 0f       	add	r23, r23
 642:	66 0b       	sbc	r22, r22
 644:	77 0b       	sbc	r23, r23
 646:	26 e0       	ldi	r18, 0x06	; 6
 648:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN14HardwareSerial5beginEmh>
 64c:	08 95       	ret

0000064e <hardware_serial_println>:
		handle->begin(bandwith);
	}

	void hardware_serial_println(HardwareSerial *handle, const char *text)
	{
		handle->println(text);
 64e:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
 652:	08 95       	ret

00000654 <hardware_serial_printNumber>:
	}
	
	void hardware_serial_printNumber(HardwareSerial *handle, int value)
	{
		handle->println(value);
 654:	4a e0       	ldi	r20, 0x0A	; 10
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN5Print7printlnEii>
 65c:	08 95       	ret

0000065e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 65e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 660:	91 8d       	ldd	r25, Z+25	; 0x19
 662:	22 8d       	ldd	r18, Z+26	; 0x1a
 664:	89 2f       	mov	r24, r25
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	80 5c       	subi	r24, 0xC0	; 192
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	82 1b       	sub	r24, r18
 66e:	91 09       	sbc	r25, r1
}
 670:	8f 73       	andi	r24, 0x3F	; 63
 672:	99 27       	eor	r25, r25
 674:	08 95       	ret

00000676 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 676:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 678:	91 8d       	ldd	r25, Z+25	; 0x19
 67a:	82 8d       	ldd	r24, Z+26	; 0x1a
 67c:	98 17       	cp	r25, r24
 67e:	31 f0       	breq	.+12     	; 0x68c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 680:	82 8d       	ldd	r24, Z+26	; 0x1a
 682:	e8 0f       	add	r30, r24
 684:	f1 1d       	adc	r31, r1
 686:	85 8d       	ldd	r24, Z+29	; 0x1d
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 690:	08 95       	ret

00000692 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 692:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 694:	91 8d       	ldd	r25, Z+25	; 0x19
 696:	82 8d       	ldd	r24, Z+26	; 0x1a
 698:	98 17       	cp	r25, r24
 69a:	61 f0       	breq	.+24     	; 0x6b4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 69c:	82 8d       	ldd	r24, Z+26	; 0x1a
 69e:	df 01       	movw	r26, r30
 6a0:	a8 0f       	add	r26, r24
 6a2:	b1 1d       	adc	r27, r1
 6a4:	5d 96       	adiw	r26, 0x1d	; 29
 6a6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 6a8:	92 8d       	ldd	r25, Z+26	; 0x1a
 6aa:	9f 5f       	subi	r25, 0xFF	; 255
 6ac:	9f 73       	andi	r25, 0x3F	; 63
 6ae:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 6b8:	08 95       	ret

000006ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 6ba:	82 eb       	ldi	r24, 0xB2	; 178
 6bc:	94 e0       	ldi	r25, 0x04	; 4
 6be:	89 2b       	or	r24, r25
 6c0:	49 f0       	breq	.+18     	; 0x6d4 <_Z14serialEventRunv+0x1a>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	89 2b       	or	r24, r25
 6c8:	29 f0       	breq	.+10     	; 0x6d4 <_Z14serialEventRunv+0x1a>
 6ca:	0e 94 b2 04 	call	0x964	; 0x964 <_Z17Serial0_availablev>
 6ce:	81 11       	cpse	r24, r1
 6d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 6d4:	08 95       	ret

000006d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 6d6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 6d8:	84 8d       	ldd	r24, Z+28	; 0x1c
 6da:	df 01       	movw	r26, r30
 6dc:	a8 0f       	add	r26, r24
 6de:	b1 1d       	adc	r27, r1
 6e0:	a3 5a       	subi	r26, 0xA3	; 163
 6e2:	bf 4f       	sbci	r27, 0xFF	; 255
 6e4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 6e6:	84 8d       	ldd	r24, Z+28	; 0x1c
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	8f 73       	andi	r24, 0x3F	; 63
 6ee:	99 27       	eor	r25, r25
 6f0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 6f2:	a6 89       	ldd	r26, Z+22	; 0x16
 6f4:	b7 89       	ldd	r27, Z+23	; 0x17
 6f6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 6f8:	a0 89       	ldd	r26, Z+16	; 0x10
 6fa:	b1 89       	ldd	r27, Z+17	; 0x11
 6fc:	8c 91       	ld	r24, X
 6fe:	80 64       	ori	r24, 0x40	; 64
 700:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 702:	93 8d       	ldd	r25, Z+27	; 0x1b
 704:	84 8d       	ldd	r24, Z+28	; 0x1c
 706:	98 13       	cpse	r25, r24
 708:	06 c0       	rjmp	.+12     	; 0x716 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 70a:	02 88       	ldd	r0, Z+18	; 0x12
 70c:	f3 89       	ldd	r31, Z+19	; 0x13
 70e:	e0 2d       	mov	r30, r0
 710:	80 81       	ld	r24, Z
 712:	8f 7d       	andi	r24, 0xDF	; 223
 714:	80 83       	st	Z, r24
 716:	08 95       	ret

00000718 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	ec 01       	movw	r28, r24
  _written = true;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 72a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 72c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 72e:	98 13       	cpse	r25, r24
 730:	05 c0       	rjmp	.+10     	; 0x73c <_ZN14HardwareSerial5writeEh+0x24>
 732:	e8 89       	ldd	r30, Y+16	; 0x10
 734:	f9 89       	ldd	r31, Y+17	; 0x11
 736:	80 81       	ld	r24, Z
 738:	85 fd       	sbrc	r24, 5
 73a:	24 c0       	rjmp	.+72     	; 0x784 <_ZN14HardwareSerial5writeEh+0x6c>
 73c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 73e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 740:	10 e0       	ldi	r17, 0x00	; 0
 742:	0f 5f       	subi	r16, 0xFF	; 255
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	0f 73       	andi	r16, 0x3F	; 63
 748:	11 27       	eor	r17, r17
 74a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 74c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 74e:	e8 12       	cpse	r14, r24
 750:	0c c0       	rjmp	.+24     	; 0x76a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	07 fc       	sbrc	r0, 7
 756:	fa cf       	rjmp	.-12     	; 0x74c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 758:	e8 89       	ldd	r30, Y+16	; 0x10
 75a:	f9 89       	ldd	r31, Y+17	; 0x11
 75c:	80 81       	ld	r24, Z
 75e:	85 ff       	sbrs	r24, 5
 760:	f5 cf       	rjmp	.-22     	; 0x74c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 762:	ce 01       	movw	r24, r28
 764:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 768:	f1 cf       	rjmp	.-30     	; 0x74c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 76a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 76c:	fe 01       	movw	r30, r28
 76e:	e8 0f       	add	r30, r24
 770:	f1 1d       	adc	r31, r1
 772:	e3 5a       	subi	r30, 0xA3	; 163
 774:	ff 4f       	sbci	r31, 0xFF	; 255
 776:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 778:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 77a:	ea 89       	ldd	r30, Y+18	; 0x12
 77c:	fb 89       	ldd	r31, Y+19	; 0x13
 77e:	80 81       	ld	r24, Z
 780:	80 62       	ori	r24, 0x20	; 32
 782:	07 c0       	rjmp	.+14     	; 0x792 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 784:	ee 89       	ldd	r30, Y+22	; 0x16
 786:	ff 89       	ldd	r31, Y+23	; 0x17
 788:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 78a:	e8 89       	ldd	r30, Y+16	; 0x10
 78c:	f9 89       	ldd	r31, Y+17	; 0x11
 78e:	80 81       	ld	r24, Z
 790:	80 64       	ori	r24, 0x40	; 64
 792:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	ef 90       	pop	r14
 7a4:	08 95       	ret

000007a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 7ac:	88 8d       	ldd	r24, Y+24	; 0x18
 7ae:	88 23       	and	r24, r24
 7b0:	c9 f0       	breq	.+50     	; 0x7e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 7b2:	ea 89       	ldd	r30, Y+18	; 0x12
 7b4:	fb 89       	ldd	r31, Y+19	; 0x13
 7b6:	80 81       	ld	r24, Z
 7b8:	85 fd       	sbrc	r24, 5
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <_ZN14HardwareSerial5flushEv+0x20>
 7bc:	a8 89       	ldd	r26, Y+16	; 0x10
 7be:	b9 89       	ldd	r27, Y+17	; 0x11
 7c0:	8c 91       	ld	r24, X
 7c2:	86 fd       	sbrc	r24, 6
 7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	07 fc       	sbrc	r0, 7
 7ca:	f5 cf       	rjmp	.-22     	; 0x7b6 <_ZN14HardwareSerial5flushEv+0x10>
 7cc:	80 81       	ld	r24, Z
 7ce:	85 ff       	sbrs	r24, 5
 7d0:	f2 cf       	rjmp	.-28     	; 0x7b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 7d2:	a8 89       	ldd	r26, Y+16	; 0x10
 7d4:	b9 89       	ldd	r27, Y+17	; 0x11
 7d6:	8c 91       	ld	r24, X
 7d8:	85 ff       	sbrs	r24, 5
 7da:	ed cf       	rjmp	.-38     	; 0x7b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 7dc:	ce 01       	movw	r24, r28
 7de:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 7e2:	e7 cf       	rjmp	.-50     	; 0x7b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 7ea:	cf 92       	push	r12
 7ec:	df 92       	push	r13
 7ee:	ef 92       	push	r14
 7f0:	ff 92       	push	r15
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	ec 01       	movw	r28, r24
 7fa:	6a 01       	movw	r12, r20
 7fc:	7b 01       	movw	r14, r22
 7fe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 800:	e8 89       	ldd	r30, Y+16	; 0x10
 802:	f9 89       	ldd	r31, Y+17	; 0x11
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 808:	41 15       	cp	r20, r1
 80a:	51 4e       	sbci	r21, 0xE1	; 225
 80c:	61 05       	cpc	r22, r1
 80e:	71 05       	cpc	r23, r1
 810:	b1 f0       	breq	.+44     	; 0x83e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	79 e0       	ldi	r23, 0x09	; 9
 816:	8d e3       	ldi	r24, 0x3D	; 61
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	a7 01       	movw	r20, r14
 81c:	96 01       	movw	r18, r12
 81e:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 822:	da 01       	movw	r26, r20
 824:	c9 01       	movw	r24, r18
 826:	01 97       	sbiw	r24, 0x01	; 1
 828:	a1 09       	sbc	r26, r1
 82a:	b1 09       	sbc	r27, r1
 82c:	b6 95       	lsr	r27
 82e:	a7 95       	ror	r26
 830:	97 95       	ror	r25
 832:	87 95       	ror	r24
 834:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 836:	21 15       	cp	r18, r1
 838:	80 e1       	ldi	r24, 0x10	; 16
 83a:	38 07       	cpc	r19, r24
 83c:	a8 f0       	brcs	.+42     	; 0x868 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 83e:	e8 89       	ldd	r30, Y+16	; 0x10
 840:	f9 89       	ldd	r31, Y+17	; 0x11
 842:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 844:	60 e8       	ldi	r22, 0x80	; 128
 846:	74 e8       	ldi	r23, 0x84	; 132
 848:	8e e1       	ldi	r24, 0x1E	; 30
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	a7 01       	movw	r20, r14
 84e:	96 01       	movw	r18, r12
 850:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 854:	da 01       	movw	r26, r20
 856:	c9 01       	movw	r24, r18
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	a1 09       	sbc	r26, r1
 85c:	b1 09       	sbc	r27, r1
 85e:	b6 95       	lsr	r27
 860:	a7 95       	ror	r26
 862:	97 95       	ror	r25
 864:	87 95       	ror	r24
 866:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 868:	ec 85       	ldd	r30, Y+12	; 0x0c
 86a:	fd 85       	ldd	r31, Y+13	; 0x0d
 86c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 86e:	ee 85       	ldd	r30, Y+14	; 0x0e
 870:	ff 85       	ldd	r31, Y+15	; 0x0f
 872:	20 83       	st	Z, r18

  _written = false;
 874:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 876:	ec 89       	ldd	r30, Y+20	; 0x14
 878:	fd 89       	ldd	r31, Y+21	; 0x15
 87a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 87c:	ea 89       	ldd	r30, Y+18	; 0x12
 87e:	fb 89       	ldd	r31, Y+19	; 0x13
 880:	80 81       	ld	r24, Z
 882:	80 61       	ori	r24, 0x10	; 16
 884:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 886:	ea 89       	ldd	r30, Y+18	; 0x12
 888:	fb 89       	ldd	r31, Y+19	; 0x13
 88a:	80 81       	ld	r24, Z
 88c:	88 60       	ori	r24, 0x08	; 8
 88e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 890:	ea 89       	ldd	r30, Y+18	; 0x12
 892:	fb 89       	ldd	r31, Y+19	; 0x13
 894:	80 81       	ld	r24, Z
 896:	80 68       	ori	r24, 0x80	; 128
 898:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 89a:	ea 89       	ldd	r30, Y+18	; 0x12
 89c:	fb 89       	ldd	r31, Y+19	; 0x13
 89e:	80 81       	ld	r24, Z
 8a0:	8f 7d       	andi	r24, 0xDF	; 223
 8a2:	80 83       	st	Z, r24
}
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	1f 91       	pop	r17
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	08 95       	ret

000008b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	2f 93       	push	r18
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 8c8:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <Serial+0x10>
 8cc:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <Serial+0x11>
 8d0:	80 81       	ld	r24, Z
 8d2:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <Serial+0x16>
 8d6:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <Serial+0x17>
 8da:	82 fd       	sbrc	r24, 2
 8dc:	12 c0       	rjmp	.+36     	; 0x902 <__stack+0x3>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 8de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8e0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Serial+0x19>
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 8e8:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <Serial+0x1a>
 8ec:	82 17       	cp	r24, r18
 8ee:	51 f0       	breq	.+20     	; 0x904 <__stack+0x5>
      _rx_buffer[_rx_buffer_head] = c;
 8f0:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <Serial+0x19>
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	eb 59       	subi	r30, 0x9B	; 155
 8f8:	fe 4f       	sbci	r31, 0xFE	; 254
 8fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 8fc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Serial+0x19>
 900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 902:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 904:	ff 91       	pop	r31
 906:	ef 91       	pop	r30
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0f be       	out	0x3f, r0	; 63
 912:	0f 90       	pop	r0
 914:	1f 90       	pop	r1
 916:	18 95       	reti

00000918 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 918:	1f 92       	push	r1
 91a:	0f 92       	push	r0
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	0f 92       	push	r0
 920:	11 24       	eor	r1, r1
 922:	2f 93       	push	r18
 924:	3f 93       	push	r19
 926:	4f 93       	push	r20
 928:	5f 93       	push	r21
 92a:	6f 93       	push	r22
 92c:	7f 93       	push	r23
 92e:	8f 93       	push	r24
 930:	9f 93       	push	r25
 932:	af 93       	push	r26
 934:	bf 93       	push	r27
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 93a:	85 e6       	ldi	r24, 0x65	; 101
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 942:	ff 91       	pop	r31
 944:	ef 91       	pop	r30
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 964:	85 e6       	ldi	r24, 0x65	; 101
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN14HardwareSerial9availableEv>
 96c:	21 e0       	ldi	r18, 0x01	; 1
 96e:	89 2b       	or	r24, r25
 970:	09 f4       	brne	.+2      	; 0x974 <_Z17Serial0_availablev+0x10>
 972:	20 e0       	ldi	r18, 0x00	; 0
}
 974:	82 2f       	mov	r24, r18
 976:	08 95       	ret

00000978 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 978:	e5 e6       	ldi	r30, 0x65	; 101
 97a:	f1 e0       	ldi	r31, 0x01	; 1
 97c:	13 82       	std	Z+3, r1	; 0x03
 97e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 980:	88 ee       	ldi	r24, 0xE8	; 232
 982:	93 e0       	ldi	r25, 0x03	; 3
 984:	a0 e0       	ldi	r26, 0x00	; 0
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	84 83       	std	Z+4, r24	; 0x04
 98a:	95 83       	std	Z+5, r25	; 0x05
 98c:	a6 83       	std	Z+6, r26	; 0x06
 98e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 990:	81 e4       	ldi	r24, 0x41	; 65
 992:	91 e0       	ldi	r25, 0x01	; 1
 994:	91 83       	std	Z+1, r25	; 0x01
 996:	80 83       	st	Z, r24
 998:	85 ec       	ldi	r24, 0xC5	; 197
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	95 87       	std	Z+13, r25	; 0x0d
 99e:	84 87       	std	Z+12, r24	; 0x0c
 9a0:	84 ec       	ldi	r24, 0xC4	; 196
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	97 87       	std	Z+15, r25	; 0x0f
 9a6:	86 87       	std	Z+14, r24	; 0x0e
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	91 8b       	std	Z+17, r25	; 0x11
 9ae:	80 8b       	std	Z+16, r24	; 0x10
 9b0:	81 ec       	ldi	r24, 0xC1	; 193
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	93 8b       	std	Z+19, r25	; 0x13
 9b6:	82 8b       	std	Z+18, r24	; 0x12
 9b8:	82 ec       	ldi	r24, 0xC2	; 194
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	95 8b       	std	Z+21, r25	; 0x15
 9be:	84 8b       	std	Z+20, r24	; 0x14
 9c0:	86 ec       	ldi	r24, 0xC6	; 198
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	97 8b       	std	Z+23, r25	; 0x17
 9c6:	86 8b       	std	Z+22, r24	; 0x16
 9c8:	11 8e       	std	Z+25, r1	; 0x19
 9ca:	12 8e       	std	Z+26, r1	; 0x1a
 9cc:	13 8e       	std	Z+27, r1	; 0x1b
 9ce:	14 8e       	std	Z+28, r1	; 0x1c
 9d0:	08 95       	ret

000009d2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 9d2:	cf 92       	push	r12
 9d4:	df 92       	push	r13
 9d6:	ef 92       	push	r14
 9d8:	ff 92       	push	r15
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	6c 01       	movw	r12, r24
 9e4:	7a 01       	movw	r14, r20
 9e6:	8b 01       	movw	r16, r22
 9e8:	c0 e0       	ldi	r28, 0x00	; 0
 9ea:	d0 e0       	ldi	r29, 0x00	; 0
 9ec:	ce 15       	cp	r28, r14
 9ee:	df 05       	cpc	r29, r15
 9f0:	81 f0       	breq	.+32     	; 0xa12 <_ZN5Print5writeEPKhj+0x40>
 9f2:	d8 01       	movw	r26, r16
 9f4:	6d 91       	ld	r22, X+
 9f6:	8d 01       	movw	r16, r26
 9f8:	d6 01       	movw	r26, r12
 9fa:	ed 91       	ld	r30, X+
 9fc:	fc 91       	ld	r31, X
 9fe:	01 90       	ld	r0, Z+
 a00:	f0 81       	ld	r31, Z
 a02:	e0 2d       	mov	r30, r0
 a04:	c6 01       	movw	r24, r12
 a06:	09 95       	icall
 a08:	89 2b       	or	r24, r25
 a0a:	11 f0       	breq	.+4      	; 0xa10 <_ZN5Print5writeEPKhj+0x3e>
 a0c:	21 96       	adiw	r28, 0x01	; 1
 a0e:	ee cf       	rjmp	.-36     	; 0x9ec <_ZN5Print5writeEPKhj+0x1a>
 a10:	7e 01       	movw	r14, r28
 a12:	c7 01       	movw	r24, r14
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	df 90       	pop	r13
 a22:	cf 90       	pop	r12
 a24:	08 95       	ret

00000a26 <_ZN5Print5writeEPKc>:
 a26:	61 15       	cp	r22, r1
 a28:	71 05       	cpc	r23, r1
 a2a:	79 f0       	breq	.+30     	; 0xa4a <_ZN5Print5writeEPKc+0x24>
 a2c:	fb 01       	movw	r30, r22
 a2e:	01 90       	ld	r0, Z+
 a30:	00 20       	and	r0, r0
 a32:	e9 f7       	brne	.-6      	; 0xa2e <_ZN5Print5writeEPKc+0x8>
 a34:	31 97       	sbiw	r30, 0x01	; 1
 a36:	af 01       	movw	r20, r30
 a38:	46 1b       	sub	r20, r22
 a3a:	57 0b       	sbc	r21, r23
 a3c:	dc 01       	movw	r26, r24
 a3e:	ed 91       	ld	r30, X+
 a40:	fc 91       	ld	r31, X
 a42:	02 80       	ldd	r0, Z+2	; 0x02
 a44:	f3 81       	ldd	r31, Z+3	; 0x03
 a46:	e0 2d       	mov	r30, r0
 a48:	09 94       	ijmp
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	08 95       	ret

00000a50 <_ZN5Print5printEc>:
 a50:	dc 01       	movw	r26, r24
 a52:	ed 91       	ld	r30, X+
 a54:	fc 91       	ld	r31, X
 a56:	01 90       	ld	r0, Z+
 a58:	f0 81       	ld	r31, Z
 a5a:	e0 2d       	mov	r30, r0
 a5c:	09 94       	ijmp

00000a5e <_ZN5Print7printlnEv>:
 a5e:	6d e4       	ldi	r22, 0x4D	; 77
 a60:	71 e0       	ldi	r23, 0x01	; 1
 a62:	0c 94 13 05 	jmp	0xa26	; 0xa26 <_ZN5Print5writeEPKc>

00000a66 <_ZN5Print7printlnEPKc>:
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	ec 01       	movw	r28, r24
 a70:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN5Print5writeEPKc>
 a74:	8c 01       	movw	r16, r24
 a76:	ce 01       	movw	r24, r28
 a78:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN5Print7printlnEv>
 a7c:	80 0f       	add	r24, r16
 a7e:	91 1f       	adc	r25, r17
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	08 95       	ret

00000a8a <_ZN5Print11printNumberEmh>:
 a8a:	8f 92       	push	r8
 a8c:	9f 92       	push	r9
 a8e:	af 92       	push	r10
 a90:	bf 92       	push	r11
 a92:	ef 92       	push	r14
 a94:	ff 92       	push	r15
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	a1 97       	sbiw	r28, 0x21	; 33
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	f8 94       	cli
 aa8:	de bf       	out	0x3e, r29	; 62
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	cd bf       	out	0x3d, r28	; 61
 aae:	7c 01       	movw	r14, r24
 ab0:	fa 01       	movw	r30, r20
 ab2:	cb 01       	movw	r24, r22
 ab4:	19 a2       	std	Y+33, r1	; 0x21
 ab6:	22 30       	cpi	r18, 0x02	; 2
 ab8:	08 f4       	brcc	.+2      	; 0xabc <_ZN5Print11printNumberEmh+0x32>
 aba:	2a e0       	ldi	r18, 0x0A	; 10
 abc:	8e 01       	movw	r16, r28
 abe:	0f 5d       	subi	r16, 0xDF	; 223
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	82 2e       	mov	r8, r18
 ac4:	91 2c       	mov	r9, r1
 ac6:	a1 2c       	mov	r10, r1
 ac8:	b1 2c       	mov	r11, r1
 aca:	bf 01       	movw	r22, r30
 acc:	a5 01       	movw	r20, r10
 ace:	94 01       	movw	r18, r8
 ad0:	0e 94 03 06 	call	0xc06	; 0xc06 <__udivmodsi4>
 ad4:	f9 01       	movw	r30, r18
 ad6:	ca 01       	movw	r24, r20
 ad8:	01 50       	subi	r16, 0x01	; 1
 ada:	11 09       	sbc	r17, r1
 adc:	6a 30       	cpi	r22, 0x0A	; 10
 ade:	10 f4       	brcc	.+4      	; 0xae4 <_ZN5Print11printNumberEmh+0x5a>
 ae0:	60 5d       	subi	r22, 0xD0	; 208
 ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_ZN5Print11printNumberEmh+0x5c>
 ae4:	69 5c       	subi	r22, 0xC9	; 201
 ae6:	d8 01       	movw	r26, r16
 ae8:	6c 93       	st	X, r22
 aea:	23 2b       	or	r18, r19
 aec:	24 2b       	or	r18, r20
 aee:	25 2b       	or	r18, r21
 af0:	61 f7       	brne	.-40     	; 0xaca <_ZN5Print11printNumberEmh+0x40>
 af2:	b8 01       	movw	r22, r16
 af4:	c7 01       	movw	r24, r14
 af6:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN5Print5writeEPKc>
 afa:	a1 96       	adiw	r28, 0x21	; 33
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	ff 90       	pop	r15
 b10:	ef 90       	pop	r14
 b12:	bf 90       	pop	r11
 b14:	af 90       	pop	r10
 b16:	9f 90       	pop	r9
 b18:	8f 90       	pop	r8
 b1a:	08 95       	ret

00000b1c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 b1c:	cf 92       	push	r12
 b1e:	df 92       	push	r13
 b20:	ef 92       	push	r14
 b22:	ff 92       	push	r15
 b24:	0f 93       	push	r16
 b26:	1f 93       	push	r17
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
  if (base == 0) {
 b2c:	21 15       	cp	r18, r1
 b2e:	31 05       	cpc	r19, r1
 b30:	81 f4       	brne	.+32     	; 0xb52 <_ZN5Print5printEli+0x36>
    return write(n);
 b32:	dc 01       	movw	r26, r24
 b34:	ed 91       	ld	r30, X+
 b36:	fc 91       	ld	r31, X
 b38:	01 90       	ld	r0, Z+
 b3a:	f0 81       	ld	r31, Z
 b3c:	e0 2d       	mov	r30, r0
 b3e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	1f 91       	pop	r17
 b46:	0f 91       	pop	r16
 b48:	ff 90       	pop	r15
 b4a:	ef 90       	pop	r14
 b4c:	df 90       	pop	r13
 b4e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 b50:	09 94       	ijmp
  } else if (base == 10) {
 b52:	2a 30       	cpi	r18, 0x0A	; 10
 b54:	31 05       	cpc	r19, r1
 b56:	01 f5       	brne	.+64     	; 0xb98 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 b58:	77 ff       	sbrs	r23, 7
 b5a:	1d c0       	rjmp	.+58     	; 0xb96 <_ZN5Print5printEli+0x7a>
 b5c:	6a 01       	movw	r12, r20
 b5e:	7b 01       	movw	r14, r22
 b60:	ec 01       	movw	r28, r24
      int t = print('-');
 b62:	6d e2       	ldi	r22, 0x2D	; 45
 b64:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Print5printEc>
 b68:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 b6a:	44 27       	eor	r20, r20
 b6c:	55 27       	eor	r21, r21
 b6e:	ba 01       	movw	r22, r20
 b70:	4c 19       	sub	r20, r12
 b72:	5d 09       	sbc	r21, r13
 b74:	6e 09       	sbc	r22, r14
 b76:	7f 09       	sbc	r23, r15
 b78:	2a e0       	ldi	r18, 0x0A	; 10
 b7a:	ce 01       	movw	r24, r28
 b7c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>
 b80:	80 0f       	add	r24, r16
 b82:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	0f 91       	pop	r16
 b8c:	ff 90       	pop	r15
 b8e:	ef 90       	pop	r14
 b90:	df 90       	pop	r13
 b92:	cf 90       	pop	r12
 b94:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 b96:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	1f 91       	pop	r17
 b9e:	0f 91       	pop	r16
 ba0:	ff 90       	pop	r15
 ba2:	ef 90       	pop	r14
 ba4:	df 90       	pop	r13
 ba6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 ba8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>

00000bac <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 bac:	9a 01       	movw	r18, r20
  return print((long) n, base);
 bae:	ab 01       	movw	r20, r22
 bb0:	77 0f       	add	r23, r23
 bb2:	66 0b       	sbc	r22, r22
 bb4:	77 0b       	sbc	r23, r23
 bb6:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_ZN5Print5printEli>

00000bba <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 bc4:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN5Print5printEii>
 bc8:	8c 01       	movw	r16, r24
  n += println();
 bca:	ce 01       	movw	r24, r28
 bcc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN5Print7printlnEv>
  return n;
}
 bd0:	80 0f       	add	r24, r16
 bd2:	91 1f       	adc	r25, r17
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	1f 91       	pop	r17
 bda:	0f 91       	pop	r16
 bdc:	08 95       	ret

00000bde <__divmodhi4>:
 bde:	97 fb       	bst	r25, 7
 be0:	07 2e       	mov	r0, r23
 be2:	16 f4       	brtc	.+4      	; 0xbe8 <__divmodhi4+0xa>
 be4:	00 94       	com	r0
 be6:	07 d0       	rcall	.+14     	; 0xbf6 <__divmodhi4_neg1>
 be8:	77 fd       	sbrc	r23, 7
 bea:	09 d0       	rcall	.+18     	; 0xbfe <__divmodhi4_neg2>
 bec:	0e 94 25 06 	call	0xc4a	; 0xc4a <__udivmodhi4>
 bf0:	07 fc       	sbrc	r0, 7
 bf2:	05 d0       	rcall	.+10     	; 0xbfe <__divmodhi4_neg2>
 bf4:	3e f4       	brtc	.+14     	; 0xc04 <__divmodhi4_exit>

00000bf6 <__divmodhi4_neg1>:
 bf6:	90 95       	com	r25
 bf8:	81 95       	neg	r24
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	08 95       	ret

00000bfe <__divmodhi4_neg2>:
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255

00000c04 <__divmodhi4_exit>:
 c04:	08 95       	ret

00000c06 <__udivmodsi4>:
 c06:	a1 e2       	ldi	r26, 0x21	; 33
 c08:	1a 2e       	mov	r1, r26
 c0a:	aa 1b       	sub	r26, r26
 c0c:	bb 1b       	sub	r27, r27
 c0e:	fd 01       	movw	r30, r26
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <__udivmodsi4_ep>

00000c12 <__udivmodsi4_loop>:
 c12:	aa 1f       	adc	r26, r26
 c14:	bb 1f       	adc	r27, r27
 c16:	ee 1f       	adc	r30, r30
 c18:	ff 1f       	adc	r31, r31
 c1a:	a2 17       	cp	r26, r18
 c1c:	b3 07       	cpc	r27, r19
 c1e:	e4 07       	cpc	r30, r20
 c20:	f5 07       	cpc	r31, r21
 c22:	20 f0       	brcs	.+8      	; 0xc2c <__udivmodsi4_ep>
 c24:	a2 1b       	sub	r26, r18
 c26:	b3 0b       	sbc	r27, r19
 c28:	e4 0b       	sbc	r30, r20
 c2a:	f5 0b       	sbc	r31, r21

00000c2c <__udivmodsi4_ep>:
 c2c:	66 1f       	adc	r22, r22
 c2e:	77 1f       	adc	r23, r23
 c30:	88 1f       	adc	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	1a 94       	dec	r1
 c36:	69 f7       	brne	.-38     	; 0xc12 <__udivmodsi4_loop>
 c38:	60 95       	com	r22
 c3a:	70 95       	com	r23
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	9b 01       	movw	r18, r22
 c42:	ac 01       	movw	r20, r24
 c44:	bd 01       	movw	r22, r26
 c46:	cf 01       	movw	r24, r30
 c48:	08 95       	ret

00000c4a <__udivmodhi4>:
 c4a:	aa 1b       	sub	r26, r26
 c4c:	bb 1b       	sub	r27, r27
 c4e:	51 e1       	ldi	r21, 0x11	; 17
 c50:	07 c0       	rjmp	.+14     	; 0xc60 <__udivmodhi4_ep>

00000c52 <__udivmodhi4_loop>:
 c52:	aa 1f       	adc	r26, r26
 c54:	bb 1f       	adc	r27, r27
 c56:	a6 17       	cp	r26, r22
 c58:	b7 07       	cpc	r27, r23
 c5a:	10 f0       	brcs	.+4      	; 0xc60 <__udivmodhi4_ep>
 c5c:	a6 1b       	sub	r26, r22
 c5e:	b7 0b       	sbc	r27, r23

00000c60 <__udivmodhi4_ep>:
 c60:	88 1f       	adc	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	5a 95       	dec	r21
 c66:	a9 f7       	brne	.-22     	; 0xc52 <__udivmodhi4_loop>
 c68:	80 95       	com	r24
 c6a:	90 95       	com	r25
 c6c:	bc 01       	movw	r22, r24
 c6e:	cd 01       	movw	r24, r26
 c70:	08 95       	ret

00000c72 <__tablejump2__>:
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	05 90       	lpm	r0, Z+
 c78:	f4 91       	lpm	r31, Z
 c7a:	e0 2d       	mov	r30, r0
 c7c:	09 94       	ijmp

00000c7e <malloc>:
 c7e:	0f 93       	push	r16
 c80:	1f 93       	push	r17
 c82:	cf 93       	push	r28
 c84:	df 93       	push	r29
 c86:	82 30       	cpi	r24, 0x02	; 2
 c88:	91 05       	cpc	r25, r1
 c8a:	10 f4       	brcc	.+4      	; 0xc90 <malloc+0x12>
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__flp>
 c94:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__flp+0x1>
 c98:	20 e0       	ldi	r18, 0x00	; 0
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	a0 e0       	ldi	r26, 0x00	; 0
 c9e:	b0 e0       	ldi	r27, 0x00	; 0
 ca0:	30 97       	sbiw	r30, 0x00	; 0
 ca2:	19 f1       	breq	.+70     	; 0xcea <malloc+0x6c>
 ca4:	40 81       	ld	r20, Z
 ca6:	51 81       	ldd	r21, Z+1	; 0x01
 ca8:	02 81       	ldd	r16, Z+2	; 0x02
 caa:	13 81       	ldd	r17, Z+3	; 0x03
 cac:	48 17       	cp	r20, r24
 cae:	59 07       	cpc	r21, r25
 cb0:	c8 f0       	brcs	.+50     	; 0xce4 <malloc+0x66>
 cb2:	84 17       	cp	r24, r20
 cb4:	95 07       	cpc	r25, r21
 cb6:	69 f4       	brne	.+26     	; 0xcd2 <malloc+0x54>
 cb8:	10 97       	sbiw	r26, 0x00	; 0
 cba:	31 f0       	breq	.+12     	; 0xcc8 <malloc+0x4a>
 cbc:	12 96       	adiw	r26, 0x02	; 2
 cbe:	0c 93       	st	X, r16
 cc0:	12 97       	sbiw	r26, 0x02	; 2
 cc2:	13 96       	adiw	r26, 0x03	; 3
 cc4:	1c 93       	st	X, r17
 cc6:	27 c0       	rjmp	.+78     	; 0xd16 <malloc+0x98>
 cc8:	00 93 0a 02 	sts	0x020A, r16	; 0x80020a <__flp>
 ccc:	10 93 0b 02 	sts	0x020B, r17	; 0x80020b <__flp+0x1>
 cd0:	22 c0       	rjmp	.+68     	; 0xd16 <malloc+0x98>
 cd2:	21 15       	cp	r18, r1
 cd4:	31 05       	cpc	r19, r1
 cd6:	19 f0       	breq	.+6      	; 0xcde <malloc+0x60>
 cd8:	42 17       	cp	r20, r18
 cda:	53 07       	cpc	r21, r19
 cdc:	18 f4       	brcc	.+6      	; 0xce4 <malloc+0x66>
 cde:	9a 01       	movw	r18, r20
 ce0:	bd 01       	movw	r22, r26
 ce2:	ef 01       	movw	r28, r30
 ce4:	df 01       	movw	r26, r30
 ce6:	f8 01       	movw	r30, r16
 ce8:	db cf       	rjmp	.-74     	; 0xca0 <malloc+0x22>
 cea:	21 15       	cp	r18, r1
 cec:	31 05       	cpc	r19, r1
 cee:	f9 f0       	breq	.+62     	; 0xd2e <malloc+0xb0>
 cf0:	28 1b       	sub	r18, r24
 cf2:	39 0b       	sbc	r19, r25
 cf4:	24 30       	cpi	r18, 0x04	; 4
 cf6:	31 05       	cpc	r19, r1
 cf8:	80 f4       	brcc	.+32     	; 0xd1a <malloc+0x9c>
 cfa:	8a 81       	ldd	r24, Y+2	; 0x02
 cfc:	9b 81       	ldd	r25, Y+3	; 0x03
 cfe:	61 15       	cp	r22, r1
 d00:	71 05       	cpc	r23, r1
 d02:	21 f0       	breq	.+8      	; 0xd0c <malloc+0x8e>
 d04:	fb 01       	movw	r30, r22
 d06:	93 83       	std	Z+3, r25	; 0x03
 d08:	82 83       	std	Z+2, r24	; 0x02
 d0a:	04 c0       	rjmp	.+8      	; 0xd14 <malloc+0x96>
 d0c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__flp+0x1>
 d10:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__flp>
 d14:	fe 01       	movw	r30, r28
 d16:	32 96       	adiw	r30, 0x02	; 2
 d18:	44 c0       	rjmp	.+136    	; 0xda2 <malloc+0x124>
 d1a:	fe 01       	movw	r30, r28
 d1c:	e2 0f       	add	r30, r18
 d1e:	f3 1f       	adc	r31, r19
 d20:	81 93       	st	Z+, r24
 d22:	91 93       	st	Z+, r25
 d24:	22 50       	subi	r18, 0x02	; 2
 d26:	31 09       	sbc	r19, r1
 d28:	39 83       	std	Y+1, r19	; 0x01
 d2a:	28 83       	st	Y, r18
 d2c:	3a c0       	rjmp	.+116    	; 0xda2 <malloc+0x124>
 d2e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
 d32:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
 d36:	23 2b       	or	r18, r19
 d38:	41 f4       	brne	.+16     	; 0xd4a <malloc+0xcc>
 d3a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d3e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d42:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <__brkval+0x1>
 d46:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <__brkval>
 d4a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 d4e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 d52:	21 15       	cp	r18, r1
 d54:	31 05       	cpc	r19, r1
 d56:	41 f4       	brne	.+16     	; 0xd68 <malloc+0xea>
 d58:	2d b7       	in	r18, 0x3d	; 61
 d5a:	3e b7       	in	r19, 0x3e	; 62
 d5c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d60:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d64:	24 1b       	sub	r18, r20
 d66:	35 0b       	sbc	r19, r21
 d68:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__brkval>
 d6c:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__brkval+0x1>
 d70:	e2 17       	cp	r30, r18
 d72:	f3 07       	cpc	r31, r19
 d74:	a0 f4       	brcc	.+40     	; 0xd9e <malloc+0x120>
 d76:	2e 1b       	sub	r18, r30
 d78:	3f 0b       	sbc	r19, r31
 d7a:	28 17       	cp	r18, r24
 d7c:	39 07       	cpc	r19, r25
 d7e:	78 f0       	brcs	.+30     	; 0xd9e <malloc+0x120>
 d80:	ac 01       	movw	r20, r24
 d82:	4e 5f       	subi	r20, 0xFE	; 254
 d84:	5f 4f       	sbci	r21, 0xFF	; 255
 d86:	24 17       	cp	r18, r20
 d88:	35 07       	cpc	r19, r21
 d8a:	48 f0       	brcs	.+18     	; 0xd9e <malloc+0x120>
 d8c:	4e 0f       	add	r20, r30
 d8e:	5f 1f       	adc	r21, r31
 d90:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <__brkval+0x1>
 d94:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <__brkval>
 d98:	81 93       	st	Z+, r24
 d9a:	91 93       	st	Z+, r25
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <malloc+0x124>
 d9e:	e0 e0       	ldi	r30, 0x00	; 0
 da0:	f0 e0       	ldi	r31, 0x00	; 0
 da2:	cf 01       	movw	r24, r30
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	1f 91       	pop	r17
 daa:	0f 91       	pop	r16
 dac:	08 95       	ret

00000dae <free>:
 dae:	cf 93       	push	r28
 db0:	df 93       	push	r29
 db2:	00 97       	sbiw	r24, 0x00	; 0
 db4:	09 f4       	brne	.+2      	; 0xdb8 <free+0xa>
 db6:	81 c0       	rjmp	.+258    	; 0xeba <free+0x10c>
 db8:	fc 01       	movw	r30, r24
 dba:	32 97       	sbiw	r30, 0x02	; 2
 dbc:	13 82       	std	Z+3, r1	; 0x03
 dbe:	12 82       	std	Z+2, r1	; 0x02
 dc0:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <__flp>
 dc4:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <__flp+0x1>
 dc8:	10 97       	sbiw	r26, 0x00	; 0
 dca:	81 f4       	brne	.+32     	; 0xdec <free+0x3e>
 dcc:	20 81       	ld	r18, Z
 dce:	31 81       	ldd	r19, Z+1	; 0x01
 dd0:	82 0f       	add	r24, r18
 dd2:	93 1f       	adc	r25, r19
 dd4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
 dd8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
 ddc:	28 17       	cp	r18, r24
 dde:	39 07       	cpc	r19, r25
 de0:	51 f5       	brne	.+84     	; 0xe36 <free+0x88>
 de2:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__brkval+0x1>
 de6:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__brkval>
 dea:	67 c0       	rjmp	.+206    	; 0xeba <free+0x10c>
 dec:	ed 01       	movw	r28, r26
 dee:	20 e0       	ldi	r18, 0x00	; 0
 df0:	30 e0       	ldi	r19, 0x00	; 0
 df2:	ce 17       	cp	r28, r30
 df4:	df 07       	cpc	r29, r31
 df6:	40 f4       	brcc	.+16     	; 0xe08 <free+0x5a>
 df8:	4a 81       	ldd	r20, Y+2	; 0x02
 dfa:	5b 81       	ldd	r21, Y+3	; 0x03
 dfc:	9e 01       	movw	r18, r28
 dfe:	41 15       	cp	r20, r1
 e00:	51 05       	cpc	r21, r1
 e02:	f1 f0       	breq	.+60     	; 0xe40 <free+0x92>
 e04:	ea 01       	movw	r28, r20
 e06:	f5 cf       	rjmp	.-22     	; 0xdf2 <free+0x44>
 e08:	d3 83       	std	Z+3, r29	; 0x03
 e0a:	c2 83       	std	Z+2, r28	; 0x02
 e0c:	40 81       	ld	r20, Z
 e0e:	51 81       	ldd	r21, Z+1	; 0x01
 e10:	84 0f       	add	r24, r20
 e12:	95 1f       	adc	r25, r21
 e14:	c8 17       	cp	r28, r24
 e16:	d9 07       	cpc	r29, r25
 e18:	59 f4       	brne	.+22     	; 0xe30 <free+0x82>
 e1a:	88 81       	ld	r24, Y
 e1c:	99 81       	ldd	r25, Y+1	; 0x01
 e1e:	84 0f       	add	r24, r20
 e20:	95 1f       	adc	r25, r21
 e22:	02 96       	adiw	r24, 0x02	; 2
 e24:	91 83       	std	Z+1, r25	; 0x01
 e26:	80 83       	st	Z, r24
 e28:	8a 81       	ldd	r24, Y+2	; 0x02
 e2a:	9b 81       	ldd	r25, Y+3	; 0x03
 e2c:	93 83       	std	Z+3, r25	; 0x03
 e2e:	82 83       	std	Z+2, r24	; 0x02
 e30:	21 15       	cp	r18, r1
 e32:	31 05       	cpc	r19, r1
 e34:	29 f4       	brne	.+10     	; 0xe40 <free+0x92>
 e36:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__flp+0x1>
 e3a:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__flp>
 e3e:	3d c0       	rjmp	.+122    	; 0xeba <free+0x10c>
 e40:	e9 01       	movw	r28, r18
 e42:	fb 83       	std	Y+3, r31	; 0x03
 e44:	ea 83       	std	Y+2, r30	; 0x02
 e46:	49 91       	ld	r20, Y+
 e48:	59 91       	ld	r21, Y+
 e4a:	c4 0f       	add	r28, r20
 e4c:	d5 1f       	adc	r29, r21
 e4e:	ec 17       	cp	r30, r28
 e50:	fd 07       	cpc	r31, r29
 e52:	61 f4       	brne	.+24     	; 0xe6c <free+0xbe>
 e54:	80 81       	ld	r24, Z
 e56:	91 81       	ldd	r25, Z+1	; 0x01
 e58:	84 0f       	add	r24, r20
 e5a:	95 1f       	adc	r25, r21
 e5c:	02 96       	adiw	r24, 0x02	; 2
 e5e:	e9 01       	movw	r28, r18
 e60:	99 83       	std	Y+1, r25	; 0x01
 e62:	88 83       	st	Y, r24
 e64:	82 81       	ldd	r24, Z+2	; 0x02
 e66:	93 81       	ldd	r25, Z+3	; 0x03
 e68:	9b 83       	std	Y+3, r25	; 0x03
 e6a:	8a 83       	std	Y+2, r24	; 0x02
 e6c:	e0 e0       	ldi	r30, 0x00	; 0
 e6e:	f0 e0       	ldi	r31, 0x00	; 0
 e70:	12 96       	adiw	r26, 0x02	; 2
 e72:	8d 91       	ld	r24, X+
 e74:	9c 91       	ld	r25, X
 e76:	13 97       	sbiw	r26, 0x03	; 3
 e78:	00 97       	sbiw	r24, 0x00	; 0
 e7a:	19 f0       	breq	.+6      	; 0xe82 <free+0xd4>
 e7c:	fd 01       	movw	r30, r26
 e7e:	dc 01       	movw	r26, r24
 e80:	f7 cf       	rjmp	.-18     	; 0xe70 <free+0xc2>
 e82:	8d 91       	ld	r24, X+
 e84:	9c 91       	ld	r25, X
 e86:	11 97       	sbiw	r26, 0x01	; 1
 e88:	9d 01       	movw	r18, r26
 e8a:	2e 5f       	subi	r18, 0xFE	; 254
 e8c:	3f 4f       	sbci	r19, 0xFF	; 255
 e8e:	82 0f       	add	r24, r18
 e90:	93 1f       	adc	r25, r19
 e92:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
 e96:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
 e9a:	28 17       	cp	r18, r24
 e9c:	39 07       	cpc	r19, r25
 e9e:	69 f4       	brne	.+26     	; 0xeba <free+0x10c>
 ea0:	30 97       	sbiw	r30, 0x00	; 0
 ea2:	29 f4       	brne	.+10     	; 0xeae <free+0x100>
 ea4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__flp+0x1>
 ea8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__flp>
 eac:	02 c0       	rjmp	.+4      	; 0xeb2 <free+0x104>
 eae:	13 82       	std	Z+3, r1	; 0x03
 eb0:	12 82       	std	Z+2, r1	; 0x02
 eb2:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__brkval+0x1>
 eb6:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__brkval>
 eba:	df 91       	pop	r29
 ebc:	cf 91       	pop	r28
 ebe:	08 95       	ret

00000ec0 <_exit>:
 ec0:	f8 94       	cli

00000ec2 <__stop_program>:
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__stop_program>
