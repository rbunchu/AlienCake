
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001570  00001604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800120  00800120  00001624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fc10  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029d3  00000000  00000000  000118ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003124  00000000  00000000  0001427f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000edc  00000000  00000000  000173a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033dd  00000000  00000000  00018280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053db  00000000  00000000  0001b65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00020a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__dtors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_3>
      10:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_3>
      14:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_3>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	63 07       	cpc	r22, r19
      6a:	6a 07       	cpc	r22, r26
      6c:	78 07       	cpc	r23, r24
      6e:	57 07       	cpc	r21, r23
      70:	78 07       	cpc	r23, r24
      72:	5c 07       	cpc	r21, r28
      74:	71 07       	cpc	r23, r17
      76:	8a 07       	cpc	r24, r26
      78:	78 07       	cpc	r23, r24
      7a:	78 07       	cpc	r23, r24
      7c:	78 07       	cpc	r23, r24
      7e:	78 07       	cpc	r23, r24
      80:	78 07       	cpc	r23, r24
      82:	78 07       	cpc	r23, r24
      84:	78 07       	cpc	r23, r24
      86:	78 07       	cpc	r23, r24
      88:	7c 07       	cpc	r23, r28
      8a:	78 07       	cpc	r23, r24
      8c:	78 07       	cpc	r23, r24
      8e:	78 07       	cpc	r23, r24
      90:	78 07       	cpc	r23, r24
      92:	78 07       	cpc	r23, r24

00000094 <__trampolines_end>:
      94:	00 00       	nop
      96:	00 08       	sbc	r0, r0
      98:	00 02       	muls	r16, r16
      9a:	01 00       	.word	0x0001	; ????
      9c:	00 03       	mulsu	r16, r16
      9e:	04 07       	cpc	r16, r20
	...

000000a8 <digital_pin_to_bit_mask_PGM>:
      a8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b8:	04 08 10 20                                         ... 

000000bc <digital_pin_to_port_PGM>:
      bc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      cc:	03 03 03 03                                         ....

000000d0 <port_to_input_PGM>:
      d0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000da <port_to_output_PGM>:
      da:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e4 <port_to_mode_PGM>:
      e4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ee <__ctors_start>:
      ee:	0a 01       	movw	r0, r20

000000f0 <__ctors_end>:
      f0:	36 01       	movw	r6, r12

000000f2 <__dtors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d8 e0       	ldi	r29, 0x08	; 8
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
      fe:	11 e0       	ldi	r17, 0x01	; 1
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	e0 e7       	ldi	r30, 0x70	; 112
     106:	f5 e1       	ldi	r31, 0x15	; 21
     108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
     10a:	05 90       	lpm	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	a0 32       	cpi	r26, 0x20	; 32
     110:	b1 07       	cpc	r27, r17
     112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	a0 e2       	ldi	r26, 0x20	; 32
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	a2 38       	cpi	r26, 0x82	; 130
     120:	b2 07       	cpc	r27, r18
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>

00000124 <__do_global_ctors>:
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	c8 e7       	ldi	r28, 0x78	; 120
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_global_ctors+0x10>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	fe 01       	movw	r30, r28
     130:	0e 94 56 09 	call	0x12ac	; 0x12ac <__tablejump2__>
     134:	c7 37       	cpi	r28, 0x77	; 119
     136:	d1 07       	cpc	r29, r17
     138:	c9 f7       	brne	.-14     	; 0x12c <__do_global_ctors+0x8>
     13a:	0e 94 96 02 	call	0x52c	; 0x52c <main>
     13e:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__do_global_dtors>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <setup>:
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
Mp3Player *mp3;
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
ReedSwitch reedSwitch(PIN_D12);

void setup() {
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);
     14a:	8c e2       	ldi	r24, 0x2C	; 44
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 a5 02 	call	0x54a	; 0x54a <_Znwj>
     152:	ec 01       	movw	r28, r24
     154:	4b e0       	ldi	r20, 0x0B	; 11
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	6a e0       	ldi	r22, 0x0A	; 10
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	0e 94 39 02 	call	0x472	; 0x472 <_ZN9Mp3PlayerC1Eii>
     160:	d0 93 2a 01 	sts	0x012A, r29	; 0x80012a <mp3+0x1>
     164:	c0 93 29 01 	sts	0x0129, r28	; 0x800129 <mp3>
	delay(1000); //Wait 1 second to mp3 player init itself
     168:	68 ee       	ldi	r22, 0xE8	; 232
     16a:	73 e0       	ldi	r23, 0x03	; 3
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 22 03 	call	0x644	; 0x644 <delay>

	led.TurnOff();
     174:	8f e2       	ldi	r24, 0x2F	; 47
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN10LedBlinker7TurnOffEv>
	pinMode(PIN_D12, INPUT_PULLUP);
     17c:	62 e0       	ldi	r22, 0x02	; 2
     17e:	8c e0       	ldi	r24, 0x0C	; 12
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);
	delay(1000); //Wait 1 second to mp3 player init itself

	led.TurnOff();
	pinMode(PIN_D12, INPUT_PULLUP);
     184:	0c 94 2c 04 	jmp	0x858	; 0x858 <pinMode>

00000188 <loop>:
void loop() {
	#ifdef DEBUG
		Serial.println("Distance detector on");
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
     188:	8b e2       	ldi	r24, 0x2B	; 43
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN12LengthSensor7MeasureEv>
	
	#ifdef DEBUG
		Serial.println(distance);
	#endif
		 
	if(distance > 0 && distance < 50)
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	c1 97       	sbiw	r24, 0x31	; 49
     194:	d8 f5       	brcc	.+118    	; 0x20c <loop+0x84>
	{
		led.TurnOn();
     196:	8f e2       	ldi	r24, 0x2F	; 47
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	0e 94 42 01 	call	0x284	; 0x284 <_ZN10LedBlinker6TurnOnEv>
		driver.Start(DriverCanalType::CANAL_1, 250);
     19e:	4a ef       	ldi	r20, 0xFA	; 250
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	82 e2       	ldi	r24, 0x22	; 34
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN11MotorDriver5StartE15DriverCanalTypei>
		delay(3000);
     1ac:	68 eb       	ldi	r22, 0xB8	; 184
     1ae:	7b e0       	ldi	r23, 0x0B	; 11
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 22 03 	call	0x644	; 0x644 <delay>
		driver.Stop(DriverCanalType::CANAL_1);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	82 e2       	ldi	r24, 0x22	; 34
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN11MotorDriver4StopE15DriverCanalType>
		driver.ChangeDirection(DriverCanalType::CANAL_1, COUNTER_CLOCKWISE);
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	82 e2       	ldi	r24, 0x22	; 34
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection>
		driver.Start(DriverCanalType::CANAL_1, 250);
     1ce:	4a ef       	ldi	r20, 0xFA	; 250
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	82 e2       	ldi	r24, 0x22	; 34
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN11MotorDriver5StartE15DriverCanalTypei>
		while(reedSwitch.Check() != LOW)
     1dc:	80 e2       	ldi	r24, 0x20	; 32
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 91 02 	call	0x522	; 0x522 <_ZN10ReedSwitch5CheckEv>
     1e4:	89 2b       	or	r24, r25
     1e6:	39 f0       	breq	.+14     	; 0x1f6 <loop+0x6e>
		{
			//Run motor until switch is connected
			delay(10);
     1e8:	6a e0       	ldi	r22, 0x0A	; 10
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 22 03 	call	0x644	; 0x644 <delay>
		driver.Start(DriverCanalType::CANAL_1, 250);
		delay(3000);
		driver.Stop(DriverCanalType::CANAL_1);
		driver.ChangeDirection(DriverCanalType::CANAL_1, COUNTER_CLOCKWISE);
		driver.Start(DriverCanalType::CANAL_1, 250);
		while(reedSwitch.Check() != LOW)
     1f4:	f3 cf       	rjmp	.-26     	; 0x1dc <loop+0x54>
		{
			//Run motor until switch is connected
			delay(10);
		}
		driver.Stop(DriverCanalType::CANAL_1);
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	82 e2       	ldi	r24, 0x22	; 34
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN11MotorDriver4StopE15DriverCanalType>
		//mp3->Play();
		delay(2000);
     200:	60 ed       	ldi	r22, 0xD0	; 208
     202:	77 e0       	ldi	r23, 0x07	; 7
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 22 03 	call	0x644	; 0x644 <delay>
	}
	
	led.TurnOff();
     20c:	8f e2       	ldi	r24, 0x2F	; 47
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0c 94 47 01 	jmp	0x28e	; 0x28e <_ZN10LedBlinker7TurnOffEv>

00000214 <_GLOBAL__sub_I_led>:
}
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
//Contracton
#define PIN_D12 12

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     218:	64 e0       	ldi	r22, 0x04	; 4
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	8f e2       	ldi	r24, 0x2F	; 47
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
     224:	46 e0       	ldi	r20, 0x06	; 6
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	67 e0       	ldi	r22, 0x07	; 7
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	8b e2       	ldi	r24, 0x2B	; 43
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN12LengthSensorC1Eii>
Mp3Player *mp3;
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 a5 02 	call	0x54a	; 0x54a <_Znwj>
     23c:	ec 01       	movw	r28, r24
     23e:	25 e0       	ldi	r18, 0x05	; 5
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	48 e0       	ldi	r20, 0x08	; 8
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	69 e0       	ldi	r22, 0x09	; 9
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN18MotorDriverCConfigC1Eiii>
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	be 01       	movw	r22, r28
     254:	82 e2       	ldi	r24, 0x22	; 34
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_>
ReedSwitch reedSwitch(PIN_D12);
     25c:	6c e0       	ldi	r22, 0x0C	; 12
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 e2       	ldi	r24, 0x20	; 32
     262:	91 e0       	ldi	r25, 0x01	; 1
		//mp3->Play();
		delay(2000);
	}
	
	led.TurnOff();
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
Mp3Player *mp3;
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
ReedSwitch reedSwitch(PIN_D12);
     268:	0c 94 8a 02 	jmp	0x514	; 0x514 <_ZN10ReedSwitchC1Ei>

0000026c <_GLOBAL__sub_D_led>:
//Contracton
#define PIN_D12 12

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     26c:	8f e2       	ldi	r24, 0x2F	; 47
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0c 94 41 01 	jmp	0x282	; 0x282 <_ZN10LedBlinkerD1Ev>

00000274 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
     274:	fc 01       	movw	r30, r24
     276:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
     278:	60 83       	st	Z, r22
     27a:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	0c 94 2c 04 	jmp	0x858	; 0x858 <pinMode>

00000282 <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
     282:	08 95       	ret

00000284 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	fc 01       	movw	r30, r24
     288:	80 81       	ld	r24, Z
     28a:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>

0000028e <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	fc 01       	movw	r30, r24
     292:	80 81       	ld	r24, Z
     294:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>

00000298 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
     2a0:	68 83       	st	Y, r22
     2a2:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
     2a4:	5b 83       	std	Y+3, r21	; 0x03
     2a6:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
	pinMode(m_trigPin, OUTPUT);
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
     2b6:	0c 94 2c 04 	jmp	0x858	; 0x858 <pinMode>

000002ba <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
	delayMicroseconds(10);
     2c8:	8a e0       	ldi	r24, 0x0A	; 10
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <delayMicroseconds>
	digitalWrite(m_trigPin, LOW);
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(m_trigPin, LOW);
     2d8:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>

000002dc <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ec 01       	movw	r28, r24
	  Ping();
     2ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     2ee:	88 81       	ld	r24, Y
     2f0:	0e 94 97 04 	call	0x92e	; 0x92e <digitalRead>
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	29 f0       	breq	.+10     	; 0x302 <_ZN12LengthSensor7MeasureEv+0x26>
	  {
		  delayMicroseconds(1);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <delayMicroseconds>
int LengthSensor::Measure()
{	
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     300:	f6 cf       	rjmp	.-20     	; 0x2ee <_ZN12LengthSensor7MeasureEv+0x12>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
     302:	0e 94 fd 02 	call	0x5fa	; 0x5fa <micros>
     306:	6b 01       	movw	r12, r22
     308:	7c 01       	movw	r14, r24
	  while(digitalRead(m_echoPin) != LOW) {
     30a:	88 81       	ld	r24, Y
     30c:	0e 94 97 04 	call	0x92e	; 0x92e <digitalRead>
     310:	89 2b       	or	r24, r25
     312:	29 f0       	breq	.+10     	; 0x31e <_ZN12LengthSensor7MeasureEv+0x42>
		  delayMicroseconds(1);
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 5e 03 	call	0x6bc	; 0x6bc <delayMicroseconds>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
	  while(digitalRead(m_echoPin) != LOW) {
     31c:	f6 cf       	rjmp	.-20     	; 0x30a <_ZN12LengthSensor7MeasureEv+0x2e>
		  delayMicroseconds(1);
	  }

	  time = micros() - time;
     31e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <micros>
	  #ifdef DEBUG
		Serial.println(time);
	  #endif			  
	  return (time * 34) / 2000;
     322:	9b 01       	movw	r18, r22
     324:	ac 01       	movw	r20, r24
     326:	2c 19       	sub	r18, r12
     328:	3d 09       	sbc	r19, r13
     32a:	4e 09       	sbc	r20, r14
     32c:	5f 09       	sbc	r21, r15
     32e:	a2 e2       	ldi	r26, 0x22	; 34
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__muluhisi3>
     336:	20 ed       	ldi	r18, 0xD0	; 208
     338:	37 e0       	ldi	r19, 0x07	; 7
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	0e 94 15 09 	call	0x122a	; 0x122a <__udivmodsi4>
}
     342:	c9 01       	movw	r24, r18
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	08 95       	ret

00000352 <_ZN18MotorDriverCConfigC1Eiii>:
	if(canal == NULL)
	{
		return;
	}

	analogWrite(canal->GetEnable(), actSpeed);
     352:	fc 01       	movw	r30, r24
     354:	75 83       	std	Z+5, r23	; 0x05
     356:	64 83       	std	Z+4, r22	; 0x04
     358:	51 83       	std	Z+1, r21	; 0x01
     35a:	40 83       	st	Z, r20
     35c:	33 83       	std	Z+3, r19	; 0x03
     35e:	22 83       	std	Z+2, r18	; 0x02
     360:	08 95       	ret

00000362 <_ZN11MotorDriver5StartE15DriverCanalTypei>:
     362:	dc 01       	movw	r26, r24
     364:	61 11       	cpse	r22, r1
     366:	03 c0       	rjmp	.+6      	; 0x36e <_ZN11MotorDriver5StartE15DriverCanalTypei+0xc>
     368:	ed 91       	ld	r30, X+
     36a:	fc 91       	ld	r31, X
     36c:	04 c0       	rjmp	.+8      	; 0x376 <_ZN11MotorDriver5StartE15DriverCanalTypei+0x14>
     36e:	12 96       	adiw	r26, 0x02	; 2
     370:	ed 91       	ld	r30, X+
     372:	fc 91       	ld	r31, X
     374:	13 97       	sbiw	r26, 0x03	; 3
     376:	30 97       	sbiw	r30, 0x00	; 0
     378:	21 f0       	breq	.+8      	; 0x382 <_ZN11MotorDriver5StartE15DriverCanalTypei+0x20>
     37a:	ba 01       	movw	r22, r20
     37c:	84 81       	ldd	r24, Z+4	; 0x04
     37e:	0c 94 a4 03 	jmp	0x748	; 0x748 <analogWrite>
     382:	08 95       	ret

00000384 <_ZN11MotorDriver4StopE15DriverCanalType>:
     384:	dc 01       	movw	r26, r24
     386:	61 11       	cpse	r22, r1
     388:	03 c0       	rjmp	.+6      	; 0x390 <_ZN11MotorDriver4StopE15DriverCanalType+0xc>
     38a:	ed 91       	ld	r30, X+
     38c:	fc 91       	ld	r31, X
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_ZN11MotorDriver4StopE15DriverCanalType+0x14>
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	ed 91       	ld	r30, X+
     394:	fc 91       	ld	r31, X
     396:	13 97       	sbiw	r26, 0x03	; 3
     398:	30 97       	sbiw	r30, 0x00	; 0
     39a:	29 f0       	breq	.+10     	; 0x3a6 <_ZN11MotorDriver4StopE15DriverCanalType+0x22>
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	84 81       	ldd	r24, Z+4	; 0x04
     3a2:	0c 94 a4 03 	jmp	0x748	; 0x748 <analogWrite>
     3a6:	08 95       	ret

000003a8 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection>:
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	fc 01       	movw	r30, r24
     3ae:	84 81       	ldd	r24, Z+4	; 0x04
     3b0:	84 17       	cp	r24, r20
     3b2:	e1 f0       	breq	.+56     	; 0x3ec <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x44>
     3b4:	44 83       	std	Z+4, r20	; 0x04
     3b6:	61 11       	cpse	r22, r1
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x18>
     3ba:	c0 81       	ld	r28, Z
     3bc:	d1 81       	ldd	r29, Z+1	; 0x01
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x1c>
     3c0:	c2 81       	ldd	r28, Z+2	; 0x02
     3c2:	d3 81       	ldd	r29, Z+3	; 0x03
     3c4:	20 97       	sbiw	r28, 0x00	; 0
     3c6:	91 f0       	breq	.+36     	; 0x3ec <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x44>
     3c8:	41 11       	cpse	r20, r1
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x30>
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	88 81       	ld	r24, Y
     3d0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x3a>
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	88 81       	ld	r24, Y
     3dc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>:
}

void MotorDriver::Initialize(MotorDriverCConfig *canal)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	eb 01       	movw	r28, r22
	pinMode(canal->GetEnable(), OUTPUT);
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	8c 81       	ldd	r24, Y+4	; 0x04
     3fc:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
	pinMode(canal->GetInput1(), OUTPUT);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	88 81       	ld	r24, Y
     404:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
	pinMode(canal->GetInput2(), OUTPUT);
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
	analogWrite(canal->GetEnable(), 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	0e 94 a4 03 	call	0x748	; 0x748 <analogWrite>
	digitalWrite(canal->GetInput1(), LOW);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	88 81       	ld	r24, Y
     41e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
	digitalWrite(canal->GetInput2(), HIGH);
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
	pinMode(canal->GetEnable(), OUTPUT);
	pinMode(canal->GetInput1(), OUTPUT);
	pinMode(canal->GetInput2(), OUTPUT);
	analogWrite(canal->GetEnable(), 0);
	digitalWrite(canal->GetInput1(), LOW);
	digitalWrite(canal->GetInput2(), HIGH);
     42a:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>

0000042e <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_>:
{
	m_enable = enable;
}


MotorDriver::MotorDriver(MotorDriverCConfig* canal1, MotorDriverCConfig* canal2)
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
: m_canal1(canal1), m_canal2(canal2)
     434:	79 83       	std	Y+1, r23	; 0x01
     436:	68 83       	st	Y, r22
     438:	5b 83       	std	Y+3, r21	; 0x03
     43a:	4a 83       	std	Y+2, r20	; 0x02
{
	m_motorDirection = MotorDirection::CLOCKWISE;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	8c 83       	std	Y+4, r24	; 0x04
	m_motorSpeed = 0;
     440:	1e 82       	std	Y+6, r1	; 0x06
     442:	1d 82       	std	Y+5, r1	; 0x05
	
	if(m_canal1 != NULL)
     444:	61 15       	cp	r22, r1
     446:	71 05       	cpc	r23, r1
     448:	19 f0       	breq	.+6      	; 0x450 <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_+0x22>
	{
		Initialize(m_canal1);
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>
	}

	if(m_canal2 != NULL)
     450:	6a 81       	ldd	r22, Y+2	; 0x02
     452:	7b 81       	ldd	r23, Y+3	; 0x03
     454:	61 15       	cp	r22, r1
     456:	71 05       	cpc	r23, r1
     458:	29 f0       	breq	.+10     	; 0x464 <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_+0x36>
	{
		Initialize(m_canal2);
     45a:	ce 01       	movw	r24, r28
	}	
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
		Initialize(m_canal1);
	}

	if(m_canal2 != NULL)
	{
		Initialize(m_canal2);
     460:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>
	}	
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <_ZN9Mp3Player9VolumeMaxEv>:
}

void Mp3Player::VolumeMax()
{
	//Sets max volume
	m_mp3Player.volume(30);
     46a:	6e e1       	ldi	r22, 0x1E	; 30
     46c:	06 96       	adiw	r24, 0x06	; 6
     46e:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_ZN19DFRobotDFPlayerMini6volumeEh>

00000472 <_ZN9Mp3PlayerC1Eii>:

#include <Arduino.h>
#include <Mp3Player.h>


Mp3Player::Mp3Player(int rxPin, int txPin)
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	ec 01       	movw	r28, r24
     480:	8c 01       	movw	r16, r24
     482:	0a 5f       	subi	r16, 0xFA	; 250
     484:	1f 4f       	sbci	r17, 0xFF	; 255
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
     486:	84 ef       	ldi	r24, 0xF4	; 244
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	8c 87       	std	Y+12, r24	; 0x0c
     490:	9d 87       	std	Y+13, r25	; 0x0d
     492:	ae 87       	std	Y+14, r26	; 0x0e
     494:	bf 87       	std	Y+15, r27	; 0x0f
     496:	8a e0       	ldi	r24, 0x0A	; 10
     498:	e6 e0       	ldi	r30, 0x06	; 6
     49a:	f1 e0       	ldi	r31, 0x01	; 1
     49c:	de 01       	movw	r26, r28
     49e:	5a 96       	adiw	r26, 0x1a	; 26
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <_ZN9Mp3PlayerC1Eii+0x2e>
     4a8:	1c a2       	std	Y+36, r1	; 0x24
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	8d a3       	std	Y+37, r24	; 0x25
     4ae:	1a a6       	std	Y+42, r1	; 0x2a
     4b0:	1b a6       	std	Y+43, r1	; 0x2b
{
	m_rxPin = rxPin;
     4b2:	79 83       	std	Y+1, r23	; 0x01
     4b4:	68 83       	st	Y, r22
	m_txPin = txPin;
     4b6:	5b 83       	std	Y+3, r21	; 0x03
     4b8:	4a 83       	std	Y+2, r20	; 0x02
	m_softwareSerial = new SoftwareSerial(m_rxPin, m_txPin);
     4ba:	8f e1       	ldi	r24, 0x1F	; 31
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 a5 02 	call	0x54a	; 0x54a <_Znwj>
     4c2:	7c 01       	movw	r14, r24
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	4a 81       	ldd	r20, Y+2	; 0x02
     4c8:	68 81       	ld	r22, Y
     4ca:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN14SoftwareSerialC1Ehhb>
     4ce:	fd 82       	std	Y+5, r15	; 0x05
     4d0:	ec 82       	std	Y+4, r14	; 0x04
	m_softwareSerial->begin(9600);
     4d2:	40 e8       	ldi	r20, 0x80	; 128
     4d4:	55 e2       	ldi	r21, 0x25	; 37
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	c7 01       	movw	r24, r14
     4dc:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN14SoftwareSerial5beginEl>
	if(!m_mp3Player.begin(*m_softwareSerial))
     4e0:	6c 81       	ldd	r22, Y+4	; 0x04
     4e2:	7d 81       	ldd	r23, Y+5	; 0x05
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	c8 01       	movw	r24, r16
     4e8:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
     4ec:	81 11       	cpse	r24, r1
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <_ZN9Mp3PlayerC1Eii+0x80>
     4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <_ZN9Mp3PlayerC1Eii+0x7e>
	}

	#ifdef DEBUG
		Serial.println("MP3 player is online");
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	c8 01       	movw	r24, r16
     4f6:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN19DFRobotDFPlayerMini2EQEh>
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	c8 01       	movw	r24, r16
     4fe:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>

	VolumeMax();
     502:	ce 01       	movw	r24, r28
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
		Serial.println("MP3 player is online");
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);

	VolumeMax();
     510:	0c 94 35 02 	jmp	0x46a	; 0x46a <_ZN9Mp3Player9VolumeMaxEv>

00000514 <_ZN10ReedSwitchC1Ei>:
 */ 

 #include <ReedSwitch.h>
 #include <Arduino.h>

 ReedSwitch::ReedSwitch(int reedPin)
     514:	fc 01       	movw	r30, r24
     516:	86 2f       	mov	r24, r22
 {
	m_reedPin = reedPin;
     518:	60 83       	st	Z, r22
     51a:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_reedPin, INPUT_PULLUP);
     51c:	62 e0       	ldi	r22, 0x02	; 2
     51e:	0c 94 2c 04 	jmp	0x858	; 0x858 <pinMode>

00000522 <_ZN10ReedSwitch5CheckEv>:
 {
	#ifdef DEBUG
		Serial.println("Checking if reed is connected");
	#endif

	int result = digitalRead(m_reedPin);
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	0c 94 97 04 	jmp	0x92e	; 0x92e <digitalRead>

0000052a <initVariant>:
     52a:	08 95       	ret

0000052c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     52c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <init>

	initVariant();
     530:	0e 94 95 02 	call	0x52a	; 0x52a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     534:	0e 94 a3 00 	call	0x146	; 0x146 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     53c:	0e 94 c4 00 	call	0x188	; 0x188 <loop>
		if (serialEventRun) serialEventRun();
     540:	20 97       	sbiw	r28, 0x00	; 0
     542:	e1 f3       	breq	.-8      	; 0x53c <main+0x10>
     544:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     548:	f9 cf       	rjmp	.-14     	; 0x53c <main+0x10>

0000054a <_Znwj>:
     54a:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <malloc>

0000054e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	af 93       	push	r26
     562:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     564:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timer0_millis>
     568:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timer0_millis+0x1>
     56c:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <timer0_millis+0x2>
     570:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     574:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     578:	23 e0       	ldi	r18, 0x03	; 3
     57a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     57c:	2d 37       	cpi	r18, 0x7D	; 125
     57e:	20 f4       	brcc	.+8      	; 0x588 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	a1 1d       	adc	r26, r1
     584:	b1 1d       	adc	r27, r1
     586:	05 c0       	rjmp	.+10     	; 0x592 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     588:	26 e8       	ldi	r18, 0x86	; 134
     58a:	23 0f       	add	r18, r19
		m += 1;
     58c:	02 96       	adiw	r24, 0x02	; 2
     58e:	a1 1d       	adc	r26, r1
     590:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     592:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <timer0_fract>
	timer0_millis = m;
     596:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timer0_millis>
     59a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timer0_millis+0x1>
     59e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timer0_millis+0x2>
     5a2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timer0_millis+0x3>
	timer0_overflow_count++;
     5a6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer0_overflow_count>
     5aa:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer0_overflow_count+0x1>
     5ae:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timer0_overflow_count+0x2>
     5b2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timer0_overflow_count+0x3>
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	a1 1d       	adc	r26, r1
     5ba:	b1 1d       	adc	r27, r1
     5bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timer0_overflow_count>
     5c0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timer0_overflow_count+0x1>
     5c4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timer0_overflow_count+0x2>
     5c8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timer0_overflow_count+0x3>
}
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     5e2:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     5e4:	f8 94       	cli
	m = timer0_millis;
     5e6:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <timer0_millis>
     5ea:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <timer0_millis+0x1>
     5ee:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timer0_millis+0x2>
     5f2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timer0_millis+0x3>
	SREG = oldSREG;
     5f6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     5f8:	08 95       	ret

000005fa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     5fa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     5fc:	f8 94       	cli
	m = timer0_overflow_count;
     5fe:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer0_overflow_count>
     602:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer0_overflow_count+0x1>
     606:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timer0_overflow_count+0x2>
     60a:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     60e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     610:	a8 9b       	sbis	0x15, 0	; 21
     612:	05 c0       	rjmp	.+10     	; 0x61e <micros+0x24>
     614:	2f 3f       	cpi	r18, 0xFF	; 255
     616:	19 f0       	breq	.+6      	; 0x61e <micros+0x24>
		m++;
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	a1 1d       	adc	r26, r1
     61c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     61e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     620:	ba 2f       	mov	r27, r26
     622:	a9 2f       	mov	r26, r25
     624:	98 2f       	mov	r25, r24
     626:	88 27       	eor	r24, r24
     628:	82 0f       	add	r24, r18
     62a:	91 1d       	adc	r25, r1
     62c:	a1 1d       	adc	r26, r1
     62e:	b1 1d       	adc	r27, r1
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	42 e0       	ldi	r20, 0x02	; 2
     636:	66 0f       	add	r22, r22
     638:	77 1f       	adc	r23, r23
     63a:	88 1f       	adc	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	4a 95       	dec	r20
     640:	d1 f7       	brne	.-12     	; 0x636 <micros+0x3c>
}
     642:	08 95       	ret

00000644 <delay>:

void delay(unsigned long ms)
{
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	6b 01       	movw	r12, r22
     656:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     658:	0e 94 fd 02 	call	0x5fa	; 0x5fa <micros>
     65c:	4b 01       	movw	r8, r22
     65e:	5c 01       	movw	r10, r24

	while (ms > 0) {
     660:	c1 14       	cp	r12, r1
     662:	d1 04       	cpc	r13, r1
     664:	e1 04       	cpc	r14, r1
     666:	f1 04       	cpc	r15, r1
     668:	01 f1       	breq	.+64     	; 0x6aa <delay+0x66>
		yield();
     66a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     66e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <micros>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	88 19       	sub	r24, r8
     678:	99 09       	sbc	r25, r9
     67a:	aa 09       	sbc	r26, r10
     67c:	bb 09       	sbc	r27, r11
     67e:	88 3e       	cpi	r24, 0xE8	; 232
     680:	93 40       	sbci	r25, 0x03	; 3
     682:	a1 05       	cpc	r26, r1
     684:	b1 05       	cpc	r27, r1
     686:	60 f3       	brcs	.-40     	; 0x660 <delay+0x1c>
			ms--;
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	c2 1a       	sub	r12, r18
     68c:	d1 08       	sbc	r13, r1
     68e:	e1 08       	sbc	r14, r1
     690:	f1 08       	sbc	r15, r1
			start += 1000;
     692:	88 ee       	ldi	r24, 0xE8	; 232
     694:	88 0e       	add	r8, r24
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	98 1e       	adc	r9, r24
     69a:	a1 1c       	adc	r10, r1
     69c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     69e:	c1 14       	cp	r12, r1
     6a0:	d1 04       	cpc	r13, r1
     6a2:	e1 04       	cpc	r14, r1
     6a4:	f1 04       	cpc	r15, r1
     6a6:	19 f7       	brne	.-58     	; 0x66e <delay+0x2a>
     6a8:	db cf       	rjmp	.-74     	; 0x660 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	08 95       	ret

000006bc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	91 05       	cpc	r25, r1
     6c0:	38 f0       	brcs	.+14     	; 0x6d0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     6ca:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <delayMicroseconds+0x10>
     6d0:	08 95       	ret

000006d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     6d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     6d4:	84 b5       	in	r24, 0x24	; 36
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     6da:	84 b5       	in	r24, 0x24	; 36
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     6e0:	85 b5       	in	r24, 0x25	; 37
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     6e6:	85 b5       	in	r24, 0x25	; 37
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     6ec:	ee e6       	ldi	r30, 0x6E	; 110
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     6f6:	e1 e8       	ldi	r30, 0x81	; 129
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     6fc:	80 81       	ld	r24, Z
     6fe:	82 60       	ori	r24, 0x02	; 2
     700:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     702:	80 81       	ld	r24, Z
     704:	81 60       	ori	r24, 0x01	; 1
     706:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     708:	e0 e8       	ldi	r30, 0x80	; 128
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     712:	e1 eb       	ldi	r30, 0xB1	; 177
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	84 60       	ori	r24, 0x04	; 4
     71a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     71c:	e0 eb       	ldi	r30, 0xB0	; 176
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	81 60       	ori	r24, 0x01	; 1
     724:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     726:	ea e7       	ldi	r30, 0x7A	; 122
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	84 60       	ori	r24, 0x04	; 4
     72e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     730:	80 81       	ld	r24, Z
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     736:	80 81       	ld	r24, Z
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     73c:	80 81       	ld	r24, Z
     73e:	80 68       	ori	r24, 0x80	; 128
     740:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     742:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     746:	08 95       	ret

00000748 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	18 2f       	mov	r17, r24
     750:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
	if (val == 0)
     758:	20 97       	sbiw	r28, 0x00	; 0
     75a:	11 f4       	brne	.+4      	; 0x760 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	04 c0       	rjmp	.+8      	; 0x768 <analogWrite+0x20>
	}
	else if (val == 255)
     760:	cf 3f       	cpi	r28, 0xFF	; 255
     762:	d1 05       	cpc	r29, r1
     764:	39 f4       	brne	.+14     	; 0x774 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
     770:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
     774:	e1 2f       	mov	r30, r17
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	ec 56       	subi	r30, 0x6C	; 108
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	e4 91       	lpm	r30, Z
     77e:	e3 30       	cpi	r30, 0x03	; 3
     780:	f9 f0       	breq	.+62     	; 0x7c0 <analogWrite+0x78>
     782:	48 f4       	brcc	.+18     	; 0x796 <analogWrite+0x4e>
     784:	e1 30       	cpi	r30, 0x01	; 1
     786:	b9 f0       	breq	.+46     	; 0x7b6 <analogWrite+0x6e>
     788:	e2 30       	cpi	r30, 0x02	; 2
     78a:	a1 f5       	brne	.+104    	; 0x7f4 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     78c:	84 b5       	in	r24, 0x24	; 36
     78e:	80 62       	ori	r24, 0x20	; 32
     790:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     792:	c8 bd       	out	0x28, r28	; 40
				break;
     794:	34 c0       	rjmp	.+104    	; 0x7fe <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     796:	e7 30       	cpi	r30, 0x07	; 7
     798:	e9 f0       	breq	.+58     	; 0x7d4 <analogWrite+0x8c>
     79a:	e8 30       	cpi	r30, 0x08	; 8
     79c:	19 f1       	breq	.+70     	; 0x7e4 <analogWrite+0x9c>
     79e:	e4 30       	cpi	r30, 0x04	; 4
     7a0:	49 f5       	brne	.+82     	; 0x7f4 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     7a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     7a6:	80 62       	ori	r24, 0x20	; 32
     7a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
     7ac:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     7b0:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
     7b4:	24 c0       	rjmp	.+72     	; 0x7fe <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     7b6:	84 b5       	in	r24, 0x24	; 36
     7b8:	80 68       	ori	r24, 0x80	; 128
     7ba:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     7bc:	c7 bd       	out	0x27, r28	; 39
				break;
     7be:	1f c0       	rjmp	.+62     	; 0x7fe <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     7c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
     7ca:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7ce:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
     7d2:	15 c0       	rjmp	.+42     	; 0x7fe <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     7d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
     7de:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
     7e2:	0d c0       	rjmp	.+26     	; 0x7fe <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     7e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     7e8:	80 62       	ori	r24, 0x20	; 32
     7ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
     7ee:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     7f4:	c0 38       	cpi	r28, 0x80	; 128
     7f6:	d1 05       	cpc	r29, r1
     7f8:	0c f0       	brlt	.+2      	; 0x7fc <analogWrite+0xb4>
     7fa:	b5 cf       	rjmp	.-150    	; 0x766 <analogWrite+0x1e>
     7fc:	af cf       	rjmp	.-162    	; 0x75c <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	81 f0       	breq	.+32     	; 0x82a <turnOffPWM+0x24>
     80a:	28 f4       	brcc	.+10     	; 0x816 <turnOffPWM+0x10>
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	99 f0       	breq	.+38     	; 0x836 <turnOffPWM+0x30>
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	a1 f0       	breq	.+40     	; 0x83c <turnOffPWM+0x36>
     814:	08 95       	ret
     816:	87 30       	cpi	r24, 0x07	; 7
     818:	a9 f0       	breq	.+42     	; 0x844 <turnOffPWM+0x3e>
     81a:	88 30       	cpi	r24, 0x08	; 8
     81c:	b9 f0       	breq	.+46     	; 0x84c <turnOffPWM+0x46>
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	d1 f4       	brne	.+52     	; 0x856 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     822:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     826:	8f 7d       	andi	r24, 0xDF	; 223
     828:	03 c0       	rjmp	.+6      	; 0x830 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     82a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     82e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     830:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     834:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     836:	84 b5       	in	r24, 0x24	; 36
     838:	8f 77       	andi	r24, 0x7F	; 127
     83a:	02 c0       	rjmp	.+4      	; 0x840 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     83c:	84 b5       	in	r24, 0x24	; 36
     83e:	8f 7d       	andi	r24, 0xDF	; 223
     840:	84 bd       	out	0x24, r24	; 36
     842:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     844:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     848:	8f 77       	andi	r24, 0x7F	; 127
     84a:	03 c0       	rjmp	.+6      	; 0x852 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     84c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     850:	8f 7d       	andi	r24, 0xDF	; 223
     852:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     856:	08 95       	ret

00000858 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	e8 55       	subi	r30, 0x58	; 88
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     866:	fc 01       	movw	r30, r24
     868:	e4 54       	subi	r30, 0x44	; 68
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     86e:	88 23       	and	r24, r24
     870:	61 f1       	breq	.+88     	; 0x8ca <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	fc 01       	movw	r30, r24
     87a:	ec 51       	subi	r30, 0x1C	; 28
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	c5 91       	lpm	r28, Z+
     880:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     882:	fc 01       	movw	r30, r24
     884:	e6 52       	subi	r30, 0x26	; 38
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	a5 91       	lpm	r26, Z+
     88a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     88c:	61 11       	cpse	r22, r1
     88e:	09 c0       	rjmp	.+18     	; 0x8a2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     890:	9f b7       	in	r25, 0x3f	; 63
                cli();
     892:	f8 94       	cli
		*reg &= ~bit;
     894:	88 81       	ld	r24, Y
     896:	20 95       	com	r18
     898:	82 23       	and	r24, r18
     89a:	88 83       	st	Y, r24
		*out &= ~bit;
     89c:	ec 91       	ld	r30, X
     89e:	2e 23       	and	r18, r30
     8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     8a2:	62 30       	cpi	r22, 0x02	; 2
     8a4:	61 f4       	brne	.+24     	; 0x8be <pinMode+0x66>
		uint8_t oldSREG = SREG;
     8a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     8a8:	f8 94       	cli
		*reg &= ~bit;
     8aa:	88 81       	ld	r24, Y
     8ac:	32 2f       	mov	r19, r18
     8ae:	30 95       	com	r19
     8b0:	83 23       	and	r24, r19
     8b2:	88 83       	st	Y, r24
		*out |= bit;
     8b4:	ec 91       	ld	r30, X
     8b6:	2e 2b       	or	r18, r30
     8b8:	2c 93       	st	X, r18
		SREG = oldSREG;
     8ba:	9f bf       	out	0x3f, r25	; 63
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     8be:	8f b7       	in	r24, 0x3f	; 63
                cli();
     8c0:	f8 94       	cli
		*reg |= bit;
     8c2:	e8 81       	ld	r30, Y
     8c4:	2e 2b       	or	r18, r30
     8c6:	28 83       	st	Y, r18
		SREG = oldSREG;
     8c8:	8f bf       	out	0x3f, r24	; 63
	}
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     8d6:	28 2f       	mov	r18, r24
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	ec 56       	subi	r30, 0x6C	; 108
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     8e2:	f9 01       	movw	r30, r18
     8e4:	e8 55       	subi	r30, 0x58	; 88
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     8ea:	f9 01       	movw	r30, r18
     8ec:	e4 54       	subi	r30, 0x44	; 68
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     8f2:	cc 23       	and	r28, r28
     8f4:	c1 f0       	breq	.+48     	; 0x926 <__stack+0x27>
     8f6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8f8:	81 11       	cpse	r24, r1
     8fa:	0e 94 03 04 	call	0x806	; 0x806 <turnOffPWM>

	out = portOutputRegister(port);
     8fe:	ec 2f       	mov	r30, r28
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e6 52       	subi	r30, 0x26	; 38
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	a5 91       	lpm	r26, Z+
     90c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     90e:	9f b7       	in	r25, 0x3f	; 63
	cli();
     910:	f8 94       	cli

	if (val == LOW) {
     912:	11 11       	cpse	r17, r1
     914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0x1f>
		*out &= ~bit;
     916:	8c 91       	ld	r24, X
     918:	d0 95       	com	r29
     91a:	d8 23       	and	r29, r24
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
	} else {
		*out |= bit;
     91e:	ec 91       	ld	r30, X
     920:	de 2b       	or	r29, r30
     922:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     924:	9f bf       	out	0x3f, r25	; 63
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	08 95       	ret

0000092e <digitalRead>:

int digitalRead(uint8_t pin)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	ec 56       	subi	r30, 0x6C	; 108
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     93e:	f9 01       	movw	r30, r18
     940:	e8 55       	subi	r30, 0x58	; 88
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     946:	f9 01       	movw	r30, r18
     948:	e4 54       	subi	r30, 0x44	; 68
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     94e:	cc 23       	and	r28, r28
     950:	91 f0       	breq	.+36     	; 0x976 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     952:	81 11       	cpse	r24, r1
     954:	0e 94 03 04 	call	0x806	; 0x806 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     958:	ec 2f       	mov	r30, r28
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e0 53       	subi	r30, 0x30	; 48
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	a5 91       	lpm	r26, Z+
     966:	b4 91       	lpm	r27, Z
     968:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     96a:	ed 23       	and	r30, r29
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	21 f4       	brne	.+8      	; 0x97a <digitalRead+0x4c>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <digitalRead+0x4c>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     980:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     984:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	b9 f4       	brne	.+46     	; 0x9bc <_ZN14SoftwareSerial4readEv+0x3c>
     98e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     992:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     996:	98 17       	cp	r25, r24
     998:	89 f0       	breq	.+34     	; 0x9bc <_ZN14SoftwareSerial4readEv+0x3c>
     99a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e4 5c       	subi	r30, 0xC4	; 196
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	80 81       	ld	r24, Z
     9a6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	2f 73       	andi	r18, 0x3F	; 63
     9b2:	33 27       	eor	r19, r19
     9b4:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	08 95       	ret

000009c2 <_ZN14SoftwareSerial5writeEh>:
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	dc 01       	movw	r26, r24
     9ca:	5c 96       	adiw	r26, 0x1c	; 28
     9cc:	8d 91       	ld	r24, X+
     9ce:	9c 91       	ld	r25, X
     9d0:	5d 97       	sbiw	r26, 0x1d	; 29
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	39 f4       	brne	.+14     	; 0x9e4 <_ZN14SoftwareSerial5writeEh+0x22>
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	3c 93       	st	X, r19
     9de:	2e 93       	st	-X, r18
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	3b c0       	rjmp	.+118    	; 0xa5a <_ZN14SoftwareSerial5writeEh+0x98>
     9e4:	51 96       	adiw	r26, 0x11	; 17
     9e6:	ed 91       	ld	r30, X+
     9e8:	fc 91       	ld	r31, X
     9ea:	52 97       	sbiw	r26, 0x12	; 18
     9ec:	50 96       	adiw	r26, 0x10	; 16
     9ee:	2c 91       	ld	r18, X
     9f0:	50 97       	sbiw	r26, 0x10	; 16
     9f2:	32 2f       	mov	r19, r18
     9f4:	30 95       	com	r19
     9f6:	1f b7       	in	r17, 0x3f	; 63
     9f8:	5e 96       	adiw	r26, 0x1e	; 30
     9fa:	4c 91       	ld	r20, X
     9fc:	5e 97       	sbiw	r26, 0x1e	; 30
     9fe:	74 2f       	mov	r23, r20
     a00:	72 70       	andi	r23, 0x02	; 2
     a02:	41 fd       	sbrc	r20, 1
     a04:	60 95       	com	r22
     a06:	f8 94       	cli
     a08:	40 81       	ld	r20, Z
     a0a:	77 23       	and	r23, r23
     a0c:	11 f0       	breq	.+4      	; 0xa12 <_ZN14SoftwareSerial5writeEh+0x50>
     a0e:	42 2b       	or	r20, r18
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <_ZN14SoftwareSerial5writeEh+0x52>
     a12:	43 23       	and	r20, r19
     a14:	40 83       	st	Z, r20
     a16:	ec 01       	movw	r28, r24
     a18:	21 97       	sbiw	r28, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <_ZN14SoftwareSerial5writeEh+0x56>
     a1c:	48 e0       	ldi	r20, 0x08	; 8
     a1e:	50 81       	ld	r21, Z
     a20:	60 ff       	sbrs	r22, 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <_ZN14SoftwareSerial5writeEh+0x66>
     a24:	52 2b       	or	r21, r18
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <_ZN14SoftwareSerial5writeEh+0x68>
     a28:	53 23       	and	r21, r19
     a2a:	50 83       	st	Z, r21
     a2c:	ec 01       	movw	r28, r24
     a2e:	21 97       	sbiw	r28, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <_ZN14SoftwareSerial5writeEh+0x6c>
     a32:	66 95       	lsr	r22
     a34:	41 50       	subi	r20, 0x01	; 1
     a36:	99 f7       	brne	.-26     	; 0xa1e <_ZN14SoftwareSerial5writeEh+0x5c>
     a38:	80 81       	ld	r24, Z
     a3a:	77 23       	and	r23, r23
     a3c:	19 f0       	breq	.+6      	; 0xa44 <_ZN14SoftwareSerial5writeEh+0x82>
     a3e:	83 23       	and	r24, r19
     a40:	80 83       	st	Z, r24
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <_ZN14SoftwareSerial5writeEh+0x86>
     a44:	28 2b       	or	r18, r24
     a46:	20 83       	st	Z, r18
     a48:	1f bf       	out	0x3f, r17	; 63
     a4a:	5c 96       	adiw	r26, 0x1c	; 28
     a4c:	8d 91       	ld	r24, X+
     a4e:	9c 91       	ld	r25, X
     a50:	5d 97       	sbiw	r26, 0x1d	; 29
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <_ZN14SoftwareSerial5writeEh+0x90>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	08 95       	ret

00000a62 <_ZN14SoftwareSerial5flushEv>:
     a62:	08 95       	ret

00000a64 <_ZN14SoftwareSerial4peekEv>:
     a64:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     a68:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	71 f4       	brne	.+28     	; 0xa8e <_ZN14SoftwareSerial4peekEv+0x2a>
     a72:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     a76:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     a7a:	98 17       	cp	r25, r24
     a7c:	41 f0       	breq	.+16     	; 0xa8e <_ZN14SoftwareSerial4peekEv+0x2a>
     a7e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e4 5c       	subi	r30, 0xC4	; 196
     a86:	fe 4f       	sbci	r31, 0xFE	; 254
     a88:	80 81       	ld	r24, Z
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	08 95       	ret
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	08 95       	ret

00000a94 <_ZN14SoftwareSerial9availableEv>:
     a94:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     a98:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     a9c:	28 17       	cp	r18, r24
     a9e:	39 07       	cpc	r19, r25
     aa0:	71 f4       	brne	.+28     	; 0xabe <_ZN14SoftwareSerial9availableEv+0x2a>
     aa2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     aa6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	80 5c       	subi	r24, 0xC0	; 192
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	82 1b       	sub	r24, r18
     ab2:	91 09       	sbc	r25, r1
     ab4:	60 e4       	ldi	r22, 0x40	; 64
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	0e 94 01 09 	call	0x1202	; 0x1202 <__divmodhi4>
     abc:	08 95       	ret
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	08 95       	ret

00000ac4 <_ZN14SoftwareSerial13stopListeningEv>:
     ac4:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     ac8:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     acc:	e8 17       	cp	r30, r24
     ace:	f9 07       	cpc	r31, r25
     ad0:	69 f4       	brne	.+26     	; 0xaec <_ZN14SoftwareSerial13stopListeningEv+0x28>
     ad2:	a3 89       	ldd	r26, Z+19	; 0x13
     ad4:	b4 89       	ldd	r27, Z+20	; 0x14
     ad6:	9c 91       	ld	r25, X
     ad8:	85 89       	ldd	r24, Z+21	; 0x15
     ada:	80 95       	com	r24
     adc:	89 23       	and	r24, r25
     ade:	8c 93       	st	X, r24
     ae0:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     ae4:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret

00000af0 <_ZN14SoftwareSerial6listenEv>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     af8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     afa:	89 2b       	or	r24, r25
     afc:	f1 f0       	breq	.+60     	; 0xb3a <_ZN14SoftwareSerial6listenEv+0x4a>
     afe:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     b02:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     b06:	c8 17       	cp	r28, r24
     b08:	d9 07       	cpc	r29, r25
     b0a:	b9 f0       	breq	.+46     	; 0xb3a <_ZN14SoftwareSerial6listenEv+0x4a>
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	11 f0       	breq	.+4      	; 0xb14 <_ZN14SoftwareSerial6listenEv+0x24>
     b10:	0e 94 62 05 	call	0xac4	; 0xac4 <_ZN14SoftwareSerial13stopListeningEv>
     b14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b16:	8e 7f       	andi	r24, 0xFE	; 254
     b18:	8e 8f       	std	Y+30, r24	; 0x1e
     b1a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b1e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     b22:	d0 93 7d 01 	sts	0x017D, r29	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     b26:	c0 93 7c 01 	sts	0x017C, r28	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     b2a:	eb 89       	ldd	r30, Y+19	; 0x13
     b2c:	fc 89       	ldd	r31, Y+20	; 0x14
     b2e:	90 81       	ld	r25, Z
     b30:	8d 89       	ldd	r24, Y+21	; 0x15
     b32:	89 2b       	or	r24, r25
     b34:	80 83       	st	Z, r24
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <_ZN14SoftwareSerial6listenEv+0x4c>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <__vector_3>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
     b64:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <_ZN14SoftwareSerial13active_objectE>
     b68:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <_ZN14SoftwareSerial13active_objectE+0x1>
     b6c:	30 97       	sbiw	r30, 0x00	; 0
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__vector_3+0x30>
     b70:	51 c0       	rjmp	.+162    	; 0xc14 <__vector_3+0xd2>
     b72:	96 8d       	ldd	r25, Z+30	; 0x1e
     b74:	a6 85       	ldd	r26, Z+14	; 0x0e
     b76:	b7 85       	ldd	r27, Z+15	; 0x0f
     b78:	85 85       	ldd	r24, Z+13	; 0x0d
     b7a:	91 ff       	sbrs	r25, 1
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__vector_3+0x44>
     b7e:	9c 91       	ld	r25, X
     b80:	89 23       	and	r24, r25
     b82:	29 f4       	brne	.+10     	; 0xb8e <__vector_3+0x4c>
     b84:	47 c0       	rjmp	.+142    	; 0xc14 <__vector_3+0xd2>
     b86:	9c 91       	ld	r25, X
     b88:	89 23       	and	r24, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_3+0x4c>
     b8c:	43 c0       	rjmp	.+134    	; 0xc14 <__vector_3+0xd2>
     b8e:	a3 89       	ldd	r26, Z+19	; 0x13
     b90:	b4 89       	ldd	r27, Z+20	; 0x14
     b92:	9c 91       	ld	r25, X
     b94:	85 89       	ldd	r24, Z+21	; 0x15
     b96:	80 95       	com	r24
     b98:	89 23       	and	r24, r25
     b9a:	8c 93       	st	X, r24
     b9c:	86 89       	ldd	r24, Z+22	; 0x16
     b9e:	97 89       	ldd	r25, Z+23	; 0x17
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <__vector_3+0x5e>
     ba4:	60 8d       	ldd	r22, Z+24	; 0x18
     ba6:	71 8d       	ldd	r23, Z+25	; 0x19
     ba8:	a6 85       	ldd	r26, Z+14	; 0x0e
     baa:	b7 85       	ldd	r27, Z+15	; 0x0f
     bac:	55 85       	ldd	r21, Z+13	; 0x0d
     bae:	38 e0       	ldi	r19, 0x08	; 8
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	cb 01       	movw	r24, r22
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <__vector_3+0x72>
     bb8:	82 2f       	mov	r24, r18
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	95 95       	asr	r25
     bbe:	87 95       	ror	r24
     bc0:	28 2f       	mov	r18, r24
     bc2:	4c 91       	ld	r20, X
     bc4:	45 23       	and	r20, r21
     bc6:	09 f0       	breq	.+2      	; 0xbca <__vector_3+0x88>
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	31 50       	subi	r19, 0x01	; 1
     bcc:	91 f7       	brne	.-28     	; 0xbb2 <__vector_3+0x70>
     bce:	86 8d       	ldd	r24, Z+30	; 0x1e
     bd0:	81 fd       	sbrc	r24, 1
     bd2:	20 95       	com	r18
     bd4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	8f 73       	andi	r24, 0x3F	; 63
     bde:	99 27       	eor	r25, r25
     be0:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <_ZN14SoftwareSerial20_receive_buffer_headE>
     be4:	38 17       	cp	r19, r24
     be6:	49 f0       	breq	.+18     	; 0xbfa <__vector_3+0xb8>
     be8:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	a4 5c       	subi	r26, 0xC4	; 196
     bf0:	be 4f       	sbci	r27, 0xFE	; 254
     bf2:	2c 93       	st	X, r18
     bf4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_ZN14SoftwareSerial20_receive_buffer_tailE>
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <__vector_3+0xbe>
     bfa:	86 8d       	ldd	r24, Z+30	; 0x1e
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	86 8f       	std	Z+30, r24	; 0x1e
     c00:	82 8d       	ldd	r24, Z+26	; 0x1a
     c02:	93 8d       	ldd	r25, Z+27	; 0x1b
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <__vector_3+0xc2>
     c08:	a3 89       	ldd	r26, Z+19	; 0x13
     c0a:	b4 89       	ldd	r27, Z+20	; 0x14
     c0c:	9c 91       	ld	r25, X
     c0e:	85 89       	ldd	r24, Z+21	; 0x15
     c10:	89 2b       	or	r24, r25
     c12:	8c 93       	st	X, r24
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <_ZN14SoftwareSerial5setTXEh>:
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
     c3e:	16 2f       	mov	r17, r22
     c40:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c42:	66 95       	lsr	r22
     c44:	61 70       	andi	r22, 0x01	; 1
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	68 27       	eor	r22, r24
     c4a:	81 2f       	mov	r24, r17
     c4c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	81 2f       	mov	r24, r17
     c54:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
     c58:	81 2f       	mov	r24, r17
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	e8 55       	subi	r30, 0x58	; 88
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	e4 91       	lpm	r30, Z
     c64:	e8 8b       	std	Y+16, r30	; 0x10
     c66:	fc 01       	movw	r30, r24
     c68:	e4 54       	subi	r30, 0x44	; 68
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	e4 91       	lpm	r30, Z
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	e6 52       	subi	r30, 0x26	; 38
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	85 91       	lpm	r24, Z+
     c7a:	94 91       	lpm	r25, Z
     c7c:	9a 8b       	std	Y+18, r25	; 0x12
     c7e:	89 8b       	std	Y+17, r24	; 0x11
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	08 95       	ret

00000c88 <_ZN14SoftwareSerial5setRXEh>:
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	16 2f       	mov	r17, r22
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	81 2f       	mov	r24, r17
     c96:	0e 94 2c 04 	call	0x858	; 0x858 <pinMode>
     c9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c9c:	81 fd       	sbrc	r24, 1
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <_ZN14SoftwareSerial5setRXEh+0x20>
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	81 2f       	mov	r24, r17
     ca4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <digitalWrite>
     ca8:	1c 87       	std	Y+12, r17	; 0x0c
     caa:	81 2f       	mov	r24, r17
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	e8 55       	subi	r30, 0x58	; 88
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	e4 91       	lpm	r30, Z
     cb6:	ed 87       	std	Y+13, r30	; 0x0d
     cb8:	fc 01       	movw	r30, r24
     cba:	e4 54       	subi	r30, 0x44	; 68
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	e4 91       	lpm	r30, Z
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e0 53       	subi	r30, 0x30	; 48
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	85 91       	lpm	r24, Z+
     ccc:	94 91       	lpm	r25, Z
     cce:	9f 87       	std	Y+15, r25	; 0x0f
     cd0:	8e 87       	std	Y+14, r24	; 0x0e
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	08 95       	ret

00000cda <_ZN14SoftwareSerialC1Ehhb>:
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	16 2f       	mov	r17, r22
     ce4:	1b 82       	std	Y+3, r1	; 0x03
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	88 ee       	ldi	r24, 0xE8	; 232
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	8c 83       	std	Y+4, r24	; 0x04
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	ae 83       	std	Y+6, r26	; 0x06
     cf6:	bf 83       	std	Y+7, r27	; 0x07
     cf8:	84 e1       	ldi	r24, 0x14	; 20
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	99 83       	std	Y+1, r25	; 0x01
     cfe:	88 83       	st	Y, r24
     d00:	1f 8a       	std	Y+23, r1	; 0x17
     d02:	1e 8a       	std	Y+22, r1	; 0x16
     d04:	19 8e       	std	Y+25, r1	; 0x19
     d06:	18 8e       	std	Y+24, r1	; 0x18
     d08:	1b 8e       	std	Y+27, r1	; 0x1b
     d0a:	1a 8e       	std	Y+26, r1	; 0x1a
     d0c:	1d 8e       	std	Y+29, r1	; 0x1d
     d0e:	1c 8e       	std	Y+28, r1	; 0x1c
     d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d12:	8e 7f       	andi	r24, 0xFE	; 254
     d14:	20 fb       	bst	r18, 0
     d16:	81 f9       	bld	r24, 1
     d18:	8e 8f       	std	Y+30, r24	; 0x1e
     d1a:	64 2f       	mov	r22, r20
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN14SoftwareSerial5setTXEh>
     d22:	61 2f       	mov	r22, r17
     d24:	ce 01       	movw	r24, r28
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0c 94 44 06 	jmp	0xc88	; 0xc88 <_ZN14SoftwareSerial5setRXEh>

00000d30 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     d3a:	1b 8e       	std	Y+27, r1	; 0x1b
     d3c:	1a 8e       	std	Y+26, r1	; 0x1a
     d3e:	19 8e       	std	Y+25, r1	; 0x19
     d40:	18 8e       	std	Y+24, r1	; 0x18
     d42:	1f 8a       	std	Y+23, r1	; 0x17
     d44:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	79 e0       	ldi	r23, 0x09	; 9
     d4a:	8d e3       	ldi	r24, 0x3D	; 61
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 37 09 	call	0x126e	; 0x126e <__divmodsi4>
     d52:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     d54:	24 30       	cpi	r18, 0x04	; 4
     d56:	31 05       	cpc	r19, r1
     d58:	18 f0       	brcs	.+6      	; 0xd60 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     d5a:	c9 01       	movw	r24, r18
     d5c:	03 97       	sbiw	r24, 0x03	; 3
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     d64:	9d 8f       	std	Y+29, r25	; 0x1d
     d66:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     d68:	6c 85       	ldd	r22, Y+12	; 0x0c
     d6a:	66 31       	cpi	r22, 0x16	; 22
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <_ZN14SoftwareSerial5beginEl+0x40>
     d6e:	69 c0       	rjmp	.+210    	; 0xe42 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     d70:	c9 01       	movw	r24, r18
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     d76:	84 31       	cpi	r24, 0x14	; 20
     d78:	91 05       	cpc	r25, r1
     d7a:	10 f0       	brcs	.+4      	; 0xd80 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     d7c:	43 97       	sbiw	r24, 0x13	; 19
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     d84:	9f 8b       	std	Y+23, r25	; 0x17
     d86:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     d88:	36 97       	sbiw	r30, 0x06	; 6
     d8a:	18 f0       	brcs	.+6      	; 0xd92 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     d8c:	c9 01       	movw	r24, r18
     d8e:	05 97       	sbiw	r24, 0x05	; 5
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     d96:	99 8f       	std	Y+25, r25	; 0x19
     d98:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     d9a:	c9 01       	movw	r24, r18
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	28 0f       	add	r18, r24
     da2:	39 1f       	adc	r19, r25
     da4:	36 95       	lsr	r19
     da6:	27 95       	ror	r18
     da8:	36 95       	lsr	r19
     daa:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     dac:	2d 30       	cpi	r18, 0x0D	; 13
     dae:	31 05       	cpc	r19, r1
     db0:	18 f0       	brcs	.+6      	; 0xdb8 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
     db2:	2c 50       	subi	r18, 0x0C	; 12
     db4:	31 09       	sbc	r19, r1
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     dbc:	3b 8f       	std	Y+27, r19	; 0x1b
     dbe:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     dc0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     dc4:	68 30       	cpi	r22, 0x08	; 8
     dc6:	50 f0       	brcs	.+20     	; 0xddc <_ZN14SoftwareSerial5beginEl+0xac>
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	6e 30       	cpi	r22, 0x0E	; 14
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <_ZN14SoftwareSerial5beginEl+0xa0>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <_ZN14SoftwareSerial5beginEl+0xa6>
     dd4:	88 0f       	add	r24, r24
     dd6:	2a 95       	dec	r18
     dd8:	ea f7       	brpl	.-6      	; 0xdd4 <_ZN14SoftwareSerial5beginEl+0xa4>
     dda:	01 c0       	rjmp	.+2      	; 0xdde <_ZN14SoftwareSerial5beginEl+0xae>
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	89 2b       	or	r24, r25
     de0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     de4:	9c 85       	ldd	r25, Y+12	; 0x0c
     de6:	98 30       	cpi	r25, 0x08	; 8
     de8:	38 f0       	brcs	.+14     	; 0xdf8 <_ZN14SoftwareSerial5beginEl+0xc8>
     dea:	9e 30       	cpi	r25, 0x0E	; 14
     dec:	40 f0       	brcs	.+16     	; 0xdfe <_ZN14SoftwareSerial5beginEl+0xce>
     dee:	96 31       	cpi	r25, 0x16	; 22
     df0:	48 f0       	brcs	.+18     	; 0xe04 <_ZN14SoftwareSerial5beginEl+0xd4>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <_ZN14SoftwareSerial5beginEl+0xd8>
     df8:	2d e6       	ldi	r18, 0x6D	; 109
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <_ZN14SoftwareSerial5beginEl+0xd8>
     dfe:	2b e6       	ldi	r18, 0x6B	; 107
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <_ZN14SoftwareSerial5beginEl+0xd8>
     e04:	2c e6       	ldi	r18, 0x6C	; 108
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3c 8b       	std	Y+20, r19	; 0x14
     e0a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     e0c:	98 30       	cpi	r25, 0x08	; 8
     e0e:	30 f4       	brcc	.+12     	; 0xe1c <_ZN14SoftwareSerial5beginEl+0xec>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <_ZN14SoftwareSerial5beginEl+0xe6>
     e14:	88 0f       	add	r24, r24
     e16:	9a 95       	dec	r25
     e18:	ea f7       	brpl	.-6      	; 0xe14 <_ZN14SoftwareSerial5beginEl+0xe4>
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <_ZN14SoftwareSerial5beginEl+0x108>
     e1c:	29 2f       	mov	r18, r25
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	9e 30       	cpi	r25, 0x0E	; 14
     e22:	18 f4       	brcc	.+6      	; 0xe2a <_ZN14SoftwareSerial5beginEl+0xfa>
     e24:	28 50       	subi	r18, 0x08	; 8
     e26:	31 09       	sbc	r19, r1
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <_ZN14SoftwareSerial5beginEl+0xfe>
     e2a:	2e 50       	subi	r18, 0x0E	; 14
     e2c:	31 09       	sbc	r19, r1
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <_ZN14SoftwareSerial5beginEl+0x104>
     e32:	88 0f       	add	r24, r24
     e34:	2a 95       	dec	r18
     e36:	ea f7       	brpl	.-6      	; 0xe32 <_ZN14SoftwareSerial5beginEl+0x102>
     e38:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     e3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     e42:	ce 01       	movw	r24, r28
}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     e48:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <_ZN14SoftwareSerial6listenEv>

00000e4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
  sendStack(0x09, device);
  delay(200);
}

void DFRobotDFPlayerMini::sleep(){
  sendStack(0x0A);
     e4c:	fb 01       	movw	r30, r22
     e4e:	31 96       	adiw	r30, 0x01	; 1
     e50:	69 5f       	subi	r22, 0xF9	; 249
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	21 91       	ld	r18, Z+
     e5a:	82 0f       	add	r24, r18
     e5c:	91 1d       	adc	r25, r1
     e5e:	e6 17       	cp	r30, r22
     e60:	f7 07       	cpc	r31, r23
     e62:	d1 f7       	brne	.-12     	; 0xe58 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0xc>
     e64:	91 95       	neg	r25
     e66:	81 95       	neg	r24
     e68:	91 09       	sbc	r25, r1
     e6a:	08 95       	ret

00000e6c <_ZN19DFRobotDFPlayerMini10parseStackEv>:
     e6c:	dc 01       	movw	r26, r24
     e6e:	1d 96       	adiw	r26, 0x0d	; 13
     e70:	ec 91       	ld	r30, X
     e72:	1d 97       	sbiw	r26, 0x0d	; 13
     e74:	91 96       	adiw	r26, 0x21	; 33
     e76:	ec 93       	st	X, r30
     e78:	91 97       	sbiw	r26, 0x21	; 33
     e7a:	1f 96       	adiw	r26, 0x0f	; 15
     e7c:	8c 91       	ld	r24, X
     e7e:	1f 97       	sbiw	r26, 0x0f	; 15
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	98 2f       	mov	r25, r24
     e84:	88 27       	eor	r24, r24
     e86:	50 96       	adiw	r26, 0x10	; 16
     e88:	2c 91       	ld	r18, X
     e8a:	50 97       	sbiw	r26, 0x10	; 16
     e8c:	82 0f       	add	r24, r18
     e8e:	91 1d       	adc	r25, r1
     e90:	93 96       	adiw	r26, 0x23	; 35
     e92:	9c 93       	st	X, r25
     e94:	8e 93       	st	-X, r24
     e96:	92 97       	sbiw	r26, 0x22	; 34
     e98:	4e 2f       	mov	r20, r30
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	fa 01       	movw	r30, r20
     e9e:	fa 97       	sbiw	r30, 0x3a	; 58
     ea0:	e6 31       	cpi	r30, 0x16	; 22
     ea2:	f1 05       	cpc	r31, r1
     ea4:	48 f5       	brcc	.+82     	; 0xef8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x8c>
     ea6:	ec 5c       	subi	r30, 0xCC	; 204
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__tablejump2__>
     eae:	5e 96       	adiw	r26, 0x1e	; 30
     eb0:	1c 92       	st	X, r1
     eb2:	5e 97       	sbiw	r26, 0x1e	; 30
     eb4:	85 e0       	ldi	r24, 0x05	; 5
     eb6:	19 c0       	rjmp	.+50     	; 0xeea <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     eb8:	81 ff       	sbrs	r24, 1
     eba:	2e c0       	rjmp	.+92     	; 0xf18 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     ebc:	5e 96       	adiw	r26, 0x1e	; 30
     ebe:	1c 92       	st	X, r1
     ec0:	5e 97       	sbiw	r26, 0x1e	; 30
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     ec6:	81 ff       	sbrs	r24, 1
     ec8:	27 c0       	rjmp	.+78     	; 0xf18 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     eca:	5e 96       	adiw	r26, 0x1e	; 30
     ecc:	1c 92       	st	X, r1
     ece:	5e 97       	sbiw	r26, 0x1e	; 30
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0b c0       	rjmp	.+22     	; 0xeea <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     ed4:	81 ff       	sbrs	r24, 1
     ed6:	20 c0       	rjmp	.+64     	; 0xf18 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     ed8:	5e 96       	adiw	r26, 0x1e	; 30
     eda:	1c 92       	st	X, r1
     edc:	5e 97       	sbiw	r26, 0x1e	; 30
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     ee2:	5e 96       	adiw	r26, 0x1e	; 30
     ee4:	1c 92       	st	X, r1
     ee6:	5e 97       	sbiw	r26, 0x1e	; 30
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	90 96       	adiw	r26, 0x20	; 32
     eec:	8c 93       	st	X, r24
     eee:	90 97       	sbiw	r26, 0x20	; 32
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	94 96       	adiw	r26, 0x24	; 36
     ef4:	8c 93       	st	X, r24
     ef6:	08 95       	ret
     ef8:	5e 96       	adiw	r26, 0x1e	; 30
     efa:	1c 92       	st	X, r1
     efc:	5e 97       	sbiw	r26, 0x1e	; 30
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 96       	adiw	r26, 0x20	; 32
     f02:	8c 93       	st	X, r24
     f04:	90 97       	sbiw	r26, 0x20	; 32
     f06:	93 96       	adiw	r26, 0x23	; 35
     f08:	1c 92       	st	X, r1
     f0a:	1e 92       	st	-X, r1
     f0c:	92 97       	sbiw	r26, 0x22	; 34
     f0e:	94 96       	adiw	r26, 0x24	; 36
     f10:	8c 93       	st	X, r24
     f12:	94 97       	sbiw	r26, 0x24	; 36
     f14:	95 96       	adiw	r26, 0x25	; 37
     f16:	1c 92       	st	X, r1
     f18:	08 95       	ret

00000f1a <_ZN19DFRobotDFPlayerMini13validateStackEv>:
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	bc 01       	movw	r22, r24
     f22:	66 5f       	subi	r22, 0xF6	; 246
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     f2a:	29 89       	ldd	r18, Y+17	; 0x11
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	32 2f       	mov	r19, r18
     f30:	22 27       	eor	r18, r18
     f32:	4a 89       	ldd	r20, Y+18	; 0x12
     f34:	24 0f       	add	r18, r20
     f36:	31 1d       	adc	r19, r1
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN19DFRobotDFPlayerMini13validateStackEv+0x28>
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	84 2f       	mov	r24, r20
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <_ZN19DFRobotDFPlayerMini9availableEv>:
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
     f5c:	88 81       	ld	r24, Y
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
     f60:	dc 01       	movw	r26, r24
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	04 80       	ldd	r0, Z+4	; 0x04
     f68:	f5 81       	ldd	r31, Z+5	; 0x05
     f6a:	e0 2d       	mov	r30, r0
     f6c:	09 95       	icall
     f6e:	89 2b       	or	r24, r25
     f70:	09 f4       	brne	.+2      	; 0xf74 <_ZN19DFRobotDFPlayerMini9availableEv+0x2a>
     f72:	44 c0       	rjmp	.+136    	; 0xffc <_ZN19DFRobotDFPlayerMini9availableEv+0xb2>
     f74:	0e 8d       	ldd	r16, Y+30	; 0x1e
     f76:	88 81       	ld	r24, Y
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	dc 01       	movw	r26, r24
     f7c:	ed 91       	ld	r30, X+
     f7e:	fc 91       	ld	r31, X
     f80:	06 80       	ldd	r0, Z+6	; 0x06
     f82:	f7 81       	ldd	r31, Z+7	; 0x07
     f84:	e0 2d       	mov	r30, r0
     f86:	01 11       	cpse	r16, r1
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <_ZN19DFRobotDFPlayerMini9availableEv+0x4e>
     f8a:	09 95       	icall
     f8c:	8a 87       	std	Y+10, r24	; 0x0a
     f8e:	8e 37       	cpi	r24, 0x7E	; 126
     f90:	29 f7       	brne	.-54     	; 0xf5c <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     f92:	1c a2       	std	Y+36, r1	; 0x24
     f94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f96:	2f c0       	rjmp	.+94     	; 0xff6 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     f98:	09 95       	icall
     f9a:	fe 01       	movw	r30, r28
     f9c:	e0 0f       	add	r30, r16
     f9e:	f1 1d       	adc	r31, r1
     fa0:	82 87       	std	Z+10, r24	; 0x0a
     fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	49 f0       	breq	.+18     	; 0xfba <_ZN19DFRobotDFPlayerMini9availableEv+0x70>
     fa8:	89 30       	cpi	r24, 0x09	; 9
     faa:	59 f0       	breq	.+22     	; 0xfc2 <_ZN19DFRobotDFPlayerMini9availableEv+0x78>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	19 f5       	brne	.+70     	; 0xff6 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	01 f1       	breq	.+64     	; 0xff6 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     fb6:	1e 8e       	std	Y+30, r1	; 0x1e
     fb8:	1a c0       	rjmp	.+52     	; 0xfee <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
     fba:	9c 85       	ldd	r25, Y+12	; 0x0c
     fbc:	96 30       	cpi	r25, 0x06	; 6
     fbe:	d9 f0       	breq	.+54     	; 0xff6 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <_ZN19DFRobotDFPlayerMini9availableEv+0x7e>
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	8f 3e       	cpi	r24, 0xEF	; 239
     fc6:	11 f0       	breq	.+4      	; 0xfcc <_ZN19DFRobotDFPlayerMini9availableEv+0x82>
     fc8:	1e 8e       	std	Y+30, r1	; 0x1e
     fca:	10 c0       	rjmp	.+32     	; 0xfec <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     fcc:	ce 01       	movw	r24, r28
     fce:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN19DFRobotDFPlayerMini13validateStackEv>
     fd2:	1e 8e       	std	Y+30, r1	; 0x1e
     fd4:	88 23       	and	r24, r24
     fd6:	51 f0       	breq	.+20     	; 0xfec <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN19DFRobotDFPlayerMini10parseStackEv>
     fde:	1c a1       	ldd	r17, Y+36	; 0x24
     fe0:	11 23       	and	r17, r17
     fe2:	69 f1       	breq	.+90     	; 0x103e <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     fe4:	88 8d       	ldd	r24, Y+24	; 0x18
     fe6:	81 11       	cpse	r24, r1
     fe8:	2a c0       	rjmp	.+84     	; 0x103e <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     fea:	26 c0       	rjmp	.+76     	; 0x1038 <_ZN19DFRobotDFPlayerMini9availableEv+0xee>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	88 a3       	std	Y+32, r24	; 0x20
     ff0:	1b a2       	std	Y+35, r1	; 0x23
     ff2:	1a a2       	std	Y+34, r1	; 0x22
     ff4:	20 c0       	rjmp	.+64     	; 0x1036 <_ZN19DFRobotDFPlayerMini9availableEv+0xec>
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	8e 8f       	std	Y+30, r24	; 0x1e
     ffa:	b0 cf       	rjmp	.-160    	; 0xf5c <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     ffc:	8d a1       	ldd	r24, Y+37	; 0x25
     ffe:	88 23       	and	r24, r24
    1000:	e9 f0       	breq	.+58     	; 0x103c <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
    1002:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <millis>
    1006:	ca 80       	ldd	r12, Y+2	; 0x02
    1008:	db 80       	ldd	r13, Y+3	; 0x03
    100a:	ec 80       	ldd	r14, Y+4	; 0x04
    100c:	fd 80       	ldd	r15, Y+5	; 0x05
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8c 19       	sub	r24, r12
    1014:	9d 09       	sbc	r25, r13
    1016:	ae 09       	sbc	r26, r14
    1018:	bf 09       	sbc	r27, r15
    101a:	ce 80       	ldd	r12, Y+6	; 0x06
    101c:	df 80       	ldd	r13, Y+7	; 0x07
    101e:	e8 84       	ldd	r14, Y+8	; 0x08
    1020:	f9 84       	ldd	r15, Y+9	; 0x09
    1022:	8c 15       	cp	r24, r12
    1024:	9d 05       	cpc	r25, r13
    1026:	ae 05       	cpc	r26, r14
    1028:	bf 05       	cpc	r27, r15
    102a:	40 f0       	brcs	.+16     	; 0x103c <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
    102c:	1e 8e       	std	Y+30, r1	; 0x1e
    102e:	18 a2       	std	Y+32, r1	; 0x20
    1030:	1b a2       	std	Y+35, r1	; 0x23
    1032:	1a a2       	std	Y+34, r1	; 0x22
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	8c a3       	std	Y+36, r24	; 0x24
    1038:	1d a2       	std	Y+37, r1	; 0x25
    103a:	01 c0       	rjmp	.+2      	; 0x103e <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
    103c:	1c a1       	ldd	r17, Y+36	; 0x24
    103e:	81 2f       	mov	r24, r17
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <_ZN19DFRobotDFPlayerMini9sendStackEv>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	88 8d       	ldd	r24, Y+24	; 0x18
    105a:	88 23       	and	r24, r24
    105c:	39 f0       	breq	.+14     	; 0x106c <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1a>
    105e:	8d a1       	ldd	r24, Y+37	; 0x25
    1060:	88 23       	and	r24, r24
    1062:	51 f0       	breq	.+20     	; 0x1078 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x26>
    1064:	ce 01       	movw	r24, r28
    1066:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN19DFRobotDFPlayerMini9availableEv>
    106a:	f9 cf       	rjmp	.-14     	; 0x105e <_ZN19DFRobotDFPlayerMini9sendStackEv+0xc>
    106c:	6a e0       	ldi	r22, 0x0A	; 10
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 22 03 	call	0x644	; 0x644 <delay>
    1078:	88 81       	ld	r24, Y
    107a:	99 81       	ldd	r25, Y+1	; 0x01
    107c:	dc 01       	movw	r26, r24
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	02 80       	ldd	r0, Z+2	; 0x02
    1084:	f3 81       	ldd	r31, Z+3	; 0x03
    1086:	e0 2d       	mov	r30, r0
    1088:	4a e0       	ldi	r20, 0x0A	; 10
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	be 01       	movw	r22, r28
    108e:	6c 5e       	subi	r22, 0xEC	; 236
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	09 95       	icall
    1094:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <millis>
    1098:	6a 83       	std	Y+2, r22	; 0x02
    109a:	7b 83       	std	Y+3, r23	; 0x03
    109c:	8c 83       	std	Y+4, r24	; 0x04
    109e:	9d 83       	std	Y+5, r25	; 0x05
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	91 11       	cpse	r25, r1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_ZN19DFRobotDFPlayerMini9sendStackEv+0x58>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	8d a3       	std	Y+37, r24	; 0x25
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <_ZN19DFRobotDFPlayerMini9sendStackEhj>:
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	6f 8b       	std	Y+23, r22	; 0x17
    10ba:	59 8f       	std	Y+25, r21	; 0x19
    10bc:	4a 8f       	std	Y+26, r20	; 0x1a
    10be:	bc 01       	movw	r22, r24
    10c0:	6c 5e       	subi	r22, 0xEC	; 236
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
    10c8:	9b 8f       	std	Y+27, r25	; 0x1b
    10ca:	8c 8f       	std	Y+28, r24	; 0x1c
    10cc:	ce 01       	movw	r24, r28
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	0c 94 29 08 	jmp	0x1052	; 0x1052 <_ZN19DFRobotDFPlayerMini9sendStackEv>

000010d6 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

000010de <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	8d a3       	std	Y+37, r24	; 0x25
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN19DFRobotDFPlayerMini9availableEv>
    10ee:	88 23       	and	r24, r24
    10f0:	d9 f3       	breq	.-10     	; 0x10e8 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	98 a1       	ldd	r25, Y+32	; 0x20
    10f6:	91 11       	cpse	r25, r1
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0x1e>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <_ZN19DFRobotDFPlayerMini6volumeEh>:
    1102:	46 2f       	mov	r20, r22
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	66 e0       	ldi	r22, 0x06	; 6
    1108:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

0000110c <_ZN19DFRobotDFPlayerMini2EQEh>:
    110c:	46 2f       	mov	r20, r22
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	67 e0       	ldi	r22, 0x07	; 7
    1112:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00001116 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>:
    1116:	46 2f       	mov	r20, r22
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	69 e0       	ldi	r22, 0x09	; 9
    111c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
    1120:	68 ec       	ldi	r22, 0xC8	; 200
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0c 94 22 03 	jmp	0x644	; 0x644 <delay>

0000112c <_ZN19DFRobotDFPlayerMini5resetEv>:
}

void DFRobotDFPlayerMini::reset(){
  sendStack(0x0C);
    112c:	6c e0       	ldi	r22, 0x0C	; 12
    112e:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_ZN19DFRobotDFPlayerMini9sendStackEh>

00001132 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
  _isSending = true;
  while (!available());
  return _handleType != TimeOut;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK){
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
    113a:	14 2f       	mov	r17, r20
  if (isACK) {
    113c:	44 23       	and	r20, r20
    113e:	19 f0       	breq	.+6      	; 0x1146 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x14>
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	88 8f       	std	Y+24, r24	; 0x18
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x16>
}

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
    1146:	18 8e       	std	Y+24, r1	; 0x18
  }
  else{
    disableACK();
  }
  
  _serial = &stream;
    1148:	79 83       	std	Y+1, r23	; 0x01
    114a:	68 83       	st	Y, r22
  _timeOutDuration += 3000;
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	a8 85       	ldd	r26, Y+8	; 0x08
    1152:	b9 85       	ldd	r27, Y+9	; 0x09
    1154:	88 54       	subi	r24, 0x48	; 72
    1156:	94 4f       	sbci	r25, 0xF4	; 244
    1158:	af 4f       	sbci	r26, 0xFF	; 255
    115a:	bf 4f       	sbci	r27, 0xFF	; 255
    115c:	8e 83       	std	Y+6, r24	; 0x06
    115e:	9f 83       	std	Y+7, r25	; 0x07
    1160:	a8 87       	std	Y+8, r26	; 0x08
    1162:	b9 87       	std	Y+9, r27	; 0x09
  reset();
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN19DFRobotDFPlayerMini5resetEv>
  waitAvailable();
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
  _timeOutDuration -= 3000;
    1170:	8e 81       	ldd	r24, Y+6	; 0x06
    1172:	9f 81       	ldd	r25, Y+7	; 0x07
    1174:	a8 85       	ldd	r26, Y+8	; 0x08
    1176:	b9 85       	ldd	r27, Y+9	; 0x09
    1178:	88 5b       	subi	r24, 0xB8	; 184
    117a:	9b 40       	sbci	r25, 0x0B	; 11
    117c:	a1 09       	sbc	r26, r1
    117e:	b1 09       	sbc	r27, r1
    1180:	8e 83       	std	Y+6, r24	; 0x06
    1182:	9f 83       	std	Y+7, r25	; 0x07
    1184:	a8 87       	std	Y+8, r26	; 0x08
    1186:	b9 87       	std	Y+9, r27	; 0x09
  delay(200);
    1188:	68 ec       	ldi	r22, 0xC8	; 200
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 22 03 	call	0x644	; 0x644 <delay>
  return (readType() == DFPlayerCardOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
    1194:	1c a2       	std	Y+36, r1	; 0x24
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
  delay(200);
  return (readType() == DFPlayerCardOnline) || !isACK;
    1196:	88 a1       	ldd	r24, Y+32	; 0x20
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	19 f0       	breq	.+6      	; 0x11a2 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x70>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	81 27       	eor	r24, r17
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x72>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	08 95       	ret

000011ac <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    11ac:	08 95       	ret

000011ae <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	6c 01       	movw	r12, r24
    11c0:	7a 01       	movw	r14, r20
    11c2:	8b 01       	movw	r16, r22
  size_t n = 0;
    11c4:	c0 e0       	ldi	r28, 0x00	; 0
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    11c8:	ce 15       	cp	r28, r14
    11ca:	df 05       	cpc	r29, r15
    11cc:	81 f0       	breq	.+32     	; 0x11ee <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    11ce:	d8 01       	movw	r26, r16
    11d0:	6d 91       	ld	r22, X+
    11d2:	8d 01       	movw	r16, r26
    11d4:	d6 01       	movw	r26, r12
    11d6:	ed 91       	ld	r30, X+
    11d8:	fc 91       	ld	r31, X
    11da:	01 90       	ld	r0, Z+
    11dc:	f0 81       	ld	r31, Z
    11de:	e0 2d       	mov	r30, r0
    11e0:	c6 01       	movw	r24, r12
    11e2:	09 95       	icall
    11e4:	89 2b       	or	r24, r25
    11e6:	11 f0       	breq	.+4      	; 0x11ec <_ZN5Print5writeEPKhj+0x3e>
    11e8:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    11ea:	ee cf       	rjmp	.-36     	; 0x11c8 <_ZN5Print5writeEPKhj+0x1a>
    11ec:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    11ee:	c7 01       	movw	r24, r14
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	08 95       	ret

00001202 <__divmodhi4>:
    1202:	97 fb       	bst	r25, 7
    1204:	07 2e       	mov	r0, r23
    1206:	16 f4       	brtc	.+4      	; 0x120c <__divmodhi4+0xa>
    1208:	00 94       	com	r0
    120a:	07 d0       	rcall	.+14     	; 0x121a <__divmodhi4_neg1>
    120c:	77 fd       	sbrc	r23, 7
    120e:	09 d0       	rcall	.+18     	; 0x1222 <__divmodhi4_neg2>
    1210:	0e 94 67 09 	call	0x12ce	; 0x12ce <__udivmodhi4>
    1214:	07 fc       	sbrc	r0, 7
    1216:	05 d0       	rcall	.+10     	; 0x1222 <__divmodhi4_neg2>
    1218:	3e f4       	brtc	.+14     	; 0x1228 <__divmodhi4_exit>

0000121a <__divmodhi4_neg1>:
    121a:	90 95       	com	r25
    121c:	81 95       	neg	r24
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__divmodhi4_neg2>:
    1222:	70 95       	com	r23
    1224:	61 95       	neg	r22
    1226:	7f 4f       	sbci	r23, 0xFF	; 255

00001228 <__divmodhi4_exit>:
    1228:	08 95       	ret

0000122a <__udivmodsi4>:
    122a:	a1 e2       	ldi	r26, 0x21	; 33
    122c:	1a 2e       	mov	r1, r26
    122e:	aa 1b       	sub	r26, r26
    1230:	bb 1b       	sub	r27, r27
    1232:	fd 01       	movw	r30, r26
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <__udivmodsi4_ep>

00001236 <__udivmodsi4_loop>:
    1236:	aa 1f       	adc	r26, r26
    1238:	bb 1f       	adc	r27, r27
    123a:	ee 1f       	adc	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	a2 17       	cp	r26, r18
    1240:	b3 07       	cpc	r27, r19
    1242:	e4 07       	cpc	r30, r20
    1244:	f5 07       	cpc	r31, r21
    1246:	20 f0       	brcs	.+8      	; 0x1250 <__udivmodsi4_ep>
    1248:	a2 1b       	sub	r26, r18
    124a:	b3 0b       	sbc	r27, r19
    124c:	e4 0b       	sbc	r30, r20
    124e:	f5 0b       	sbc	r31, r21

00001250 <__udivmodsi4_ep>:
    1250:	66 1f       	adc	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	1a 94       	dec	r1
    125a:	69 f7       	brne	.-38     	; 0x1236 <__udivmodsi4_loop>
    125c:	60 95       	com	r22
    125e:	70 95       	com	r23
    1260:	80 95       	com	r24
    1262:	90 95       	com	r25
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	bd 01       	movw	r22, r26
    126a:	cf 01       	movw	r24, r30
    126c:	08 95       	ret

0000126e <__divmodsi4>:
    126e:	05 2e       	mov	r0, r21
    1270:	97 fb       	bst	r25, 7
    1272:	1e f4       	brtc	.+6      	; 0x127a <__divmodsi4+0xc>
    1274:	00 94       	com	r0
    1276:	0e 94 4e 09 	call	0x129c	; 0x129c <__negsi2>
    127a:	57 fd       	sbrc	r21, 7
    127c:	07 d0       	rcall	.+14     	; 0x128c <__divmodsi4_neg2>
    127e:	0e 94 15 09 	call	0x122a	; 0x122a <__udivmodsi4>
    1282:	07 fc       	sbrc	r0, 7
    1284:	03 d0       	rcall	.+6      	; 0x128c <__divmodsi4_neg2>
    1286:	4e f4       	brtc	.+18     	; 0x129a <__divmodsi4_exit>
    1288:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__negsi2>

0000128c <__divmodsi4_neg2>:
    128c:	50 95       	com	r21
    128e:	40 95       	com	r20
    1290:	30 95       	com	r19
    1292:	21 95       	neg	r18
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	4f 4f       	sbci	r20, 0xFF	; 255
    1298:	5f 4f       	sbci	r21, 0xFF	; 255

0000129a <__divmodsi4_exit>:
    129a:	08 95       	ret

0000129c <__negsi2>:
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__tablejump2__>:
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31
    12b0:	05 90       	lpm	r0, Z+
    12b2:	f4 91       	lpm	r31, Z
    12b4:	e0 2d       	mov	r30, r0
    12b6:	09 94       	ijmp

000012b8 <__muluhisi3>:
    12b8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__umulhisi3>
    12bc:	a5 9f       	mul	r26, r21
    12be:	90 0d       	add	r25, r0
    12c0:	b4 9f       	mul	r27, r20
    12c2:	90 0d       	add	r25, r0
    12c4:	a4 9f       	mul	r26, r20
    12c6:	80 0d       	add	r24, r0
    12c8:	91 1d       	adc	r25, r1
    12ca:	11 24       	eor	r1, r1
    12cc:	08 95       	ret

000012ce <__udivmodhi4>:
    12ce:	aa 1b       	sub	r26, r26
    12d0:	bb 1b       	sub	r27, r27
    12d2:	51 e1       	ldi	r21, 0x11	; 17
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <__udivmodhi4_ep>

000012d6 <__udivmodhi4_loop>:
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	a6 17       	cp	r26, r22
    12dc:	b7 07       	cpc	r27, r23
    12de:	10 f0       	brcs	.+4      	; 0x12e4 <__udivmodhi4_ep>
    12e0:	a6 1b       	sub	r26, r22
    12e2:	b7 0b       	sbc	r27, r23

000012e4 <__udivmodhi4_ep>:
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	5a 95       	dec	r21
    12ea:	a9 f7       	brne	.-22     	; 0x12d6 <__udivmodhi4_loop>
    12ec:	80 95       	com	r24
    12ee:	90 95       	com	r25
    12f0:	bc 01       	movw	r22, r24
    12f2:	cd 01       	movw	r24, r26
    12f4:	08 95       	ret

000012f6 <__umulhisi3>:
    12f6:	a2 9f       	mul	r26, r18
    12f8:	b0 01       	movw	r22, r0
    12fa:	b3 9f       	mul	r27, r19
    12fc:	c0 01       	movw	r24, r0
    12fe:	a3 9f       	mul	r26, r19
    1300:	70 0d       	add	r23, r0
    1302:	81 1d       	adc	r24, r1
    1304:	11 24       	eor	r1, r1
    1306:	91 1d       	adc	r25, r1
    1308:	b2 9f       	mul	r27, r18
    130a:	70 0d       	add	r23, r0
    130c:	81 1d       	adc	r24, r1
    130e:	11 24       	eor	r1, r1
    1310:	91 1d       	adc	r25, r1
    1312:	08 95       	ret

00001314 <malloc>:
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	91 05       	cpc	r25, r1
    1320:	10 f4       	brcc	.+4      	; 0x1326 <malloc+0x12>
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__flp>
    132a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <__flp+0x1>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	19 f1       	breq	.+70     	; 0x1380 <malloc+0x6c>
    133a:	40 81       	ld	r20, Z
    133c:	51 81       	ldd	r21, Z+1	; 0x01
    133e:	02 81       	ldd	r16, Z+2	; 0x02
    1340:	13 81       	ldd	r17, Z+3	; 0x03
    1342:	48 17       	cp	r20, r24
    1344:	59 07       	cpc	r21, r25
    1346:	c8 f0       	brcs	.+50     	; 0x137a <malloc+0x66>
    1348:	84 17       	cp	r24, r20
    134a:	95 07       	cpc	r25, r21
    134c:	69 f4       	brne	.+26     	; 0x1368 <malloc+0x54>
    134e:	10 97       	sbiw	r26, 0x00	; 0
    1350:	31 f0       	breq	.+12     	; 0x135e <malloc+0x4a>
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	0c 93       	st	X, r16
    1356:	12 97       	sbiw	r26, 0x02	; 2
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	1c 93       	st	X, r17
    135c:	27 c0       	rjmp	.+78     	; 0x13ac <malloc+0x98>
    135e:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <__flp>
    1362:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <__flp+0x1>
    1366:	22 c0       	rjmp	.+68     	; 0x13ac <malloc+0x98>
    1368:	21 15       	cp	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	19 f0       	breq	.+6      	; 0x1374 <malloc+0x60>
    136e:	42 17       	cp	r20, r18
    1370:	53 07       	cpc	r21, r19
    1372:	18 f4       	brcc	.+6      	; 0x137a <malloc+0x66>
    1374:	9a 01       	movw	r18, r20
    1376:	bd 01       	movw	r22, r26
    1378:	ef 01       	movw	r28, r30
    137a:	df 01       	movw	r26, r30
    137c:	f8 01       	movw	r30, r16
    137e:	db cf       	rjmp	.-74     	; 0x1336 <malloc+0x22>
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	f9 f0       	breq	.+62     	; 0x13c4 <malloc+0xb0>
    1386:	28 1b       	sub	r18, r24
    1388:	39 0b       	sbc	r19, r25
    138a:	24 30       	cpi	r18, 0x04	; 4
    138c:	31 05       	cpc	r19, r1
    138e:	80 f4       	brcc	.+32     	; 0x13b0 <malloc+0x9c>
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	61 15       	cp	r22, r1
    1396:	71 05       	cpc	r23, r1
    1398:	21 f0       	breq	.+8      	; 0x13a2 <malloc+0x8e>
    139a:	fb 01       	movw	r30, r22
    139c:	93 83       	std	Z+3, r25	; 0x03
    139e:	82 83       	std	Z+2, r24	; 0x02
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <malloc+0x96>
    13a2:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__flp+0x1>
    13a6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__flp>
    13aa:	fe 01       	movw	r30, r28
    13ac:	32 96       	adiw	r30, 0x02	; 2
    13ae:	44 c0       	rjmp	.+136    	; 0x1438 <malloc+0x124>
    13b0:	fe 01       	movw	r30, r28
    13b2:	e2 0f       	add	r30, r18
    13b4:	f3 1f       	adc	r31, r19
    13b6:	81 93       	st	Z+, r24
    13b8:	91 93       	st	Z+, r25
    13ba:	22 50       	subi	r18, 0x02	; 2
    13bc:	31 09       	sbc	r19, r1
    13be:	39 83       	std	Y+1, r19	; 0x01
    13c0:	28 83       	st	Y, r18
    13c2:	3a c0       	rjmp	.+116    	; 0x1438 <malloc+0x124>
    13c4:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    13c8:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    13cc:	23 2b       	or	r18, r19
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <malloc+0xcc>
    13d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13d8:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__brkval+0x1>
    13dc:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__brkval>
    13e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	41 f4       	brne	.+16     	; 0x13fe <malloc+0xea>
    13ee:	2d b7       	in	r18, 0x3d	; 61
    13f0:	3e b7       	in	r19, 0x3e	; 62
    13f2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13f6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13fa:	24 1b       	sub	r18, r20
    13fc:	35 0b       	sbc	r19, r21
    13fe:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__brkval>
    1402:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <__brkval+0x1>
    1406:	e2 17       	cp	r30, r18
    1408:	f3 07       	cpc	r31, r19
    140a:	a0 f4       	brcc	.+40     	; 0x1434 <malloc+0x120>
    140c:	2e 1b       	sub	r18, r30
    140e:	3f 0b       	sbc	r19, r31
    1410:	28 17       	cp	r18, r24
    1412:	39 07       	cpc	r19, r25
    1414:	78 f0       	brcs	.+30     	; 0x1434 <malloc+0x120>
    1416:	ac 01       	movw	r20, r24
    1418:	4e 5f       	subi	r20, 0xFE	; 254
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	24 17       	cp	r18, r20
    141e:	35 07       	cpc	r19, r21
    1420:	48 f0       	brcs	.+18     	; 0x1434 <malloc+0x120>
    1422:	4e 0f       	add	r20, r30
    1424:	5f 1f       	adc	r21, r31
    1426:	50 93 7f 01 	sts	0x017F, r21	; 0x80017f <__brkval+0x1>
    142a:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <__brkval>
    142e:	81 93       	st	Z+, r24
    1430:	91 93       	st	Z+, r25
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <malloc+0x124>
    1434:	e0 e0       	ldi	r30, 0x00	; 0
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	cf 01       	movw	r24, r30
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <free>:
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	09 f4       	brne	.+2      	; 0x144e <free+0xa>
    144c:	81 c0       	rjmp	.+258    	; 0x1550 <free+0x10c>
    144e:	fc 01       	movw	r30, r24
    1450:	32 97       	sbiw	r30, 0x02	; 2
    1452:	13 82       	std	Z+3, r1	; 0x03
    1454:	12 82       	std	Z+2, r1	; 0x02
    1456:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <__flp>
    145a:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <__flp+0x1>
    145e:	10 97       	sbiw	r26, 0x00	; 0
    1460:	81 f4       	brne	.+32     	; 0x1482 <free+0x3e>
    1462:	20 81       	ld	r18, Z
    1464:	31 81       	ldd	r19, Z+1	; 0x01
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    146e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	51 f5       	brne	.+84     	; 0x14cc <free+0x88>
    1478:	f0 93 7f 01 	sts	0x017F, r31	; 0x80017f <__brkval+0x1>
    147c:	e0 93 7e 01 	sts	0x017E, r30	; 0x80017e <__brkval>
    1480:	67 c0       	rjmp	.+206    	; 0x1550 <free+0x10c>
    1482:	ed 01       	movw	r28, r26
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	ce 17       	cp	r28, r30
    148a:	df 07       	cpc	r29, r31
    148c:	40 f4       	brcc	.+16     	; 0x149e <free+0x5a>
    148e:	4a 81       	ldd	r20, Y+2	; 0x02
    1490:	5b 81       	ldd	r21, Y+3	; 0x03
    1492:	9e 01       	movw	r18, r28
    1494:	41 15       	cp	r20, r1
    1496:	51 05       	cpc	r21, r1
    1498:	f1 f0       	breq	.+60     	; 0x14d6 <free+0x92>
    149a:	ea 01       	movw	r28, r20
    149c:	f5 cf       	rjmp	.-22     	; 0x1488 <free+0x44>
    149e:	d3 83       	std	Z+3, r29	; 0x03
    14a0:	c2 83       	std	Z+2, r28	; 0x02
    14a2:	40 81       	ld	r20, Z
    14a4:	51 81       	ldd	r21, Z+1	; 0x01
    14a6:	84 0f       	add	r24, r20
    14a8:	95 1f       	adc	r25, r21
    14aa:	c8 17       	cp	r28, r24
    14ac:	d9 07       	cpc	r29, r25
    14ae:	59 f4       	brne	.+22     	; 0x14c6 <free+0x82>
    14b0:	88 81       	ld	r24, Y
    14b2:	99 81       	ldd	r25, Y+1	; 0x01
    14b4:	84 0f       	add	r24, r20
    14b6:	95 1f       	adc	r25, r21
    14b8:	02 96       	adiw	r24, 0x02	; 2
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	93 83       	std	Z+3, r25	; 0x03
    14c4:	82 83       	std	Z+2, r24	; 0x02
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <free+0x92>
    14cc:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <__flp+0x1>
    14d0:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <__flp>
    14d4:	3d c0       	rjmp	.+122    	; 0x1550 <free+0x10c>
    14d6:	e9 01       	movw	r28, r18
    14d8:	fb 83       	std	Y+3, r31	; 0x03
    14da:	ea 83       	std	Y+2, r30	; 0x02
    14dc:	49 91       	ld	r20, Y+
    14de:	59 91       	ld	r21, Y+
    14e0:	c4 0f       	add	r28, r20
    14e2:	d5 1f       	adc	r29, r21
    14e4:	ec 17       	cp	r30, r28
    14e6:	fd 07       	cpc	r31, r29
    14e8:	61 f4       	brne	.+24     	; 0x1502 <free+0xbe>
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	84 0f       	add	r24, r20
    14f0:	95 1f       	adc	r25, r21
    14f2:	02 96       	adiw	r24, 0x02	; 2
    14f4:	e9 01       	movw	r28, r18
    14f6:	99 83       	std	Y+1, r25	; 0x01
    14f8:	88 83       	st	Y, r24
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	9b 83       	std	Y+3, r25	; 0x03
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	e0 e0       	ldi	r30, 0x00	; 0
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	8d 91       	ld	r24, X+
    150a:	9c 91       	ld	r25, X
    150c:	13 97       	sbiw	r26, 0x03	; 3
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	19 f0       	breq	.+6      	; 0x1518 <free+0xd4>
    1512:	fd 01       	movw	r30, r26
    1514:	dc 01       	movw	r26, r24
    1516:	f7 cf       	rjmp	.-18     	; 0x1506 <free+0xc2>
    1518:	8d 91       	ld	r24, X+
    151a:	9c 91       	ld	r25, X
    151c:	11 97       	sbiw	r26, 0x01	; 1
    151e:	9d 01       	movw	r18, r26
    1520:	2e 5f       	subi	r18, 0xFE	; 254
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    152c:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    1530:	28 17       	cp	r18, r24
    1532:	39 07       	cpc	r19, r25
    1534:	69 f4       	brne	.+26     	; 0x1550 <free+0x10c>
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	29 f4       	brne	.+10     	; 0x1544 <free+0x100>
    153a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <__flp+0x1>
    153e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__flp>
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <free+0x104>
    1544:	13 82       	std	Z+3, r1	; 0x03
    1546:	12 82       	std	Z+2, r1	; 0x02
    1548:	b0 93 7f 01 	sts	0x017F, r27	; 0x80017f <__brkval+0x1>
    154c:	a0 93 7e 01 	sts	0x017E, r26	; 0x80017e <__brkval>
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <__do_global_dtors>:
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	c8 e7       	ldi	r28, 0x78	; 120
    155a:	d0 e0       	ldi	r29, 0x00	; 0
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <__do_global_dtors+0x10>
    155e:	fe 01       	movw	r30, r28
    1560:	0e 94 56 09 	call	0x12ac	; 0x12ac <__tablejump2__>
    1564:	21 96       	adiw	r28, 0x01	; 1
    1566:	c9 37       	cpi	r28, 0x79	; 121
    1568:	d1 07       	cpc	r29, r17
    156a:	c9 f7       	brne	.-14     	; 0x155e <__do_global_dtors+0x8>
    156c:	f8 94       	cli

0000156e <__stop_program>:
    156e:	ff cf       	rjmp	.-2      	; 0x156e <__stop_program>
