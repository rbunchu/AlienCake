
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000d16  00000daa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800154  00800154  00000dfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a850  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ca  00000000  00000000  0000ba58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002201  00000000  00000000  0000dc22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  0000fe24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002646  00000000  00000000  00010810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a58  00000000  00000000  00012e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  000168ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_3>
  10:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_3>
  14:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_18>
  4c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	c8 00       	.word	0x00c8	; ????
  c4:	cd 02       	muls	r28, r29

000000c6 <__ctors_end>:
  c6:	d6 00       	.word	0x00d6	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 e1       	ldi	r30, 0x16	; 22
  dc:	fd e0       	ldi	r31, 0x0D	; 13
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 35       	cpi	r26, 0x54	; 84
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a4 e5       	ldi	r26, 0x54	; 84
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a4 34       	cpi	r26, 0x44	; 68
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <main>
 114:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 11c:	26 e0       	ldi	r18, 0x06	; 6
 11e:	40 e8       	ldi	r20, 0x80	; 128
 120:	55 e2       	ldi	r21, 0x25	; 37
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8a e5       	ldi	r24, 0x5A	; 90
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN14HardwareSerial5beginEmh>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);

void setup() {
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	71 e0       	ldi	r23, 0x01	; 1
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN5Print7printlnEPKc>
	#endif
	// put your setup code here, to run once:

	led.TurnOff();
 13a:	88 e5       	ldi	r24, 0x58	; 88
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN10LedBlinker7TurnOffEv>

00000142 <loop>:
}

void loop() {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	#ifdef DEBUG
		Serial.println("Distance detector on");
 146:	60 e2       	ldi	r22, 0x20	; 32
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	8a e5       	ldi	r24, 0x5A	; 90
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN5Print7printlnEPKc>
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
 152:	84 e5       	ldi	r24, 0x54	; 84
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12LengthSensor7MeasureEv>
 15a:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		Serial.println(distance);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	bc 01       	movw	r22, r24
 162:	8a e5       	ldi	r24, 0x5A	; 90
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN5Print7printlnEii>
	#endif
		
	if(distance > 0)
 16a:	1c 16       	cp	r1, r28
 16c:	1d 06       	cpc	r1, r29
 16e:	54 f4       	brge	.+20     	; 0x184 <loop+0x42>
	{
		led.TurnOn();
 170:	88 e5       	ldi	r24, 0x58	; 88
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN10LedBlinker6TurnOnEv>
		delay(2000);
 178:	60 ed       	ldi	r22, 0xD0	; 208
 17a:	77 e0       	ldi	r23, 0x07	; 7
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 7f 04 	call	0x8fe	; 0x8fe <delay>
	}
	
	led.TurnOff();
 184:	88 e5       	ldi	r24, 0x58	; 88
 186:	91 e0       	ldi	r25, 0x01	; 1
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
	{
		led.TurnOn();
		delay(2000);
	}
	
	led.TurnOff();
 18c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN10LedBlinker7TurnOffEv>

00000190 <_GLOBAL__sub_I_led>:
#define TRIG_PIN 8
#define ECHO_PIN 9

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	88 e5       	ldi	r24, 0x58	; 88
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
 19c:	48 e0       	ldi	r20, 0x08	; 8
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	69 e0       	ldi	r22, 0x09	; 9
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	84 e5       	ldi	r24, 0x54	; 84
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_ZN12LengthSensorC1Eii>

000001ac <_GLOBAL__sub_D_led>:
#define TRIG_PIN 8
#define ECHO_PIN 9

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 1ac:	88 e5       	ldi	r24, 0x58	; 88
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_ZN10LedBlinkerD1Ev>

000001b4 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
 1b4:	fc 01       	movw	r30, r24
 1b6:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
 1b8:	60 83       	st	Z, r22
 1ba:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <pinMode>

000001c2 <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
 1c2:	08 95       	ret

000001c4 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <digitalWrite>

000001ce <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <digitalWrite>

000001d8 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
 1e0:	68 83       	st	Y, r22
 1e2:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
 1e4:	5b 83       	std	Y+3, r21	; 0x03
 1e6:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 1f 05 	call	0xa3e	; 0xa3e <pinMode>
	pinMode(m_trigPin, OUTPUT);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
 1f6:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <pinMode>

000001fa <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
	delay(10);
 208:	6a e0       	ldi	r22, 0x0A	; 10
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7f 04 	call	0x8fe	; 0x8fe <delay>
	digitalWrite(m_echoPin, LOW);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	88 81       	ld	r24, Y
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delay(10);
	digitalWrite(m_echoPin, LOW);
 21c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <digitalWrite>

00000220 <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8c 01       	movw	r16, r24
	  Ping();
 22a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  if(digitalRead(m_echoPin) != HIGH)
 22e:	f8 01       	movw	r30, r16
 230:	80 81       	ld	r24, Z
 232:	0e 94 8a 05 	call	0xb14	; 0xb14 <digitalRead>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	e1 f4       	brne	.+56     	; 0x272 <_ZN12LengthSensor7MeasureEv+0x52>
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d0 e0       	ldi	r29, 0x00	; 0
	  {
		  return -1;
	  }
	  
	  int time = 0;
	  while(digitalRead(m_echoPin) != LOW) {
 23e:	f8 01       	movw	r30, r16
 240:	80 81       	ld	r24, Z
 242:	0e 94 8a 05 	call	0xb14	; 0xb14 <digitalRead>
 246:	89 2b       	or	r24, r25
 248:	41 f0       	breq	.+16     	; 0x25a <_ZN12LengthSensor7MeasureEv+0x3a>
		  time++;
 24a:	21 96       	adiw	r28, 0x01	; 1
		  delay(1);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7f 04 	call	0x8fe	; 0x8fe <delay>
	  {
		  return -1;
	  }
	  
	  int time = 0;
	  while(digitalRead(m_echoPin) != LOW) {
 258:	f2 cf       	rjmp	.-28     	; 0x23e <_ZN12LengthSensor7MeasureEv+0x1e>
		  time++;
		  delay(1);
	  }
	  
	  return (time * 34) / 2000;
 25a:	22 e2       	ldi	r18, 0x22	; 34
 25c:	2c 9f       	mul	r18, r28
 25e:	c0 01       	movw	r24, r0
 260:	2d 9f       	mul	r18, r29
 262:	90 0d       	add	r25, r0
 264:	11 24       	eor	r1, r1
 266:	60 ed       	ldi	r22, 0xD0	; 208
 268:	77 e0       	ldi	r23, 0x07	; 7
 26a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__divmodhi4>
 26e:	cb 01       	movw	r24, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <_ZN12LengthSensor7MeasureEv+0x56>
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  if(digitalRead(m_echoPin) != HIGH)
	  {
		  return -1;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	9f ef       	ldi	r25, 0xFF	; 255
		  time++;
		  delay(1);
	  }
	  
	  return (time * 34) / 2000;
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 280:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 282:	91 8d       	ldd	r25, Z+25	; 0x19
 284:	22 8d       	ldd	r18, Z+26	; 0x1a
 286:	89 2f       	mov	r24, r25
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 5c       	subi	r24, 0xC0	; 192
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	82 1b       	sub	r24, r18
 290:	91 09       	sbc	r25, r1
}
 292:	8f 73       	andi	r24, 0x3F	; 63
 294:	99 27       	eor	r25, r25
 296:	08 95       	ret

00000298 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 298:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 29a:	91 8d       	ldd	r25, Z+25	; 0x19
 29c:	82 8d       	ldd	r24, Z+26	; 0x1a
 29e:	98 17       	cp	r25, r24
 2a0:	31 f0       	breq	.+12     	; 0x2ae <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2a2:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a4:	e8 0f       	add	r30, r24
 2a6:	f1 1d       	adc	r31, r1
 2a8:	85 8d       	ldd	r24, Z+29	; 0x1d
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2b2:	08 95       	ret

000002b4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2b4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2b6:	91 8d       	ldd	r25, Z+25	; 0x19
 2b8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ba:	98 17       	cp	r25, r24
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2be:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c0:	df 01       	movw	r26, r30
 2c2:	a8 0f       	add	r26, r24
 2c4:	b1 1d       	adc	r27, r1
 2c6:	5d 96       	adiw	r26, 0x1d	; 29
 2c8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2ca:	92 8d       	ldd	r25, Z+26	; 0x1a
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	9f 73       	andi	r25, 0x3F	; 63
 2d0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2da:	08 95       	ret

000002dc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 2dc:	83 ec       	ldi	r24, 0xC3	; 195
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	89 2b       	or	r24, r25
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <_Z14serialEventRunv+0x1a>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	89 2b       	or	r24, r25
 2ea:	29 f0       	breq	.+10     	; 0x2f6 <_Z14serialEventRunv+0x1a>
 2ec:	0e 94 c3 02 	call	0x586	; 0x586 <_Z17Serial0_availablev>
 2f0:	81 11       	cpse	r24, r1
 2f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 2f6:	08 95       	ret

000002f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 2f8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 2fa:	84 8d       	ldd	r24, Z+28	; 0x1c
 2fc:	df 01       	movw	r26, r30
 2fe:	a8 0f       	add	r26, r24
 300:	b1 1d       	adc	r27, r1
 302:	a3 5a       	subi	r26, 0xA3	; 163
 304:	bf 4f       	sbci	r27, 0xFF	; 255
 306:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 308:	84 8d       	ldd	r24, Z+28	; 0x1c
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	8f 73       	andi	r24, 0x3F	; 63
 310:	99 27       	eor	r25, r25
 312:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 314:	a6 89       	ldd	r26, Z+22	; 0x16
 316:	b7 89       	ldd	r27, Z+23	; 0x17
 318:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 31a:	a0 89       	ldd	r26, Z+16	; 0x10
 31c:	b1 89       	ldd	r27, Z+17	; 0x11
 31e:	8c 91       	ld	r24, X
 320:	80 64       	ori	r24, 0x40	; 64
 322:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 324:	93 8d       	ldd	r25, Z+27	; 0x1b
 326:	84 8d       	ldd	r24, Z+28	; 0x1c
 328:	98 13       	cpse	r25, r24
 32a:	06 c0       	rjmp	.+12     	; 0x338 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 32c:	02 88       	ldd	r0, Z+18	; 0x12
 32e:	f3 89       	ldd	r31, Z+19	; 0x13
 330:	e0 2d       	mov	r30, r0
 332:	80 81       	ld	r24, Z
 334:	8f 7d       	andi	r24, 0xDF	; 223
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ec 01       	movw	r28, r24
  _written = true;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 34c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 34e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 350:	98 13       	cpse	r25, r24
 352:	05 c0       	rjmp	.+10     	; 0x35e <_ZN14HardwareSerial5writeEh+0x24>
 354:	e8 89       	ldd	r30, Y+16	; 0x10
 356:	f9 89       	ldd	r31, Y+17	; 0x11
 358:	80 81       	ld	r24, Z
 35a:	85 fd       	sbrc	r24, 5
 35c:	24 c0       	rjmp	.+72     	; 0x3a6 <_ZN14HardwareSerial5writeEh+0x6c>
 35e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 360:	0b 8d       	ldd	r16, Y+27	; 0x1b
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	0f 5f       	subi	r16, 0xFF	; 255
 366:	1f 4f       	sbci	r17, 0xFF	; 255
 368:	0f 73       	andi	r16, 0x3F	; 63
 36a:	11 27       	eor	r17, r17
 36c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 36e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 370:	e8 12       	cpse	r14, r24
 372:	0c c0       	rjmp	.+24     	; 0x38c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	07 fc       	sbrc	r0, 7
 378:	fa cf       	rjmp	.-12     	; 0x36e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 37a:	e8 89       	ldd	r30, Y+16	; 0x10
 37c:	f9 89       	ldd	r31, Y+17	; 0x11
 37e:	80 81       	ld	r24, Z
 380:	85 ff       	sbrs	r24, 5
 382:	f5 cf       	rjmp	.-22     	; 0x36e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 384:	ce 01       	movw	r24, r28
 386:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 38a:	f1 cf       	rjmp	.-30     	; 0x36e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 38c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 38e:	fe 01       	movw	r30, r28
 390:	e8 0f       	add	r30, r24
 392:	f1 1d       	adc	r31, r1
 394:	e3 5a       	subi	r30, 0xA3	; 163
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 39a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 39c:	ea 89       	ldd	r30, Y+18	; 0x12
 39e:	fb 89       	ldd	r31, Y+19	; 0x13
 3a0:	80 81       	ld	r24, Z
 3a2:	80 62       	ori	r24, 0x20	; 32
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3a6:	ee 89       	ldd	r30, Y+22	; 0x16
 3a8:	ff 89       	ldd	r31, Y+23	; 0x17
 3aa:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 3ac:	e8 89       	ldd	r30, Y+16	; 0x10
 3ae:	f9 89       	ldd	r31, Y+17	; 0x11
 3b0:	80 81       	ld	r24, Z
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	08 95       	ret

000003c8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3ce:	88 8d       	ldd	r24, Y+24	; 0x18
 3d0:	88 23       	and	r24, r24
 3d2:	c9 f0       	breq	.+50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3d4:	ea 89       	ldd	r30, Y+18	; 0x12
 3d6:	fb 89       	ldd	r31, Y+19	; 0x13
 3d8:	80 81       	ld	r24, Z
 3da:	85 fd       	sbrc	r24, 5
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <_ZN14HardwareSerial5flushEv+0x20>
 3de:	a8 89       	ldd	r26, Y+16	; 0x10
 3e0:	b9 89       	ldd	r27, Y+17	; 0x11
 3e2:	8c 91       	ld	r24, X
 3e4:	86 fd       	sbrc	r24, 6
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	07 fc       	sbrc	r0, 7
 3ec:	f5 cf       	rjmp	.-22     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 3f4:	a8 89       	ldd	r26, Y+16	; 0x10
 3f6:	b9 89       	ldd	r27, Y+17	; 0x11
 3f8:	8c 91       	ld	r24, X
 3fa:	85 ff       	sbrs	r24, 5
 3fc:	ed cf       	rjmp	.-38     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 404:	e7 cf       	rjmp	.-50     	; 0x3d4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
 41c:	6a 01       	movw	r12, r20
 41e:	7b 01       	movw	r14, r22
 420:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 422:	e8 89       	ldd	r30, Y+16	; 0x10
 424:	f9 89       	ldd	r31, Y+17	; 0x11
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 42a:	41 15       	cp	r20, r1
 42c:	51 4e       	sbci	r21, 0xE1	; 225
 42e:	61 05       	cpc	r22, r1
 430:	71 05       	cpc	r23, r1
 432:	b1 f0       	breq	.+44     	; 0x460 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	79 e0       	ldi	r23, 0x09	; 9
 438:	8d e3       	ldi	r24, 0x3D	; 61
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	a7 01       	movw	r20, r14
 43e:	96 01       	movw	r18, r12
 440:	0e 94 42 06 	call	0xc84	; 0xc84 <__udivmodsi4>
 444:	da 01       	movw	r26, r20
 446:	c9 01       	movw	r24, r18
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	a1 09       	sbc	r26, r1
 44c:	b1 09       	sbc	r27, r1
 44e:	b6 95       	lsr	r27
 450:	a7 95       	ror	r26
 452:	97 95       	ror	r25
 454:	87 95       	ror	r24
 456:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 458:	21 15       	cp	r18, r1
 45a:	80 e1       	ldi	r24, 0x10	; 16
 45c:	38 07       	cpc	r19, r24
 45e:	a8 f0       	brcs	.+42     	; 0x48a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 460:	e8 89       	ldd	r30, Y+16	; 0x10
 462:	f9 89       	ldd	r31, Y+17	; 0x11
 464:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 466:	60 e8       	ldi	r22, 0x80	; 128
 468:	74 e8       	ldi	r23, 0x84	; 132
 46a:	8e e1       	ldi	r24, 0x1E	; 30
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	a7 01       	movw	r20, r14
 470:	96 01       	movw	r18, r12
 472:	0e 94 42 06 	call	0xc84	; 0xc84 <__udivmodsi4>
 476:	da 01       	movw	r26, r20
 478:	c9 01       	movw	r24, r18
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	a1 09       	sbc	r26, r1
 47e:	b1 09       	sbc	r27, r1
 480:	b6 95       	lsr	r27
 482:	a7 95       	ror	r26
 484:	97 95       	ror	r25
 486:	87 95       	ror	r24
 488:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 48a:	ec 85       	ldd	r30, Y+12	; 0x0c
 48c:	fd 85       	ldd	r31, Y+13	; 0x0d
 48e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 490:	ee 85       	ldd	r30, Y+14	; 0x0e
 492:	ff 85       	ldd	r31, Y+15	; 0x0f
 494:	20 83       	st	Z, r18

  _written = false;
 496:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 498:	ec 89       	ldd	r30, Y+20	; 0x14
 49a:	fd 89       	ldd	r31, Y+21	; 0x15
 49c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 49e:	ea 89       	ldd	r30, Y+18	; 0x12
 4a0:	fb 89       	ldd	r31, Y+19	; 0x13
 4a2:	80 81       	ld	r24, Z
 4a4:	80 61       	ori	r24, 0x10	; 16
 4a6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 4a8:	ea 89       	ldd	r30, Y+18	; 0x12
 4aa:	fb 89       	ldd	r31, Y+19	; 0x13
 4ac:	80 81       	ld	r24, Z
 4ae:	88 60       	ori	r24, 0x08	; 8
 4b0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 4b2:	ea 89       	ldd	r30, Y+18	; 0x12
 4b4:	fb 89       	ldd	r31, Y+19	; 0x13
 4b6:	80 81       	ld	r24, Z
 4b8:	80 68       	ori	r24, 0x80	; 128
 4ba:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4bc:	ea 89       	ldd	r30, Y+18	; 0x12
 4be:	fb 89       	ldd	r31, Y+19	; 0x13
 4c0:	80 81       	ld	r24, Z
 4c2:	8f 7d       	andi	r24, 0xDF	; 223
 4c4:	80 83       	st	Z, r24
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 4ea:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Serial+0x10>
 4ee:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Serial+0x11>
 4f2:	80 81       	ld	r24, Z
 4f4:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x16>
 4f8:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x17>
 4fc:	82 fd       	sbrc	r24, 2
 4fe:	12 c0       	rjmp	.+36     	; 0x524 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 500:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 502:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Serial+0x19>
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 50a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Serial+0x1a>
 50e:	82 17       	cp	r24, r18
 510:	51 f0       	breq	.+20     	; 0x526 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 512:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <Serial+0x19>
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e6 5a       	subi	r30, 0xA6	; 166
 51a:	fe 4f       	sbci	r31, 0xFE	; 254
 51c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 51e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Serial+0x19>
 522:	01 c0       	rjmp	.+2      	; 0x526 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 524:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 55c:	8a e5       	ldi	r24, 0x5A	; 90
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 586:	8a e5       	ldi	r24, 0x5A	; 90
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 40 01 	call	0x280	; 0x280 <_ZN14HardwareSerial9availableEv>
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	89 2b       	or	r24, r25
 592:	09 f4       	brne	.+2      	; 0x596 <_Z17Serial0_availablev+0x10>
 594:	20 e0       	ldi	r18, 0x00	; 0
}
 596:	82 2f       	mov	r24, r18
 598:	08 95       	ret

0000059a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 59a:	ea e5       	ldi	r30, 0x5A	; 90
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	13 82       	std	Z+3, r1	; 0x03
 5a0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 5a2:	88 ee       	ldi	r24, 0xE8	; 232
 5a4:	93 e0       	ldi	r25, 0x03	; 3
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	84 83       	std	Z+4, r24	; 0x04
 5ac:	95 83       	std	Z+5, r25	; 0x05
 5ae:	a6 83       	std	Z+6, r26	; 0x06
 5b0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5b2:	89 e3       	ldi	r24, 0x39	; 57
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	91 83       	std	Z+1, r25	; 0x01
 5b8:	80 83       	st	Z, r24
 5ba:	85 ec       	ldi	r24, 0xC5	; 197
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	95 87       	std	Z+13, r25	; 0x0d
 5c0:	84 87       	std	Z+12, r24	; 0x0c
 5c2:	84 ec       	ldi	r24, 0xC4	; 196
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	97 87       	std	Z+15, r25	; 0x0f
 5c8:	86 87       	std	Z+14, r24	; 0x0e
 5ca:	80 ec       	ldi	r24, 0xC0	; 192
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	91 8b       	std	Z+17, r25	; 0x11
 5d0:	80 8b       	std	Z+16, r24	; 0x10
 5d2:	81 ec       	ldi	r24, 0xC1	; 193
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	93 8b       	std	Z+19, r25	; 0x13
 5d8:	82 8b       	std	Z+18, r24	; 0x12
 5da:	82 ec       	ldi	r24, 0xC2	; 194
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	95 8b       	std	Z+21, r25	; 0x15
 5e0:	84 8b       	std	Z+20, r24	; 0x14
 5e2:	86 ec       	ldi	r24, 0xC6	; 198
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	97 8b       	std	Z+23, r25	; 0x17
 5e8:	86 8b       	std	Z+22, r24	; 0x16
 5ea:	11 8e       	std	Z+25, r1	; 0x19
 5ec:	12 8e       	std	Z+26, r1	; 0x1a
 5ee:	13 8e       	std	Z+27, r1	; 0x1b
 5f0:	14 8e       	std	Z+28, r1	; 0x1c
 5f2:	08 95       	ret

000005f4 <initVariant>:
 5f4:	08 95       	ret

000005f6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 5f6:	0e 94 bb 04 	call	0x976	; 0x976 <init>

	initVariant();
 5fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 5fe:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 602:	ce e6       	ldi	r28, 0x6E	; 110
 604:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 606:	0e 94 a1 00 	call	0x142	; 0x142 <loop>
		if (serialEventRun) serialEventRun();
 60a:	20 97       	sbiw	r28, 0x00	; 0
 60c:	e1 f3       	breq	.-8      	; 0x606 <main+0x10>
 60e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z14serialEventRunv>
 612:	f9 cf       	rjmp	.-14     	; 0x606 <main+0x10>

00000614 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 614:	cf 92       	push	r12
 616:	df 92       	push	r13
 618:	ef 92       	push	r14
 61a:	ff 92       	push	r15
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	6c 01       	movw	r12, r24
 626:	7a 01       	movw	r14, r20
 628:	8b 01       	movw	r16, r22
 62a:	c0 e0       	ldi	r28, 0x00	; 0
 62c:	d0 e0       	ldi	r29, 0x00	; 0
 62e:	ce 15       	cp	r28, r14
 630:	df 05       	cpc	r29, r15
 632:	81 f0       	breq	.+32     	; 0x654 <_ZN5Print5writeEPKhj+0x40>
 634:	d8 01       	movw	r26, r16
 636:	6d 91       	ld	r22, X+
 638:	8d 01       	movw	r16, r26
 63a:	d6 01       	movw	r26, r12
 63c:	ed 91       	ld	r30, X+
 63e:	fc 91       	ld	r31, X
 640:	01 90       	ld	r0, Z+
 642:	f0 81       	ld	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	c6 01       	movw	r24, r12
 648:	09 95       	icall
 64a:	89 2b       	or	r24, r25
 64c:	11 f0       	breq	.+4      	; 0x652 <_ZN5Print5writeEPKhj+0x3e>
 64e:	21 96       	adiw	r28, 0x01	; 1
 650:	ee cf       	rjmp	.-36     	; 0x62e <_ZN5Print5writeEPKhj+0x1a>
 652:	7e 01       	movw	r14, r28
 654:	c7 01       	movw	r24, r14
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	08 95       	ret

00000668 <_ZN5Print5writeEPKc>:
 668:	61 15       	cp	r22, r1
 66a:	71 05       	cpc	r23, r1
 66c:	79 f0       	breq	.+30     	; 0x68c <_ZN5Print5writeEPKc+0x24>
 66e:	fb 01       	movw	r30, r22
 670:	01 90       	ld	r0, Z+
 672:	00 20       	and	r0, r0
 674:	e9 f7       	brne	.-6      	; 0x670 <_ZN5Print5writeEPKc+0x8>
 676:	31 97       	sbiw	r30, 0x01	; 1
 678:	af 01       	movw	r20, r30
 67a:	46 1b       	sub	r20, r22
 67c:	57 0b       	sbc	r21, r23
 67e:	dc 01       	movw	r26, r24
 680:	ed 91       	ld	r30, X+
 682:	fc 91       	ld	r31, X
 684:	02 80       	ldd	r0, Z+2	; 0x02
 686:	f3 81       	ldd	r31, Z+3	; 0x03
 688:	e0 2d       	mov	r30, r0
 68a:	09 94       	ijmp
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	08 95       	ret

00000692 <_ZN5Print5printEc>:
 692:	dc 01       	movw	r26, r24
 694:	ed 91       	ld	r30, X+
 696:	fc 91       	ld	r31, X
 698:	01 90       	ld	r0, Z+
 69a:	f0 81       	ld	r31, Z
 69c:	e0 2d       	mov	r30, r0
 69e:	09 94       	ijmp

000006a0 <_ZN5Print7printlnEv>:
 6a0:	65 e4       	ldi	r22, 0x45	; 69
 6a2:	71 e0       	ldi	r23, 0x01	; 1
 6a4:	0c 94 34 03 	jmp	0x668	; 0x668 <_ZN5Print5writeEPKc>

000006a8 <_ZN5Print7printlnEPKc>:
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	ec 01       	movw	r28, r24
 6b2:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print5writeEPKc>
 6b6:	8c 01       	movw	r16, r24
 6b8:	ce 01       	movw	r24, r28
 6ba:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN5Print7printlnEv>
 6be:	80 0f       	add	r24, r16
 6c0:	91 1f       	adc	r25, r17
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <_ZN5Print11printNumberEmh>:
 6cc:	8f 92       	push	r8
 6ce:	9f 92       	push	r9
 6d0:	af 92       	push	r10
 6d2:	bf 92       	push	r11
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	a1 97       	sbiw	r28, 0x21	; 33
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	7c 01       	movw	r14, r24
 6f2:	fa 01       	movw	r30, r20
 6f4:	cb 01       	movw	r24, r22
 6f6:	19 a2       	std	Y+33, r1	; 0x21
 6f8:	22 30       	cpi	r18, 0x02	; 2
 6fa:	08 f4       	brcc	.+2      	; 0x6fe <_ZN5Print11printNumberEmh+0x32>
 6fc:	2a e0       	ldi	r18, 0x0A	; 10
 6fe:	8e 01       	movw	r16, r28
 700:	0f 5d       	subi	r16, 0xDF	; 223
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	82 2e       	mov	r8, r18
 706:	91 2c       	mov	r9, r1
 708:	a1 2c       	mov	r10, r1
 70a:	b1 2c       	mov	r11, r1
 70c:	bf 01       	movw	r22, r30
 70e:	a5 01       	movw	r20, r10
 710:	94 01       	movw	r18, r8
 712:	0e 94 42 06 	call	0xc84	; 0xc84 <__udivmodsi4>
 716:	f9 01       	movw	r30, r18
 718:	ca 01       	movw	r24, r20
 71a:	01 50       	subi	r16, 0x01	; 1
 71c:	11 09       	sbc	r17, r1
 71e:	6a 30       	cpi	r22, 0x0A	; 10
 720:	10 f4       	brcc	.+4      	; 0x726 <_ZN5Print11printNumberEmh+0x5a>
 722:	60 5d       	subi	r22, 0xD0	; 208
 724:	01 c0       	rjmp	.+2      	; 0x728 <_ZN5Print11printNumberEmh+0x5c>
 726:	69 5c       	subi	r22, 0xC9	; 201
 728:	d8 01       	movw	r26, r16
 72a:	6c 93       	st	X, r22
 72c:	23 2b       	or	r18, r19
 72e:	24 2b       	or	r18, r20
 730:	25 2b       	or	r18, r21
 732:	61 f7       	brne	.-40     	; 0x70c <_ZN5Print11printNumberEmh+0x40>
 734:	b8 01       	movw	r22, r16
 736:	c7 01       	movw	r24, r14
 738:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print5writeEPKc>
 73c:	a1 96       	adiw	r28, 0x21	; 33
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	ff 90       	pop	r15
 752:	ef 90       	pop	r14
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	08 95       	ret

0000075e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 75e:	cf 92       	push	r12
 760:	df 92       	push	r13
 762:	ef 92       	push	r14
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
  if (base == 0) {
 76e:	21 15       	cp	r18, r1
 770:	31 05       	cpc	r19, r1
 772:	81 f4       	brne	.+32     	; 0x794 <_ZN5Print5printEli+0x36>
    return write(n);
 774:	dc 01       	movw	r26, r24
 776:	ed 91       	ld	r30, X+
 778:	fc 91       	ld	r31, X
 77a:	01 90       	ld	r0, Z+
 77c:	f0 81       	ld	r31, Z
 77e:	e0 2d       	mov	r30, r0
 780:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	df 90       	pop	r13
 790:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 792:	09 94       	ijmp
  } else if (base == 10) {
 794:	2a 30       	cpi	r18, 0x0A	; 10
 796:	31 05       	cpc	r19, r1
 798:	01 f5       	brne	.+64     	; 0x7da <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 79a:	77 ff       	sbrs	r23, 7
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <_ZN5Print5printEli+0x7a>
 79e:	6a 01       	movw	r12, r20
 7a0:	7b 01       	movw	r14, r22
 7a2:	ec 01       	movw	r28, r24
      int t = print('-');
 7a4:	6d e2       	ldi	r22, 0x2D	; 45
 7a6:	0e 94 49 03 	call	0x692	; 0x692 <_ZN5Print5printEc>
 7aa:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 7ac:	44 27       	eor	r20, r20
 7ae:	55 27       	eor	r21, r21
 7b0:	ba 01       	movw	r22, r20
 7b2:	4c 19       	sub	r20, r12
 7b4:	5d 09       	sbc	r21, r13
 7b6:	6e 09       	sbc	r22, r14
 7b8:	7f 09       	sbc	r23, r15
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	ce 01       	movw	r24, r28
 7be:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN5Print11printNumberEmh>
 7c2:	80 0f       	add	r24, r16
 7c4:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 7d8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	df 90       	pop	r13
 7e8:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 7ea:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_ZN5Print11printNumberEmh>

000007ee <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 7ee:	9a 01       	movw	r18, r20
  return print((long) n, base);
 7f0:	ab 01       	movw	r20, r22
 7f2:	77 0f       	add	r23, r23
 7f4:	66 0b       	sbc	r22, r22
 7f6:	77 0b       	sbc	r23, r23
 7f8:	0c 94 af 03 	jmp	0x75e	; 0x75e <_ZN5Print5printEli>

000007fc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 7fc:	0f 93       	push	r16
 7fe:	1f 93       	push	r17
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 806:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN5Print5printEii>
 80a:	8c 01       	movw	r16, r24
  n += println();
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_ZN5Print7printlnEv>
  return n;
}
 812:	80 0f       	add	r24, r16
 814:	91 1f       	adc	r25, r17
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	2f 93       	push	r18
 82c:	3f 93       	push	r19
 82e:	8f 93       	push	r24
 830:	9f 93       	push	r25
 832:	af 93       	push	r26
 834:	bf 93       	push	r27
 836:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <timer0_millis>
 83a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <timer0_millis+0x1>
 83e:	a0 91 fa 01 	lds	r26, 0x01FA	; 0x8001fa <timer0_millis+0x2>
 842:	b0 91 fb 01 	lds	r27, 0x01FB	; 0x8001fb <timer0_millis+0x3>
 846:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <timer0_fract>
 84a:	23 e0       	ldi	r18, 0x03	; 3
 84c:	23 0f       	add	r18, r19
 84e:	2d 37       	cpi	r18, 0x7D	; 125
 850:	20 f4       	brcc	.+8      	; 0x85a <__vector_16+0x3a>
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	a1 1d       	adc	r26, r1
 856:	b1 1d       	adc	r27, r1
 858:	05 c0       	rjmp	.+10     	; 0x864 <__vector_16+0x44>
 85a:	26 e8       	ldi	r18, 0x86	; 134
 85c:	23 0f       	add	r18, r19
 85e:	02 96       	adiw	r24, 0x02	; 2
 860:	a1 1d       	adc	r26, r1
 862:	b1 1d       	adc	r27, r1
 864:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <timer0_fract>
 868:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <timer0_millis>
 86c:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <timer0_millis+0x1>
 870:	a0 93 fa 01 	sts	0x01FA, r26	; 0x8001fa <timer0_millis+0x2>
 874:	b0 93 fb 01 	sts	0x01FB, r27	; 0x8001fb <timer0_millis+0x3>
 878:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timer0_overflow_count>
 87c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timer0_overflow_count+0x1>
 880:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timer0_overflow_count+0x2>
 884:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timer0_overflow_count+0x3>
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	a1 1d       	adc	r26, r1
 88c:	b1 1d       	adc	r27, r1
 88e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <timer0_overflow_count>
 892:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <timer0_overflow_count+0x1>
 896:	a0 93 fe 01 	sts	0x01FE, r26	; 0x8001fe <timer0_overflow_count+0x2>
 89a:	b0 93 ff 01 	sts	0x01FF, r27	; 0x8001ff <timer0_overflow_count+0x3>
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	3f 91       	pop	r19
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <micros>:
 8b4:	3f b7       	in	r19, 0x3f	; 63
 8b6:	f8 94       	cli
 8b8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timer0_overflow_count>
 8bc:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timer0_overflow_count+0x1>
 8c0:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timer0_overflow_count+0x2>
 8c4:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timer0_overflow_count+0x3>
 8c8:	26 b5       	in	r18, 0x26	; 38
 8ca:	a8 9b       	sbis	0x15, 0	; 21
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <micros+0x24>
 8ce:	2f 3f       	cpi	r18, 0xFF	; 255
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <micros+0x24>
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	3f bf       	out	0x3f, r19	; 63
 8da:	ba 2f       	mov	r27, r26
 8dc:	a9 2f       	mov	r26, r25
 8de:	98 2f       	mov	r25, r24
 8e0:	88 27       	eor	r24, r24
 8e2:	82 0f       	add	r24, r18
 8e4:	91 1d       	adc	r25, r1
 8e6:	a1 1d       	adc	r26, r1
 8e8:	b1 1d       	adc	r27, r1
 8ea:	bc 01       	movw	r22, r24
 8ec:	cd 01       	movw	r24, r26
 8ee:	42 e0       	ldi	r20, 0x02	; 2
 8f0:	66 0f       	add	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	4a 95       	dec	r20
 8fa:	d1 f7       	brne	.-12     	; 0x8f0 <micros+0x3c>
 8fc:	08 95       	ret

000008fe <delay>:
 8fe:	8f 92       	push	r8
 900:	9f 92       	push	r9
 902:	af 92       	push	r10
 904:	bf 92       	push	r11
 906:	cf 92       	push	r12
 908:	df 92       	push	r13
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	6b 01       	movw	r12, r22
 910:	7c 01       	movw	r14, r24
 912:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <micros>
 916:	4b 01       	movw	r8, r22
 918:	5c 01       	movw	r10, r24
 91a:	c1 14       	cp	r12, r1
 91c:	d1 04       	cpc	r13, r1
 91e:	e1 04       	cpc	r14, r1
 920:	f1 04       	cpc	r15, r1
 922:	01 f1       	breq	.+64     	; 0x964 <__stack+0x65>
 924:	0e 94 2d 06 	call	0xc5a	; 0xc5a <yield>
 928:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <micros>
 92c:	dc 01       	movw	r26, r24
 92e:	cb 01       	movw	r24, r22
 930:	88 19       	sub	r24, r8
 932:	99 09       	sbc	r25, r9
 934:	aa 09       	sbc	r26, r10
 936:	bb 09       	sbc	r27, r11
 938:	88 3e       	cpi	r24, 0xE8	; 232
 93a:	93 40       	sbci	r25, 0x03	; 3
 93c:	a1 05       	cpc	r26, r1
 93e:	b1 05       	cpc	r27, r1
 940:	60 f3       	brcs	.-40     	; 0x91a <__stack+0x1b>
 942:	21 e0       	ldi	r18, 0x01	; 1
 944:	c2 1a       	sub	r12, r18
 946:	d1 08       	sbc	r13, r1
 948:	e1 08       	sbc	r14, r1
 94a:	f1 08       	sbc	r15, r1
 94c:	88 ee       	ldi	r24, 0xE8	; 232
 94e:	88 0e       	add	r8, r24
 950:	83 e0       	ldi	r24, 0x03	; 3
 952:	98 1e       	adc	r9, r24
 954:	a1 1c       	adc	r10, r1
 956:	b1 1c       	adc	r11, r1
 958:	c1 14       	cp	r12, r1
 95a:	d1 04       	cpc	r13, r1
 95c:	e1 04       	cpc	r14, r1
 95e:	f1 04       	cpc	r15, r1
 960:	19 f7       	brne	.-58     	; 0x928 <__stack+0x29>
 962:	db cf       	rjmp	.-74     	; 0x91a <__stack+0x1b>
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	df 90       	pop	r13
 96a:	cf 90       	pop	r12
 96c:	bf 90       	pop	r11
 96e:	af 90       	pop	r10
 970:	9f 90       	pop	r9
 972:	8f 90       	pop	r8
 974:	08 95       	ret

00000976 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 976:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 978:	84 b5       	in	r24, 0x24	; 36
 97a:	82 60       	ori	r24, 0x02	; 2
 97c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 97e:	84 b5       	in	r24, 0x24	; 36
 980:	81 60       	ori	r24, 0x01	; 1
 982:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 984:	85 b5       	in	r24, 0x25	; 37
 986:	82 60       	ori	r24, 0x02	; 2
 988:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 98a:	85 b5       	in	r24, 0x25	; 37
 98c:	81 60       	ori	r24, 0x01	; 1
 98e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 990:	ee e6       	ldi	r30, 0x6E	; 110
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	81 60       	ori	r24, 0x01	; 1
 998:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 99a:	e1 e8       	ldi	r30, 0x81	; 129
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9a0:	80 81       	ld	r24, Z
 9a2:	82 60       	ori	r24, 0x02	; 2
 9a4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9a6:	80 81       	ld	r24, Z
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9ac:	e0 e8       	ldi	r30, 0x80	; 128
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9b6:	e1 eb       	ldi	r30, 0xB1	; 177
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	84 60       	ori	r24, 0x04	; 4
 9be:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9c0:	e0 eb       	ldi	r30, 0xB0	; 176
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9ca:	ea e7       	ldi	r30, 0x7A	; 122
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	84 60       	ori	r24, 0x04	; 4
 9d2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9d4:	80 81       	ld	r24, Z
 9d6:	82 60       	ori	r24, 0x02	; 2
 9d8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9da:	80 81       	ld	r24, Z
 9dc:	81 60       	ori	r24, 0x01	; 1
 9de:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9e0:	80 81       	ld	r24, Z
 9e2:	80 68       	ori	r24, 0x80	; 128
 9e4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9e6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9ea:	08 95       	ret

000009ec <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 9ec:	83 30       	cpi	r24, 0x03	; 3
 9ee:	81 f0       	breq	.+32     	; 0xa10 <turnOffPWM+0x24>
 9f0:	28 f4       	brcc	.+10     	; 0x9fc <turnOffPWM+0x10>
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	99 f0       	breq	.+38     	; 0xa1c <turnOffPWM+0x30>
 9f6:	82 30       	cpi	r24, 0x02	; 2
 9f8:	a1 f0       	breq	.+40     	; 0xa22 <turnOffPWM+0x36>
 9fa:	08 95       	ret
 9fc:	87 30       	cpi	r24, 0x07	; 7
 9fe:	a9 f0       	breq	.+42     	; 0xa2a <turnOffPWM+0x3e>
 a00:	88 30       	cpi	r24, 0x08	; 8
 a02:	b9 f0       	breq	.+46     	; 0xa32 <turnOffPWM+0x46>
 a04:	84 30       	cpi	r24, 0x04	; 4
 a06:	d1 f4       	brne	.+52     	; 0xa3c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a08:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a0c:	8f 7d       	andi	r24, 0xDF	; 223
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a10:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a14:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a16:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a1a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a1c:	84 b5       	in	r24, 0x24	; 36
 a1e:	8f 77       	andi	r24, 0x7F	; 127
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a22:	84 b5       	in	r24, 0x24	; 36
 a24:	8f 7d       	andi	r24, 0xDF	; 223
 a26:	84 bd       	out	0x24, r24	; 36
 a28:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a2a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a2e:	8f 77       	andi	r24, 0x7F	; 127
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a32:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a36:	8f 7d       	andi	r24, 0xDF	; 223
 a38:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a3c:	08 95       	ret

00000a3e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	fc 01       	movw	r30, r24
 a46:	e4 58       	subi	r30, 0x84	; 132
 a48:	ff 4f       	sbci	r31, 0xFF	; 255
 a4a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a4c:	fc 01       	movw	r30, r24
 a4e:	e0 57       	subi	r30, 0x70	; 112
 a50:	ff 4f       	sbci	r31, 0xFF	; 255
 a52:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a54:	88 23       	and	r24, r24
 a56:	61 f1       	breq	.+88     	; 0xab0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	fc 01       	movw	r30, r24
 a60:	e8 54       	subi	r30, 0x48	; 72
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	c5 91       	lpm	r28, Z+
 a66:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a68:	fc 01       	movw	r30, r24
 a6a:	e2 55       	subi	r30, 0x52	; 82
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	a5 91       	lpm	r26, Z+
 a70:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a72:	61 11       	cpse	r22, r1
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a76:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a78:	f8 94       	cli
		*reg &= ~bit;
 a7a:	88 81       	ld	r24, Y
 a7c:	20 95       	com	r18
 a7e:	82 23       	and	r24, r18
 a80:	88 83       	st	Y, r24
		*out &= ~bit;
 a82:	ec 91       	ld	r30, X
 a84:	2e 23       	and	r18, r30
 a86:	0b c0       	rjmp	.+22     	; 0xa9e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a88:	62 30       	cpi	r22, 0x02	; 2
 a8a:	61 f4       	brne	.+24     	; 0xaa4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a8c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a8e:	f8 94       	cli
		*reg &= ~bit;
 a90:	88 81       	ld	r24, Y
 a92:	32 2f       	mov	r19, r18
 a94:	30 95       	com	r19
 a96:	83 23       	and	r24, r19
 a98:	88 83       	st	Y, r24
		*out |= bit;
 a9a:	ec 91       	ld	r30, X
 a9c:	2e 2b       	or	r18, r30
 a9e:	2c 93       	st	X, r18
		SREG = oldSREG;
 aa0:	9f bf       	out	0x3f, r25	; 63
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 aa4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 aa6:	f8 94       	cli
		*reg |= bit;
 aa8:	e8 81       	ld	r30, Y
 aaa:	2e 2b       	or	r18, r30
 aac:	28 83       	st	Y, r18
		SREG = oldSREG;
 aae:	8f bf       	out	0x3f, r24	; 63
	}
}
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 ab6:	1f 93       	push	r17
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 abc:	28 2f       	mov	r18, r24
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	f9 01       	movw	r30, r18
 ac2:	e8 59       	subi	r30, 0x98	; 152
 ac4:	ff 4f       	sbci	r31, 0xFF	; 255
 ac6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 ac8:	f9 01       	movw	r30, r18
 aca:	e4 58       	subi	r30, 0x84	; 132
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ad0:	f9 01       	movw	r30, r18
 ad2:	e0 57       	subi	r30, 0x70	; 112
 ad4:	ff 4f       	sbci	r31, 0xFF	; 255
 ad6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ad8:	cc 23       	and	r28, r28
 ada:	c1 f0       	breq	.+48     	; 0xb0c <digitalWrite+0x56>
 adc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ade:	81 11       	cpse	r24, r1
 ae0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <turnOffPWM>

	out = portOutputRegister(port);
 ae4:	ec 2f       	mov	r30, r28
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	ee 0f       	add	r30, r30
 aea:	ff 1f       	adc	r31, r31
 aec:	e2 55       	subi	r30, 0x52	; 82
 aee:	ff 4f       	sbci	r31, 0xFF	; 255
 af0:	a5 91       	lpm	r26, Z+
 af2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 af4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 af6:	f8 94       	cli

	if (val == LOW) {
 af8:	11 11       	cpse	r17, r1
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <digitalWrite+0x4e>
		*out &= ~bit;
 afc:	8c 91       	ld	r24, X
 afe:	d0 95       	com	r29
 b00:	d8 23       	and	r29, r24
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <digitalWrite+0x52>
	} else {
		*out |= bit;
 b04:	ec 91       	ld	r30, X
 b06:	de 2b       	or	r29, r30
 b08:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b0a:	9f bf       	out	0x3f, r25	; 63
}
 b0c:	df 91       	pop	r29
 b0e:	cf 91       	pop	r28
 b10:	1f 91       	pop	r17
 b12:	08 95       	ret

00000b14 <digitalRead>:

int digitalRead(uint8_t pin)
{
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b18:	28 2f       	mov	r18, r24
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	f9 01       	movw	r30, r18
 b1e:	e8 59       	subi	r30, 0x98	; 152
 b20:	ff 4f       	sbci	r31, 0xFF	; 255
 b22:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b24:	f9 01       	movw	r30, r18
 b26:	e4 58       	subi	r30, 0x84	; 132
 b28:	ff 4f       	sbci	r31, 0xFF	; 255
 b2a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b2c:	f9 01       	movw	r30, r18
 b2e:	e0 57       	subi	r30, 0x70	; 112
 b30:	ff 4f       	sbci	r31, 0xFF	; 255
 b32:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 b34:	cc 23       	and	r28, r28
 b36:	91 f0       	breq	.+36     	; 0xb5c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b38:	81 11       	cpse	r24, r1
 b3a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b3e:	ec 2f       	mov	r30, r28
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	ee 0f       	add	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	ec 55       	subi	r30, 0x5C	; 92
 b48:	ff 4f       	sbci	r31, 0xFF	; 255
 b4a:	a5 91       	lpm	r26, Z+
 b4c:	b4 91       	lpm	r27, Z
 b4e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b50:	ed 23       	and	r30, r29
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	21 f4       	brne	.+8      	; 0xb60 <digitalRead+0x4c>
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <digitalRead+0x4c>
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	08 95       	ret

00000b66 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 b66:	1f 92       	push	r1
 b68:	0f 92       	push	r0
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	0f 92       	push	r0
 b6e:	11 24       	eor	r1, r1
 b70:	2f 93       	push	r18
 b72:	3f 93       	push	r19
 b74:	4f 93       	push	r20
 b76:	5f 93       	push	r21
 b78:	6f 93       	push	r22
 b7a:	7f 93       	push	r23
 b7c:	8f 93       	push	r24
 b7e:	9f 93       	push	r25
 b80:	af 93       	push	r26
 b82:	bf 93       	push	r27
 b84:	ef 93       	push	r30
 b86:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 b88:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <_ZN14SoftwareSerial13active_objectE>
 b8c:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <_ZN14SoftwareSerial13active_objectE+0x1>
 b90:	30 97       	sbiw	r30, 0x00	; 0
 b92:	09 f4       	brne	.+2      	; 0xb96 <__vector_3+0x30>
 b94:	51 c0       	rjmp	.+162    	; 0xc38 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 b96:	96 8d       	ldd	r25, Z+30	; 0x1e
 b98:	a6 85       	ldd	r26, Z+14	; 0x0e
 b9a:	b7 85       	ldd	r27, Z+15	; 0x0f
 b9c:	85 85       	ldd	r24, Z+13	; 0x0d
 b9e:	91 ff       	sbrs	r25, 1
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 ba2:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 ba4:	89 23       	and	r24, r25
 ba6:	29 f4       	brne	.+10     	; 0xbb2 <__vector_3+0x4c>
 ba8:	47 c0       	rjmp	.+142    	; 0xc38 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 baa:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 bac:	89 23       	and	r24, r25
 bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_3+0x4c>
 bb0:	43 c0       	rjmp	.+134    	; 0xc38 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 bb2:	a3 89       	ldd	r26, Z+19	; 0x13
 bb4:	b4 89       	ldd	r27, Z+20	; 0x14
 bb6:	9c 91       	ld	r25, X
 bb8:	85 89       	ldd	r24, Z+21	; 0x15
 bba:	80 95       	com	r24
 bbc:	89 23       	and	r24, r25
 bbe:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 bc0:	86 89       	ldd	r24, Z+22	; 0x16
 bc2:	97 89       	ldd	r25, Z+23	; 0x17
 bc4:	01 97       	sbiw	r24, 0x01	; 1
 bc6:	f1 f7       	brne	.-4      	; 0xbc4 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 bc8:	60 8d       	ldd	r22, Z+24	; 0x18
 bca:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 bcc:	a6 85       	ldd	r26, Z+14	; 0x0e
 bce:	b7 85       	ldd	r27, Z+15	; 0x0f
 bd0:	55 85       	ldd	r21, Z+13	; 0x0d
 bd2:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	cb 01       	movw	r24, r22
 bd8:	01 97       	sbiw	r24, 0x01	; 1
 bda:	f1 f7       	brne	.-4      	; 0xbd8 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 bdc:	82 2f       	mov	r24, r18
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	95 95       	asr	r25
 be2:	87 95       	ror	r24
 be4:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 be6:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 be8:	45 23       	and	r20, r21
 bea:	09 f0       	breq	.+2      	; 0xbee <__vector_3+0x88>
        d |= 0x80;
 bec:	20 68       	ori	r18, 0x80	; 128
 bee:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 bf0:	91 f7       	brne	.-28     	; 0xbd6 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 bf2:	86 8d       	ldd	r24, Z+30	; 0x1e
 bf4:	81 fd       	sbrc	r24, 1
      d = ~d;
 bf6:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 bf8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	01 96       	adiw	r24, 0x01	; 1
 c00:	8f 73       	andi	r24, 0x3F	; 63
 c02:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
 c04:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <_ZN14SoftwareSerial20_receive_buffer_headE>
 c08:	38 17       	cp	r19, r24
 c0a:	49 f0       	breq	.+18     	; 0xc1e <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 c0c:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 c10:	b0 e0       	ldi	r27, 0x00	; 0
 c12:	ae 5f       	subi	r26, 0xFE	; 254
 c14:	bd 4f       	sbci	r27, 0xFD	; 253
 c16:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
 c18:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 c1c:	03 c0       	rjmp	.+6      	; 0xc24 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 c1e:	86 8d       	ldd	r24, Z+30	; 0x1e
 c20:	81 60       	ori	r24, 0x01	; 1
 c22:	86 8f       	std	Z+30, r24	; 0x1e
 c24:	82 8d       	ldd	r24, Z+26	; 0x1a
 c26:	93 8d       	ldd	r25, Z+27	; 0x1b
 c28:	01 97       	sbiw	r24, 0x01	; 1
 c2a:	f1 f7       	brne	.-4      	; 0xc28 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 c2c:	a3 89       	ldd	r26, Z+19	; 0x13
 c2e:	b4 89       	ldd	r27, Z+20	; 0x14
 c30:	9c 91       	ld	r25, X
 c32:	85 89       	ldd	r24, Z+21	; 0x15
 c34:	89 2b       	or	r24, r25
 c36:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 c38:	ff 91       	pop	r31
 c3a:	ef 91       	pop	r30
 c3c:	bf 91       	pop	r27
 c3e:	af 91       	pop	r26
 c40:	9f 91       	pop	r25
 c42:	8f 91       	pop	r24
 c44:	7f 91       	pop	r23
 c46:	6f 91       	pop	r22
 c48:	5f 91       	pop	r21
 c4a:	4f 91       	pop	r20
 c4c:	3f 91       	pop	r19
 c4e:	2f 91       	pop	r18
 c50:	0f 90       	pop	r0
 c52:	0f be       	out	0x3f, r0	; 63
 c54:	0f 90       	pop	r0
 c56:	1f 90       	pop	r1
 c58:	18 95       	reti

00000c5a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 c5a:	08 95       	ret

00000c5c <__divmodhi4>:
 c5c:	97 fb       	bst	r25, 7
 c5e:	07 2e       	mov	r0, r23
 c60:	16 f4       	brtc	.+4      	; 0xc66 <__divmodhi4+0xa>
 c62:	00 94       	com	r0
 c64:	07 d0       	rcall	.+14     	; 0xc74 <__divmodhi4_neg1>
 c66:	77 fd       	sbrc	r23, 7
 c68:	09 d0       	rcall	.+18     	; 0xc7c <__divmodhi4_neg2>
 c6a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__udivmodhi4>
 c6e:	07 fc       	sbrc	r0, 7
 c70:	05 d0       	rcall	.+10     	; 0xc7c <__divmodhi4_neg2>
 c72:	3e f4       	brtc	.+14     	; 0xc82 <__divmodhi4_exit>

00000c74 <__divmodhi4_neg1>:
 c74:	90 95       	com	r25
 c76:	81 95       	neg	r24
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__divmodhi4_neg2>:
 c7c:	70 95       	com	r23
 c7e:	61 95       	neg	r22
 c80:	7f 4f       	sbci	r23, 0xFF	; 255

00000c82 <__divmodhi4_exit>:
 c82:	08 95       	ret

00000c84 <__udivmodsi4>:
 c84:	a1 e2       	ldi	r26, 0x21	; 33
 c86:	1a 2e       	mov	r1, r26
 c88:	aa 1b       	sub	r26, r26
 c8a:	bb 1b       	sub	r27, r27
 c8c:	fd 01       	movw	r30, r26
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <__udivmodsi4_ep>

00000c90 <__udivmodsi4_loop>:
 c90:	aa 1f       	adc	r26, r26
 c92:	bb 1f       	adc	r27, r27
 c94:	ee 1f       	adc	r30, r30
 c96:	ff 1f       	adc	r31, r31
 c98:	a2 17       	cp	r26, r18
 c9a:	b3 07       	cpc	r27, r19
 c9c:	e4 07       	cpc	r30, r20
 c9e:	f5 07       	cpc	r31, r21
 ca0:	20 f0       	brcs	.+8      	; 0xcaa <__udivmodsi4_ep>
 ca2:	a2 1b       	sub	r26, r18
 ca4:	b3 0b       	sbc	r27, r19
 ca6:	e4 0b       	sbc	r30, r20
 ca8:	f5 0b       	sbc	r31, r21

00000caa <__udivmodsi4_ep>:
 caa:	66 1f       	adc	r22, r22
 cac:	77 1f       	adc	r23, r23
 cae:	88 1f       	adc	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	1a 94       	dec	r1
 cb4:	69 f7       	brne	.-38     	; 0xc90 <__udivmodsi4_loop>
 cb6:	60 95       	com	r22
 cb8:	70 95       	com	r23
 cba:	80 95       	com	r24
 cbc:	90 95       	com	r25
 cbe:	9b 01       	movw	r18, r22
 cc0:	ac 01       	movw	r20, r24
 cc2:	bd 01       	movw	r22, r26
 cc4:	cf 01       	movw	r24, r30
 cc6:	08 95       	ret

00000cc8 <__tablejump2__>:
 cc8:	ee 0f       	add	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	05 90       	lpm	r0, Z+
 cce:	f4 91       	lpm	r31, Z
 cd0:	e0 2d       	mov	r30, r0
 cd2:	09 94       	ijmp

00000cd4 <__udivmodhi4>:
 cd4:	aa 1b       	sub	r26, r26
 cd6:	bb 1b       	sub	r27, r27
 cd8:	51 e1       	ldi	r21, 0x11	; 17
 cda:	07 c0       	rjmp	.+14     	; 0xcea <__udivmodhi4_ep>

00000cdc <__udivmodhi4_loop>:
 cdc:	aa 1f       	adc	r26, r26
 cde:	bb 1f       	adc	r27, r27
 ce0:	a6 17       	cp	r26, r22
 ce2:	b7 07       	cpc	r27, r23
 ce4:	10 f0       	brcs	.+4      	; 0xcea <__udivmodhi4_ep>
 ce6:	a6 1b       	sub	r26, r22
 ce8:	b7 0b       	sbc	r27, r23

00000cea <__udivmodhi4_ep>:
 cea:	88 1f       	adc	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	5a 95       	dec	r21
 cf0:	a9 f7       	brne	.-22     	; 0xcdc <__udivmodhi4_loop>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	bc 01       	movw	r22, r24
 cf8:	cd 01       	movw	r24, r26
 cfa:	08 95       	ret

00000cfc <__do_global_dtors>:
 cfc:	10 e0       	ldi	r17, 0x00	; 0
 cfe:	c3 e6       	ldi	r28, 0x63	; 99
 d00:	d0 e0       	ldi	r29, 0x00	; 0
 d02:	04 c0       	rjmp	.+8      	; 0xd0c <__do_global_dtors+0x10>
 d04:	fe 01       	movw	r30, r28
 d06:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__tablejump2__>
 d0a:	21 96       	adiw	r28, 0x01	; 1
 d0c:	c4 36       	cpi	r28, 0x64	; 100
 d0e:	d1 07       	cpc	r29, r17
 d10:	c9 f7       	brne	.-14     	; 0xd04 <__do_global_dtors+0x8>
 d12:	f8 94       	cli

00000d14 <__stop_program>:
 d14:	ff cf       	rjmp	.-2      	; 0xd14 <__stop_program>
