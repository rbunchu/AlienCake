
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000d78  00000e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800154  00800154  00000e60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a925  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002206  00000000  00000000  0000bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000214e  00000000  00000000  0000dd93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000fee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269e  00000000  00000000  000108dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a85  00000000  00000000  00012f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  000169ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_3>
  10:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_3>
  14:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_18>
  4c:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	c8 00       	.word	0x00c8	; ????
  c4:	e2 02       	muls	r30, r18

000000c6 <__ctors_end>:
  c6:	d6 00       	.word	0x00d6	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e8 e7       	ldi	r30, 0x78	; 120
  dc:	fd e0       	ldi	r31, 0x0D	; 13
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 35       	cpi	r26, 0x54	; 84
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a4 e5       	ldi	r26, 0x54	; 84
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a4 34       	cpi	r26, 0x44	; 68
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 10 03 	call	0x620	; 0x620 <main>
 114:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 11c:	26 e0       	ldi	r18, 0x06	; 6
 11e:	40 e8       	ldi	r20, 0x80	; 128
 120:	55 e2       	ldi	r21, 0x25	; 37
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8a e5       	ldi	r24, 0x5A	; 90
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN14HardwareSerial5beginEmh>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);

void setup() {
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	71 e0       	ldi	r23, 0x01	; 1
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN5Print7printlnEPKc>
	#endif
	// put your setup code here, to run once:

	led.TurnOff();
 13a:	88 e5       	ldi	r24, 0x58	; 88
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN10LedBlinker7TurnOffEv>

00000142 <loop>:
}

void loop() {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	#ifdef DEBUG
		Serial.println("Distance detector on");
 146:	60 e2       	ldi	r22, 0x20	; 32
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	8a e5       	ldi	r24, 0x5A	; 90
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN5Print7printlnEPKc>
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
 152:	84 e5       	ldi	r24, 0x54	; 84
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN12LengthSensor7MeasureEv>
 15a:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		Serial.println(distance);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	bc 01       	movw	r22, r24
 162:	8a e5       	ldi	r24, 0x5A	; 90
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 32 04 	call	0x864	; 0x864 <_ZN5Print7printlnEii>
	#endif
		
	if(distance > 0 && distance < 50)
 16a:	21 97       	sbiw	r28, 0x01	; 1
 16c:	e1 97       	sbiw	r28, 0x31	; 49
 16e:	50 f4       	brcc	.+20     	; 0x184 <loop+0x42>
	{
		led.TurnOn();
 170:	88 e5       	ldi	r24, 0x58	; 88
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN10LedBlinker6TurnOnEv>
		delay(2000);
 178:	60 ed       	ldi	r22, 0xD0	; 208
 17a:	77 e0       	ldi	r23, 0x07	; 7
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 b3 04 	call	0x966	; 0x966 <delay>
	}
	
	led.TurnOff();
 184:	88 e5       	ldi	r24, 0x58	; 88
 186:	91 e0       	ldi	r25, 0x01	; 1
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
	{
		led.TurnOn();
		delay(2000);
	}
	
	led.TurnOff();
 18c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN10LedBlinker7TurnOffEv>

00000190 <_GLOBAL__sub_I_led>:
#define TRIG_PIN 6
#define ECHO_PIN 7

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	88 e5       	ldi	r24, 0x58	; 88
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
 19c:	46 e0       	ldi	r20, 0x06	; 6
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	84 e5       	ldi	r24, 0x54	; 84
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_ZN12LengthSensorC1Eii>

000001ac <_GLOBAL__sub_D_led>:
#define TRIG_PIN 6
#define ECHO_PIN 7

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 1ac:	88 e5       	ldi	r24, 0x58	; 88
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_ZN10LedBlinkerD1Ev>

000001b4 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
 1b4:	fc 01       	movw	r30, r24
 1b6:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
 1b8:	60 83       	st	Z, r22
 1ba:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	0c 94 5e 05 	jmp	0xabc	; 0xabc <pinMode>

000001c2 <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
 1c2:	08 95       	ret

000001c4 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <digitalWrite>

000001ce <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <digitalWrite>

000001d8 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
 1e0:	68 83       	st	Y, r22
 1e2:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
 1e4:	5b 83       	std	Y+3, r21	; 0x03
 1e6:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 5e 05 	call	0xabc	; 0xabc <pinMode>
	pinMode(m_trigPin, OUTPUT);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
 1f6:	0c 94 5e 05 	jmp	0xabc	; 0xabc <pinMode>

000001fa <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	0e 94 9a 05 	call	0xb34	; 0xb34 <digitalWrite>
	delayMicroseconds(10);
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 ef 04 	call	0x9de	; 0x9de <delayMicroseconds>
	digitalWrite(m_trigPin, LOW);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	8a 81       	ldd	r24, Y+2	; 0x02
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(m_trigPin, LOW);
 218:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <digitalWrite>

0000021c <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
	  Ping();
 22a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
 22e:	88 81       	ld	r24, Y
 230:	0e 94 c9 05 	call	0xb92	; 0xb92 <digitalRead>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	29 f0       	breq	.+10     	; 0x242 <_ZN12LengthSensor7MeasureEv+0x26>
	  {
		  delayMicroseconds(1);
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 ef 04 	call	0x9de	; 0x9de <delayMicroseconds>
int LengthSensor::Measure()
{	
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
 240:	f6 cf       	rjmp	.-20     	; 0x22e <_ZN12LengthSensor7MeasureEv+0x12>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
 242:	0e 94 8e 04 	call	0x91c	; 0x91c <micros>
 246:	6b 01       	movw	r12, r22
 248:	7c 01       	movw	r14, r24
	  while(digitalRead(m_echoPin) != LOW) {
 24a:	88 81       	ld	r24, Y
 24c:	0e 94 c9 05 	call	0xb92	; 0xb92 <digitalRead>
 250:	89 2b       	or	r24, r25
 252:	29 f0       	breq	.+10     	; 0x25e <_ZN12LengthSensor7MeasureEv+0x42>
		  delayMicroseconds(1);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 ef 04 	call	0x9de	; 0x9de <delayMicroseconds>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
	  while(digitalRead(m_echoPin) != LOW) {
 25c:	f6 cf       	rjmp	.-20     	; 0x24a <_ZN12LengthSensor7MeasureEv+0x2e>
		  delayMicroseconds(1);
	  }

	  time = micros() - time;
 25e:	0e 94 8e 04 	call	0x91c	; 0x91c <micros>
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	2c 19       	sub	r18, r12
 268:	3d 09       	sbc	r19, r13
 26a:	4e 09       	sbc	r20, r14
 26c:	5f 09       	sbc	r21, r15
 26e:	69 01       	movw	r12, r18
 270:	7a 01       	movw	r14, r20
	  Serial.println(time);	  
 272:	2a e0       	ldi	r18, 0x0A	; 10
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b7 01       	movw	r22, r14
 278:	a6 01       	movw	r20, r12
 27a:	8a e5       	ldi	r24, 0x5A	; 90
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN5Print7printlnEmi>
	  return (time * 34) / 2000;
 282:	a2 e2       	ldi	r26, 0x22	; 34
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	a7 01       	movw	r20, r14
 288:	96 01       	movw	r18, r12
 28a:	0e 94 95 06 	call	0xd2a	; 0xd2a <__muluhisi3>
 28e:	20 ed       	ldi	r18, 0xD0	; 208
 290:	37 e0       	ldi	r19, 0x07	; 7
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
}
 29a:	c9 01       	movw	r24, r18
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	08 95       	ret

000002aa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2aa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2ac:	91 8d       	ldd	r25, Z+25	; 0x19
 2ae:	22 8d       	ldd	r18, Z+26	; 0x1a
 2b0:	89 2f       	mov	r24, r25
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	80 5c       	subi	r24, 0xC0	; 192
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	82 1b       	sub	r24, r18
 2ba:	91 09       	sbc	r25, r1
}
 2bc:	8f 73       	andi	r24, 0x3F	; 63
 2be:	99 27       	eor	r25, r25
 2c0:	08 95       	ret

000002c2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2c2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2c4:	91 8d       	ldd	r25, Z+25	; 0x19
 2c6:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c8:	98 17       	cp	r25, r24
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2cc:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ce:	e8 0f       	add	r30, r24
 2d0:	f1 1d       	adc	r31, r1
 2d2:	85 8d       	ldd	r24, Z+29	; 0x1d
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2dc:	08 95       	ret

000002de <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2de:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e0:	91 8d       	ldd	r25, Z+25	; 0x19
 2e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e4:	98 17       	cp	r25, r24
 2e6:	61 f0       	breq	.+24     	; 0x300 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ea:	df 01       	movw	r26, r30
 2ec:	a8 0f       	add	r26, r24
 2ee:	b1 1d       	adc	r27, r1
 2f0:	5d 96       	adiw	r26, 0x1d	; 29
 2f2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2f4:	92 8d       	ldd	r25, Z+26	; 0x1a
 2f6:	9f 5f       	subi	r25, 0xFF	; 255
 2f8:	9f 73       	andi	r25, 0x3F	; 63
 2fa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 304:	08 95       	ret

00000306 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 306:	88 ed       	ldi	r24, 0xD8	; 216
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	89 2b       	or	r24, r25
 30c:	49 f0       	breq	.+18     	; 0x320 <_Z14serialEventRunv+0x1a>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	89 2b       	or	r24, r25
 314:	29 f0       	breq	.+10     	; 0x320 <_Z14serialEventRunv+0x1a>
 316:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z17Serial0_availablev>
 31a:	81 11       	cpse	r24, r1
 31c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 320:	08 95       	ret

00000322 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 322:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 324:	84 8d       	ldd	r24, Z+28	; 0x1c
 326:	df 01       	movw	r26, r30
 328:	a8 0f       	add	r26, r24
 32a:	b1 1d       	adc	r27, r1
 32c:	a3 5a       	subi	r26, 0xA3	; 163
 32e:	bf 4f       	sbci	r27, 0xFF	; 255
 330:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 332:	84 8d       	ldd	r24, Z+28	; 0x1c
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	8f 73       	andi	r24, 0x3F	; 63
 33a:	99 27       	eor	r25, r25
 33c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 33e:	a6 89       	ldd	r26, Z+22	; 0x16
 340:	b7 89       	ldd	r27, Z+23	; 0x17
 342:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 344:	a0 89       	ldd	r26, Z+16	; 0x10
 346:	b1 89       	ldd	r27, Z+17	; 0x11
 348:	8c 91       	ld	r24, X
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 34e:	93 8d       	ldd	r25, Z+27	; 0x1b
 350:	84 8d       	ldd	r24, Z+28	; 0x1c
 352:	98 13       	cpse	r25, r24
 354:	06 c0       	rjmp	.+12     	; 0x362 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 356:	02 88       	ldd	r0, Z+18	; 0x12
 358:	f3 89       	ldd	r31, Z+19	; 0x13
 35a:	e0 2d       	mov	r30, r0
 35c:	80 81       	ld	r24, Z
 35e:	8f 7d       	andi	r24, 0xDF	; 223
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
  _written = true;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 376:	9b 8d       	ldd	r25, Y+27	; 0x1b
 378:	8c 8d       	ldd	r24, Y+28	; 0x1c
 37a:	98 13       	cpse	r25, r24
 37c:	05 c0       	rjmp	.+10     	; 0x388 <_ZN14HardwareSerial5writeEh+0x24>
 37e:	e8 89       	ldd	r30, Y+16	; 0x10
 380:	f9 89       	ldd	r31, Y+17	; 0x11
 382:	80 81       	ld	r24, Z
 384:	85 fd       	sbrc	r24, 5
 386:	24 c0       	rjmp	.+72     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x6c>
 388:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 38a:	0b 8d       	ldd	r16, Y+27	; 0x1b
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
 392:	0f 73       	andi	r16, 0x3F	; 63
 394:	11 27       	eor	r17, r17
 396:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 398:	8c 8d       	ldd	r24, Y+28	; 0x1c
 39a:	e8 12       	cpse	r14, r24
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	07 fc       	sbrc	r0, 7
 3a2:	fa cf       	rjmp	.-12     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3a4:	e8 89       	ldd	r30, Y+16	; 0x10
 3a6:	f9 89       	ldd	r31, Y+17	; 0x11
 3a8:	80 81       	ld	r24, Z
 3aa:	85 ff       	sbrs	r24, 5
 3ac:	f5 cf       	rjmp	.-22     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3ae:	ce 01       	movw	r24, r28
 3b0:	0e 94 91 01 	call	0x322	; 0x322 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3b4:	f1 cf       	rjmp	.-30     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3b8:	fe 01       	movw	r30, r28
 3ba:	e8 0f       	add	r30, r24
 3bc:	f1 1d       	adc	r31, r1
 3be:	e3 5a       	subi	r30, 0xA3	; 163
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 3c4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 3c6:	ea 89       	ldd	r30, Y+18	; 0x12
 3c8:	fb 89       	ldd	r31, Y+19	; 0x13
 3ca:	80 81       	ld	r24, Z
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3d0:	ee 89       	ldd	r30, Y+22	; 0x16
 3d2:	ff 89       	ldd	r31, Y+23	; 0x17
 3d4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 3d6:	e8 89       	ldd	r30, Y+16	; 0x10
 3d8:	f9 89       	ldd	r31, Y+17	; 0x11
 3da:	80 81       	ld	r24, Z
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	08 95       	ret

000003f2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3f8:	88 8d       	ldd	r24, Y+24	; 0x18
 3fa:	88 23       	and	r24, r24
 3fc:	c9 f0       	breq	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3fe:	ea 89       	ldd	r30, Y+18	; 0x12
 400:	fb 89       	ldd	r31, Y+19	; 0x13
 402:	80 81       	ld	r24, Z
 404:	85 fd       	sbrc	r24, 5
 406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	a8 89       	ldd	r26, Y+16	; 0x10
 40a:	b9 89       	ldd	r27, Y+17	; 0x11
 40c:	8c 91       	ld	r24, X
 40e:	86 fd       	sbrc	r24, 6
 410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	07 fc       	sbrc	r0, 7
 416:	f5 cf       	rjmp	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 418:	80 81       	ld	r24, Z
 41a:	85 ff       	sbrs	r24, 5
 41c:	f2 cf       	rjmp	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 41e:	a8 89       	ldd	r26, Y+16	; 0x10
 420:	b9 89       	ldd	r27, Y+17	; 0x11
 422:	8c 91       	ld	r24, X
 424:	85 ff       	sbrs	r24, 5
 426:	ed cf       	rjmp	.-38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	  _tx_udr_empty_irq();
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 91 01 	call	0x322	; 0x322 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 42e:	e7 cf       	rjmp	.-50     	; 0x3fe <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
 446:	6a 01       	movw	r12, r20
 448:	7b 01       	movw	r14, r22
 44a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 44c:	e8 89       	ldd	r30, Y+16	; 0x10
 44e:	f9 89       	ldd	r31, Y+17	; 0x11
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 454:	41 15       	cp	r20, r1
 456:	51 4e       	sbci	r21, 0xE1	; 225
 458:	61 05       	cpc	r22, r1
 45a:	71 05       	cpc	r23, r1
 45c:	b1 f0       	breq	.+44     	; 0x48a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	79 e0       	ldi	r23, 0x09	; 9
 462:	8d e3       	ldi	r24, 0x3D	; 61
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	a7 01       	movw	r20, r14
 468:	96 01       	movw	r18, r12
 46a:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 46e:	da 01       	movw	r26, r20
 470:	c9 01       	movw	r24, r18
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	a1 09       	sbc	r26, r1
 476:	b1 09       	sbc	r27, r1
 478:	b6 95       	lsr	r27
 47a:	a7 95       	ror	r26
 47c:	97 95       	ror	r25
 47e:	87 95       	ror	r24
 480:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 482:	21 15       	cp	r18, r1
 484:	80 e1       	ldi	r24, 0x10	; 16
 486:	38 07       	cpc	r19, r24
 488:	a8 f0       	brcs	.+42     	; 0x4b4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 48a:	e8 89       	ldd	r30, Y+16	; 0x10
 48c:	f9 89       	ldd	r31, Y+17	; 0x11
 48e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 490:	60 e8       	ldi	r22, 0x80	; 128
 492:	74 e8       	ldi	r23, 0x84	; 132
 494:	8e e1       	ldi	r24, 0x1E	; 30
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	a7 01       	movw	r20, r14
 49a:	96 01       	movw	r18, r12
 49c:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 4a0:	da 01       	movw	r26, r20
 4a2:	c9 01       	movw	r24, r18
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	a1 09       	sbc	r26, r1
 4a8:	b1 09       	sbc	r27, r1
 4aa:	b6 95       	lsr	r27
 4ac:	a7 95       	ror	r26
 4ae:	97 95       	ror	r25
 4b0:	87 95       	ror	r24
 4b2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4b4:	ec 85       	ldd	r30, Y+12	; 0x0c
 4b6:	fd 85       	ldd	r31, Y+13	; 0x0d
 4b8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4ba:	ee 85       	ldd	r30, Y+14	; 0x0e
 4bc:	ff 85       	ldd	r31, Y+15	; 0x0f
 4be:	20 83       	st	Z, r18

  _written = false;
 4c0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4c2:	ec 89       	ldd	r30, Y+20	; 0x14
 4c4:	fd 89       	ldd	r31, Y+21	; 0x15
 4c6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 4c8:	ea 89       	ldd	r30, Y+18	; 0x12
 4ca:	fb 89       	ldd	r31, Y+19	; 0x13
 4cc:	80 81       	ld	r24, Z
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 4d2:	ea 89       	ldd	r30, Y+18	; 0x12
 4d4:	fb 89       	ldd	r31, Y+19	; 0x13
 4d6:	80 81       	ld	r24, Z
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 4dc:	ea 89       	ldd	r30, Y+18	; 0x12
 4de:	fb 89       	ldd	r31, Y+19	; 0x13
 4e0:	80 81       	ld	r24, Z
 4e2:	80 68       	ori	r24, 0x80	; 128
 4e4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4e6:	ea 89       	ldd	r30, Y+18	; 0x12
 4e8:	fb 89       	ldd	r31, Y+19	; 0x13
 4ea:	80 81       	ld	r24, Z
 4ec:	8f 7d       	andi	r24, 0xDF	; 223
 4ee:	80 83       	st	Z, r24
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	08 95       	ret

00000500 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 514:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Serial+0x10>
 518:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Serial+0x11>
 51c:	80 81       	ld	r24, Z
 51e:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x16>
 522:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x17>
 526:	82 fd       	sbrc	r24, 2
 528:	12 c0       	rjmp	.+36     	; 0x54e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 52a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 52c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Serial+0x19>
 530:	8f 5f       	subi	r24, 0xFF	; 255
 532:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 534:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Serial+0x1a>
 538:	82 17       	cp	r24, r18
 53a:	51 f0       	breq	.+20     	; 0x550 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 53c:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <Serial+0x19>
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	e6 5a       	subi	r30, 0xA6	; 166
 544:	fe 4f       	sbci	r31, 0xFE	; 254
 546:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 548:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Serial+0x19>
 54c:	01 c0       	rjmp	.+2      	; 0x550 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 54e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	2f 91       	pop	r18
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 586:	8a e5       	ldi	r24, 0x5A	; 90
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 91 01 	call	0x322	; 0x322 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5b0:	8a e5       	ldi	r24, 0x5A	; 90
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN14HardwareSerial9availableEv>
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	89 2b       	or	r24, r25
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <_Z17Serial0_availablev+0x10>
 5be:	20 e0       	ldi	r18, 0x00	; 0
}
 5c0:	82 2f       	mov	r24, r18
 5c2:	08 95       	ret

000005c4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5c4:	ea e5       	ldi	r30, 0x5A	; 90
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	13 82       	std	Z+3, r1	; 0x03
 5ca:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 5cc:	88 ee       	ldi	r24, 0xE8	; 232
 5ce:	93 e0       	ldi	r25, 0x03	; 3
 5d0:	a0 e0       	ldi	r26, 0x00	; 0
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	84 83       	std	Z+4, r24	; 0x04
 5d6:	95 83       	std	Z+5, r25	; 0x05
 5d8:	a6 83       	std	Z+6, r26	; 0x06
 5da:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5dc:	89 e3       	ldi	r24, 0x39	; 57
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	91 83       	std	Z+1, r25	; 0x01
 5e2:	80 83       	st	Z, r24
 5e4:	85 ec       	ldi	r24, 0xC5	; 197
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	95 87       	std	Z+13, r25	; 0x0d
 5ea:	84 87       	std	Z+12, r24	; 0x0c
 5ec:	84 ec       	ldi	r24, 0xC4	; 196
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	97 87       	std	Z+15, r25	; 0x0f
 5f2:	86 87       	std	Z+14, r24	; 0x0e
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	91 8b       	std	Z+17, r25	; 0x11
 5fa:	80 8b       	std	Z+16, r24	; 0x10
 5fc:	81 ec       	ldi	r24, 0xC1	; 193
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	93 8b       	std	Z+19, r25	; 0x13
 602:	82 8b       	std	Z+18, r24	; 0x12
 604:	82 ec       	ldi	r24, 0xC2	; 194
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	95 8b       	std	Z+21, r25	; 0x15
 60a:	84 8b       	std	Z+20, r24	; 0x14
 60c:	86 ec       	ldi	r24, 0xC6	; 198
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	97 8b       	std	Z+23, r25	; 0x17
 612:	86 8b       	std	Z+22, r24	; 0x16
 614:	11 8e       	std	Z+25, r1	; 0x19
 616:	12 8e       	std	Z+26, r1	; 0x1a
 618:	13 8e       	std	Z+27, r1	; 0x1b
 61a:	14 8e       	std	Z+28, r1	; 0x1c
 61c:	08 95       	ret

0000061e <initVariant>:
 61e:	08 95       	ret

00000620 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 620:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <init>

	initVariant();
 624:	0e 94 0f 03 	call	0x61e	; 0x61e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 628:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 62c:	c3 e8       	ldi	r28, 0x83	; 131
 62e:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 630:	0e 94 a1 00 	call	0x142	; 0x142 <loop>
		if (serialEventRun) serialEventRun();
 634:	20 97       	sbiw	r28, 0x00	; 0
 636:	e1 f3       	breq	.-8      	; 0x630 <main+0x10>
 638:	0e 94 83 01 	call	0x306	; 0x306 <_Z14serialEventRunv>
 63c:	f9 cf       	rjmp	.-14     	; 0x630 <main+0x10>

0000063e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 63e:	cf 92       	push	r12
 640:	df 92       	push	r13
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	6c 01       	movw	r12, r24
 650:	7a 01       	movw	r14, r20
 652:	8b 01       	movw	r16, r22
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	ce 15       	cp	r28, r14
 65a:	df 05       	cpc	r29, r15
 65c:	81 f0       	breq	.+32     	; 0x67e <_ZN5Print5writeEPKhj+0x40>
 65e:	d8 01       	movw	r26, r16
 660:	6d 91       	ld	r22, X+
 662:	8d 01       	movw	r16, r26
 664:	d6 01       	movw	r26, r12
 666:	ed 91       	ld	r30, X+
 668:	fc 91       	ld	r31, X
 66a:	01 90       	ld	r0, Z+
 66c:	f0 81       	ld	r31, Z
 66e:	e0 2d       	mov	r30, r0
 670:	c6 01       	movw	r24, r12
 672:	09 95       	icall
 674:	89 2b       	or	r24, r25
 676:	11 f0       	breq	.+4      	; 0x67c <_ZN5Print5writeEPKhj+0x3e>
 678:	21 96       	adiw	r28, 0x01	; 1
 67a:	ee cf       	rjmp	.-36     	; 0x658 <_ZN5Print5writeEPKhj+0x1a>
 67c:	7e 01       	movw	r14, r28
 67e:	c7 01       	movw	r24, r14
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	08 95       	ret

00000692 <_ZN5Print5writeEPKc>:
 692:	61 15       	cp	r22, r1
 694:	71 05       	cpc	r23, r1
 696:	79 f0       	breq	.+30     	; 0x6b6 <_ZN5Print5writeEPKc+0x24>
 698:	fb 01       	movw	r30, r22
 69a:	01 90       	ld	r0, Z+
 69c:	00 20       	and	r0, r0
 69e:	e9 f7       	brne	.-6      	; 0x69a <_ZN5Print5writeEPKc+0x8>
 6a0:	31 97       	sbiw	r30, 0x01	; 1
 6a2:	af 01       	movw	r20, r30
 6a4:	46 1b       	sub	r20, r22
 6a6:	57 0b       	sbc	r21, r23
 6a8:	dc 01       	movw	r26, r24
 6aa:	ed 91       	ld	r30, X+
 6ac:	fc 91       	ld	r31, X
 6ae:	02 80       	ldd	r0, Z+2	; 0x02
 6b0:	f3 81       	ldd	r31, Z+3	; 0x03
 6b2:	e0 2d       	mov	r30, r0
 6b4:	09 94       	ijmp
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	08 95       	ret

000006bc <_ZN5Print5printEc>:
 6bc:	dc 01       	movw	r26, r24
 6be:	ed 91       	ld	r30, X+
 6c0:	fc 91       	ld	r31, X
 6c2:	01 90       	ld	r0, Z+
 6c4:	f0 81       	ld	r31, Z
 6c6:	e0 2d       	mov	r30, r0
 6c8:	09 94       	ijmp

000006ca <_ZN5Print7printlnEv>:
 6ca:	65 e4       	ldi	r22, 0x45	; 69
 6cc:	71 e0       	ldi	r23, 0x01	; 1
 6ce:	0c 94 49 03 	jmp	0x692	; 0x692 <_ZN5Print5writeEPKc>

000006d2 <_ZN5Print7printlnEPKc>:
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	ec 01       	movw	r28, r24
 6dc:	0e 94 49 03 	call	0x692	; 0x692 <_ZN5Print5writeEPKc>
 6e0:	8c 01       	movw	r16, r24
 6e2:	ce 01       	movw	r24, r28
 6e4:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN5Print7printlnEv>
 6e8:	80 0f       	add	r24, r16
 6ea:	91 1f       	adc	r25, r17
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	08 95       	ret

000006f6 <_ZN5Print11printNumberEmh>:
 6f6:	8f 92       	push	r8
 6f8:	9f 92       	push	r9
 6fa:	af 92       	push	r10
 6fc:	bf 92       	push	r11
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	a1 97       	sbiw	r28, 0x21	; 33
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	7c 01       	movw	r14, r24
 71c:	fa 01       	movw	r30, r20
 71e:	cb 01       	movw	r24, r22
 720:	19 a2       	std	Y+33, r1	; 0x21
 722:	22 30       	cpi	r18, 0x02	; 2
 724:	08 f4       	brcc	.+2      	; 0x728 <_ZN5Print11printNumberEmh+0x32>
 726:	2a e0       	ldi	r18, 0x0A	; 10
 728:	8e 01       	movw	r16, r28
 72a:	0f 5d       	subi	r16, 0xDF	; 223
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	82 2e       	mov	r8, r18
 730:	91 2c       	mov	r9, r1
 732:	a1 2c       	mov	r10, r1
 734:	b1 2c       	mov	r11, r1
 736:	bf 01       	movw	r22, r30
 738:	a5 01       	movw	r20, r10
 73a:	94 01       	movw	r18, r8
 73c:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 740:	f9 01       	movw	r30, r18
 742:	ca 01       	movw	r24, r20
 744:	01 50       	subi	r16, 0x01	; 1
 746:	11 09       	sbc	r17, r1
 748:	6a 30       	cpi	r22, 0x0A	; 10
 74a:	10 f4       	brcc	.+4      	; 0x750 <_ZN5Print11printNumberEmh+0x5a>
 74c:	60 5d       	subi	r22, 0xD0	; 208
 74e:	01 c0       	rjmp	.+2      	; 0x752 <_ZN5Print11printNumberEmh+0x5c>
 750:	69 5c       	subi	r22, 0xC9	; 201
 752:	d8 01       	movw	r26, r16
 754:	6c 93       	st	X, r22
 756:	23 2b       	or	r18, r19
 758:	24 2b       	or	r18, r20
 75a:	25 2b       	or	r18, r21
 75c:	61 f7       	brne	.-40     	; 0x736 <_ZN5Print11printNumberEmh+0x40>
 75e:	b8 01       	movw	r22, r16
 760:	c7 01       	movw	r24, r14
 762:	0e 94 49 03 	call	0x692	; 0x692 <_ZN5Print5writeEPKc>
 766:	a1 96       	adiw	r28, 0x21	; 33
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	ff 90       	pop	r15
 77c:	ef 90       	pop	r14
 77e:	bf 90       	pop	r11
 780:	af 90       	pop	r10
 782:	9f 90       	pop	r9
 784:	8f 90       	pop	r8
 786:	08 95       	ret

00000788 <_ZN5Print5printEmi>:
 788:	21 15       	cp	r18, r1
 78a:	31 05       	cpc	r19, r1
 78c:	41 f4       	brne	.+16     	; 0x79e <_ZN5Print5printEmi+0x16>
 78e:	dc 01       	movw	r26, r24
 790:	ed 91       	ld	r30, X+
 792:	fc 91       	ld	r31, X
 794:	01 90       	ld	r0, Z+
 796:	f0 81       	ld	r31, Z
 798:	e0 2d       	mov	r30, r0
 79a:	64 2f       	mov	r22, r20
 79c:	09 94       	ijmp
 79e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_ZN5Print11printNumberEmh>

000007a2 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 7ac:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN5Print5printEmi>
 7b0:	8c 01       	movw	r16, r24
  n += println();
 7b2:	ce 01       	movw	r24, r28
 7b4:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN5Print7printlnEv>
  return n;
}
 7b8:	80 0f       	add	r24, r16
 7ba:	91 1f       	adc	r25, r17
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	08 95       	ret

000007c6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
  if (base == 0) {
 7d6:	21 15       	cp	r18, r1
 7d8:	31 05       	cpc	r19, r1
 7da:	81 f4       	brne	.+32     	; 0x7fc <_ZN5Print5printEli+0x36>
    return write(n);
 7dc:	dc 01       	movw	r26, r24
 7de:	ed 91       	ld	r30, X+
 7e0:	fc 91       	ld	r31, X
 7e2:	01 90       	ld	r0, Z+
 7e4:	f0 81       	ld	r31, Z
 7e6:	e0 2d       	mov	r30, r0
 7e8:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 7fa:	09 94       	ijmp
  } else if (base == 10) {
 7fc:	2a 30       	cpi	r18, 0x0A	; 10
 7fe:	31 05       	cpc	r19, r1
 800:	01 f5       	brne	.+64     	; 0x842 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 802:	77 ff       	sbrs	r23, 7
 804:	1d c0       	rjmp	.+58     	; 0x840 <_ZN5Print5printEli+0x7a>
 806:	6a 01       	movw	r12, r20
 808:	7b 01       	movw	r14, r22
 80a:	ec 01       	movw	r28, r24
      int t = print('-');
 80c:	6d e2       	ldi	r22, 0x2D	; 45
 80e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN5Print5printEc>
 812:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 814:	44 27       	eor	r20, r20
 816:	55 27       	eor	r21, r21
 818:	ba 01       	movw	r22, r20
 81a:	4c 19       	sub	r20, r12
 81c:	5d 09       	sbc	r21, r13
 81e:	6e 09       	sbc	r22, r14
 820:	7f 09       	sbc	r23, r15
 822:	2a e0       	ldi	r18, 0x0A	; 10
 824:	ce 01       	movw	r24, r28
 826:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN5Print11printNumberEmh>
 82a:	80 0f       	add	r24, r16
 82c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	ff 90       	pop	r15
 838:	ef 90       	pop	r14
 83a:	df 90       	pop	r13
 83c:	cf 90       	pop	r12
 83e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 840:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	df 90       	pop	r13
 850:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 852:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_ZN5Print11printNumberEmh>

00000856 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 856:	9a 01       	movw	r18, r20
  return print((long) n, base);
 858:	ab 01       	movw	r20, r22
 85a:	77 0f       	add	r23, r23
 85c:	66 0b       	sbc	r22, r22
 85e:	77 0b       	sbc	r23, r23
 860:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_ZN5Print5printEli>

00000864 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 86e:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN5Print5printEii>
 872:	8c 01       	movw	r16, r24
  n += println();
 874:	ce 01       	movw	r24, r28
 876:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN5Print7printlnEv>
  return n;
}
 87a:	80 0f       	add	r24, r16
 87c:	91 1f       	adc	r25, r17
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 888:	1f 92       	push	r1
 88a:	0f 92       	push	r0
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	0f 92       	push	r0
 890:	11 24       	eor	r1, r1
 892:	2f 93       	push	r18
 894:	3f 93       	push	r19
 896:	8f 93       	push	r24
 898:	9f 93       	push	r25
 89a:	af 93       	push	r26
 89c:	bf 93       	push	r27
 89e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <timer0_millis>
 8a2:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <timer0_millis+0x1>
 8a6:	a0 91 fa 01 	lds	r26, 0x01FA	; 0x8001fa <timer0_millis+0x2>
 8aa:	b0 91 fb 01 	lds	r27, 0x01FB	; 0x8001fb <timer0_millis+0x3>
 8ae:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <timer0_fract>
 8b2:	23 e0       	ldi	r18, 0x03	; 3
 8b4:	23 0f       	add	r18, r19
 8b6:	2d 37       	cpi	r18, 0x7D	; 125
 8b8:	20 f4       	brcc	.+8      	; 0x8c2 <__vector_16+0x3a>
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	a1 1d       	adc	r26, r1
 8be:	b1 1d       	adc	r27, r1
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <__vector_16+0x44>
 8c2:	26 e8       	ldi	r18, 0x86	; 134
 8c4:	23 0f       	add	r18, r19
 8c6:	02 96       	adiw	r24, 0x02	; 2
 8c8:	a1 1d       	adc	r26, r1
 8ca:	b1 1d       	adc	r27, r1
 8cc:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <timer0_fract>
 8d0:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <timer0_millis>
 8d4:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <timer0_millis+0x1>
 8d8:	a0 93 fa 01 	sts	0x01FA, r26	; 0x8001fa <timer0_millis+0x2>
 8dc:	b0 93 fb 01 	sts	0x01FB, r27	; 0x8001fb <timer0_millis+0x3>
 8e0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timer0_overflow_count>
 8e4:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timer0_overflow_count+0x1>
 8e8:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timer0_overflow_count+0x2>
 8ec:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timer0_overflow_count+0x3>
 8f0:	01 96       	adiw	r24, 0x01	; 1
 8f2:	a1 1d       	adc	r26, r1
 8f4:	b1 1d       	adc	r27, r1
 8f6:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <timer0_overflow_count>
 8fa:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <timer0_overflow_count+0x1>
 8fe:	a0 93 fe 01 	sts	0x01FE, r26	; 0x8001fe <timer0_overflow_count+0x2>
 902:	b0 93 ff 01 	sts	0x01FF, r27	; 0x8001ff <timer0_overflow_count+0x3>
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	3f 91       	pop	r19
 910:	2f 91       	pop	r18
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

0000091c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 91c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 91e:	f8 94       	cli
	m = timer0_overflow_count;
 920:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timer0_overflow_count>
 924:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timer0_overflow_count+0x1>
 928:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timer0_overflow_count+0x2>
 92c:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 930:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 932:	a8 9b       	sbis	0x15, 0	; 21
 934:	05 c0       	rjmp	.+10     	; 0x940 <micros+0x24>
 936:	2f 3f       	cpi	r18, 0xFF	; 255
 938:	19 f0       	breq	.+6      	; 0x940 <micros+0x24>
		m++;
 93a:	01 96       	adiw	r24, 0x01	; 1
 93c:	a1 1d       	adc	r26, r1
 93e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 940:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 942:	ba 2f       	mov	r27, r26
 944:	a9 2f       	mov	r26, r25
 946:	98 2f       	mov	r25, r24
 948:	88 27       	eor	r24, r24
 94a:	82 0f       	add	r24, r18
 94c:	91 1d       	adc	r25, r1
 94e:	a1 1d       	adc	r26, r1
 950:	b1 1d       	adc	r27, r1
 952:	bc 01       	movw	r22, r24
 954:	cd 01       	movw	r24, r26
 956:	42 e0       	ldi	r20, 0x02	; 2
 958:	66 0f       	add	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	4a 95       	dec	r20
 962:	d1 f7       	brne	.-12     	; 0x958 <micros+0x3c>
}
 964:	08 95       	ret

00000966 <delay>:

void delay(unsigned long ms)
{
 966:	8f 92       	push	r8
 968:	9f 92       	push	r9
 96a:	af 92       	push	r10
 96c:	bf 92       	push	r11
 96e:	cf 92       	push	r12
 970:	df 92       	push	r13
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	6b 01       	movw	r12, r22
 978:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 97a:	0e 94 8e 04 	call	0x91c	; 0x91c <micros>
 97e:	4b 01       	movw	r8, r22
 980:	5c 01       	movw	r10, r24

	while (ms > 0) {
 982:	c1 14       	cp	r12, r1
 984:	d1 04       	cpc	r13, r1
 986:	e1 04       	cpc	r14, r1
 988:	f1 04       	cpc	r15, r1
 98a:	01 f1       	breq	.+64     	; 0x9cc <delay+0x66>
		yield();
 98c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 990:	0e 94 8e 04 	call	0x91c	; 0x91c <micros>
 994:	dc 01       	movw	r26, r24
 996:	cb 01       	movw	r24, r22
 998:	88 19       	sub	r24, r8
 99a:	99 09       	sbc	r25, r9
 99c:	aa 09       	sbc	r26, r10
 99e:	bb 09       	sbc	r27, r11
 9a0:	88 3e       	cpi	r24, 0xE8	; 232
 9a2:	93 40       	sbci	r25, 0x03	; 3
 9a4:	a1 05       	cpc	r26, r1
 9a6:	b1 05       	cpc	r27, r1
 9a8:	60 f3       	brcs	.-40     	; 0x982 <delay+0x1c>
			ms--;
 9aa:	21 e0       	ldi	r18, 0x01	; 1
 9ac:	c2 1a       	sub	r12, r18
 9ae:	d1 08       	sbc	r13, r1
 9b0:	e1 08       	sbc	r14, r1
 9b2:	f1 08       	sbc	r15, r1
			start += 1000;
 9b4:	88 ee       	ldi	r24, 0xE8	; 232
 9b6:	88 0e       	add	r8, r24
 9b8:	83 e0       	ldi	r24, 0x03	; 3
 9ba:	98 1e       	adc	r9, r24
 9bc:	a1 1c       	adc	r10, r1
 9be:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 9c0:	c1 14       	cp	r12, r1
 9c2:	d1 04       	cpc	r13, r1
 9c4:	e1 04       	cpc	r14, r1
 9c6:	f1 04       	cpc	r15, r1
 9c8:	19 f7       	brne	.-58     	; 0x990 <delay+0x2a>
 9ca:	db cf       	rjmp	.-74     	; 0x982 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	bf 90       	pop	r11
 9d6:	af 90       	pop	r10
 9d8:	9f 90       	pop	r9
 9da:	8f 90       	pop	r8
 9dc:	08 95       	ret

000009de <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 9de:	82 30       	cpi	r24, 0x02	; 2
 9e0:	91 05       	cpc	r25, r1
 9e2:	38 f0       	brcs	.+14     	; 0x9f2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 9ec:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 9ee:	01 97       	sbiw	r24, 0x01	; 1
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <delayMicroseconds+0x10>
 9f2:	08 95       	ret

000009f4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9f4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9f6:	84 b5       	in	r24, 0x24	; 36
 9f8:	82 60       	ori	r24, 0x02	; 2
 9fa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9fc:	84 b5       	in	r24, 0x24	; 36
 9fe:	81 60       	ori	r24, 0x01	; 1
 a00:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 a02:	85 b5       	in	r24, 0x25	; 37
 a04:	82 60       	ori	r24, 0x02	; 2
 a06:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 a08:	85 b5       	in	r24, 0x25	; 37
 a0a:	81 60       	ori	r24, 0x01	; 1
 a0c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 a0e:	ee e6       	ldi	r30, 0x6E	; 110
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	81 60       	ori	r24, 0x01	; 1
 a16:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 a18:	e1 e8       	ldi	r30, 0x81	; 129
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a1e:	80 81       	ld	r24, Z
 a20:	82 60       	ori	r24, 0x02	; 2
 a22:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 a24:	80 81       	ld	r24, Z
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 a2a:	e0 e8       	ldi	r30, 0x80	; 128
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	81 60       	ori	r24, 0x01	; 1
 a32:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 a34:	e1 eb       	ldi	r30, 0xB1	; 177
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	84 60       	ori	r24, 0x04	; 4
 a3c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a3e:	e0 eb       	ldi	r30, 0xB0	; 176
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	81 60       	ori	r24, 0x01	; 1
 a46:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a48:	ea e7       	ldi	r30, 0x7A	; 122
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	84 60       	ori	r24, 0x04	; 4
 a50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a52:	80 81       	ld	r24, Z
 a54:	82 60       	ori	r24, 0x02	; 2
 a56:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a58:	80 81       	ld	r24, Z
 a5a:	81 60       	ori	r24, 0x01	; 1
 a5c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a5e:	80 81       	ld	r24, Z
 a60:	80 68       	ori	r24, 0x80	; 128
 a62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a64:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a68:	08 95       	ret

00000a6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a6a:	83 30       	cpi	r24, 0x03	; 3
 a6c:	81 f0       	breq	.+32     	; 0xa8e <turnOffPWM+0x24>
 a6e:	28 f4       	brcc	.+10     	; 0xa7a <turnOffPWM+0x10>
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	99 f0       	breq	.+38     	; 0xa9a <turnOffPWM+0x30>
 a74:	82 30       	cpi	r24, 0x02	; 2
 a76:	a1 f0       	breq	.+40     	; 0xaa0 <turnOffPWM+0x36>
 a78:	08 95       	ret
 a7a:	87 30       	cpi	r24, 0x07	; 7
 a7c:	a9 f0       	breq	.+42     	; 0xaa8 <turnOffPWM+0x3e>
 a7e:	88 30       	cpi	r24, 0x08	; 8
 a80:	b9 f0       	breq	.+46     	; 0xab0 <turnOffPWM+0x46>
 a82:	84 30       	cpi	r24, 0x04	; 4
 a84:	d1 f4       	brne	.+52     	; 0xaba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a8a:	8f 7d       	andi	r24, 0xDF	; 223
 a8c:	03 c0       	rjmp	.+6      	; 0xa94 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a92:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a9a:	84 b5       	in	r24, 0x24	; 36
 a9c:	8f 77       	andi	r24, 0x7F	; 127
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 aa0:	84 b5       	in	r24, 0x24	; 36
 aa2:	8f 7d       	andi	r24, 0xDF	; 223
 aa4:	84 bd       	out	0x24, r24	; 36
 aa6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 aa8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 aac:	8f 77       	andi	r24, 0x7F	; 127
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ab0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ab4:	8f 7d       	andi	r24, 0xDF	; 223
 ab6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 aba:	08 95       	ret

00000abc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	fc 01       	movw	r30, r24
 ac4:	e4 58       	subi	r30, 0x84	; 132
 ac6:	ff 4f       	sbci	r31, 0xFF	; 255
 ac8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 aca:	fc 01       	movw	r30, r24
 acc:	e0 57       	subi	r30, 0x70	; 112
 ace:	ff 4f       	sbci	r31, 0xFF	; 255
 ad0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 ad2:	88 23       	and	r24, r24
 ad4:	61 f1       	breq	.+88     	; 0xb2e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	88 0f       	add	r24, r24
 ada:	99 1f       	adc	r25, r25
 adc:	fc 01       	movw	r30, r24
 ade:	e8 54       	subi	r30, 0x48	; 72
 ae0:	ff 4f       	sbci	r31, 0xFF	; 255
 ae2:	c5 91       	lpm	r28, Z+
 ae4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 ae6:	fc 01       	movw	r30, r24
 ae8:	e2 55       	subi	r30, 0x52	; 82
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	a5 91       	lpm	r26, Z+
 aee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 af0:	61 11       	cpse	r22, r1
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 af4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 af6:	f8 94       	cli
		*reg &= ~bit;
 af8:	88 81       	ld	r24, Y
 afa:	20 95       	com	r18
 afc:	82 23       	and	r24, r18
 afe:	88 83       	st	Y, r24
		*out &= ~bit;
 b00:	ec 91       	ld	r30, X
 b02:	2e 23       	and	r18, r30
 b04:	0b c0       	rjmp	.+22     	; 0xb1c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 b06:	62 30       	cpi	r22, 0x02	; 2
 b08:	61 f4       	brne	.+24     	; 0xb22 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 b0a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 b0c:	f8 94       	cli
		*reg &= ~bit;
 b0e:	88 81       	ld	r24, Y
 b10:	32 2f       	mov	r19, r18
 b12:	30 95       	com	r19
 b14:	83 23       	and	r24, r19
 b16:	88 83       	st	Y, r24
		*out |= bit;
 b18:	ec 91       	ld	r30, X
 b1a:	2e 2b       	or	r18, r30
 b1c:	2c 93       	st	X, r18
		SREG = oldSREG;
 b1e:	9f bf       	out	0x3f, r25	; 63
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 b22:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b24:	f8 94       	cli
		*reg |= bit;
 b26:	e8 81       	ld	r30, Y
 b28:	2e 2b       	or	r18, r30
 b2a:	28 83       	st	Y, r18
		SREG = oldSREG;
 b2c:	8f bf       	out	0x3f, r24	; 63
	}
}
 b2e:	df 91       	pop	r29
 b30:	cf 91       	pop	r28
 b32:	08 95       	ret

00000b34 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 b34:	1f 93       	push	r17
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b3a:	28 2f       	mov	r18, r24
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	f9 01       	movw	r30, r18
 b40:	e8 59       	subi	r30, 0x98	; 152
 b42:	ff 4f       	sbci	r31, 0xFF	; 255
 b44:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b46:	f9 01       	movw	r30, r18
 b48:	e4 58       	subi	r30, 0x84	; 132
 b4a:	ff 4f       	sbci	r31, 0xFF	; 255
 b4c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b4e:	f9 01       	movw	r30, r18
 b50:	e0 57       	subi	r30, 0x70	; 112
 b52:	ff 4f       	sbci	r31, 0xFF	; 255
 b54:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b56:	cc 23       	and	r28, r28
 b58:	c1 f0       	breq	.+48     	; 0xb8a <digitalWrite+0x56>
 b5a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b5c:	81 11       	cpse	r24, r1
 b5e:	0e 94 35 05 	call	0xa6a	; 0xa6a <turnOffPWM>

	out = portOutputRegister(port);
 b62:	ec 2f       	mov	r30, r28
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	ee 0f       	add	r30, r30
 b68:	ff 1f       	adc	r31, r31
 b6a:	e2 55       	subi	r30, 0x52	; 82
 b6c:	ff 4f       	sbci	r31, 0xFF	; 255
 b6e:	a5 91       	lpm	r26, Z+
 b70:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b72:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b74:	f8 94       	cli

	if (val == LOW) {
 b76:	11 11       	cpse	r17, r1
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <digitalWrite+0x4e>
		*out &= ~bit;
 b7a:	8c 91       	ld	r24, X
 b7c:	d0 95       	com	r29
 b7e:	d8 23       	and	r29, r24
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <digitalWrite+0x52>
	} else {
		*out |= bit;
 b82:	ec 91       	ld	r30, X
 b84:	de 2b       	or	r29, r30
 b86:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b88:	9f bf       	out	0x3f, r25	; 63
}
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	08 95       	ret

00000b92 <digitalRead>:

int digitalRead(uint8_t pin)
{
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b96:	28 2f       	mov	r18, r24
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	f9 01       	movw	r30, r18
 b9c:	e8 59       	subi	r30, 0x98	; 152
 b9e:	ff 4f       	sbci	r31, 0xFF	; 255
 ba0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 ba2:	f9 01       	movw	r30, r18
 ba4:	e4 58       	subi	r30, 0x84	; 132
 ba6:	ff 4f       	sbci	r31, 0xFF	; 255
 ba8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 baa:	f9 01       	movw	r30, r18
 bac:	e0 57       	subi	r30, 0x70	; 112
 bae:	ff 4f       	sbci	r31, 0xFF	; 255
 bb0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 bb2:	cc 23       	and	r28, r28
 bb4:	91 f0       	breq	.+36     	; 0xbda <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 bb6:	81 11       	cpse	r24, r1
 bb8:	0e 94 35 05 	call	0xa6a	; 0xa6a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 bbc:	ec 2f       	mov	r30, r28
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	ec 55       	subi	r30, 0x5C	; 92
 bc6:	ff 4f       	sbci	r31, 0xFF	; 255
 bc8:	a5 91       	lpm	r26, Z+
 bca:	b4 91       	lpm	r27, Z
 bcc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 bce:	ed 23       	and	r30, r29
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	21 f4       	brne	.+8      	; 0xbde <digitalRead+0x4c>
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <digitalRead+0x4c>
 bda:	80 e0       	ldi	r24, 0x00	; 0
 bdc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	08 95       	ret

00000be4 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 be4:	1f 92       	push	r1
 be6:	0f 92       	push	r0
 be8:	0f b6       	in	r0, 0x3f	; 63
 bea:	0f 92       	push	r0
 bec:	11 24       	eor	r1, r1
 bee:	2f 93       	push	r18
 bf0:	3f 93       	push	r19
 bf2:	4f 93       	push	r20
 bf4:	5f 93       	push	r21
 bf6:	6f 93       	push	r22
 bf8:	7f 93       	push	r23
 bfa:	8f 93       	push	r24
 bfc:	9f 93       	push	r25
 bfe:	af 93       	push	r26
 c00:	bf 93       	push	r27
 c02:	ef 93       	push	r30
 c04:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 c06:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <_ZN14SoftwareSerial13active_objectE>
 c0a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <_ZN14SoftwareSerial13active_objectE+0x1>
 c0e:	30 97       	sbiw	r30, 0x00	; 0
 c10:	09 f4       	brne	.+2      	; 0xc14 <__vector_3+0x30>
 c12:	51 c0       	rjmp	.+162    	; 0xcb6 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 c14:	96 8d       	ldd	r25, Z+30	; 0x1e
 c16:	a6 85       	ldd	r26, Z+14	; 0x0e
 c18:	b7 85       	ldd	r27, Z+15	; 0x0f
 c1a:	85 85       	ldd	r24, Z+13	; 0x0d
 c1c:	91 ff       	sbrs	r25, 1
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 c20:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 c22:	89 23       	and	r24, r25
 c24:	29 f4       	brne	.+10     	; 0xc30 <__vector_3+0x4c>
 c26:	47 c0       	rjmp	.+142    	; 0xcb6 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 c28:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 c2a:	89 23       	and	r24, r25
 c2c:	09 f0       	breq	.+2      	; 0xc30 <__vector_3+0x4c>
 c2e:	43 c0       	rjmp	.+134    	; 0xcb6 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 c30:	a3 89       	ldd	r26, Z+19	; 0x13
 c32:	b4 89       	ldd	r27, Z+20	; 0x14
 c34:	9c 91       	ld	r25, X
 c36:	85 89       	ldd	r24, Z+21	; 0x15
 c38:	80 95       	com	r24
 c3a:	89 23       	and	r24, r25
 c3c:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 c3e:	86 89       	ldd	r24, Z+22	; 0x16
 c40:	97 89       	ldd	r25, Z+23	; 0x17
 c42:	01 97       	sbiw	r24, 0x01	; 1
 c44:	f1 f7       	brne	.-4      	; 0xc42 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 c46:	60 8d       	ldd	r22, Z+24	; 0x18
 c48:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 c4a:	a6 85       	ldd	r26, Z+14	; 0x0e
 c4c:	b7 85       	ldd	r27, Z+15	; 0x0f
 c4e:	55 85       	ldd	r21, Z+13	; 0x0d
 c50:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 c52:	20 e0       	ldi	r18, 0x00	; 0
 c54:	cb 01       	movw	r24, r22
 c56:	01 97       	sbiw	r24, 0x01	; 1
 c58:	f1 f7       	brne	.-4      	; 0xc56 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 c5a:	82 2f       	mov	r24, r18
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	95 95       	asr	r25
 c60:	87 95       	ror	r24
 c62:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 c64:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 c66:	45 23       	and	r20, r21
 c68:	09 f0       	breq	.+2      	; 0xc6c <__vector_3+0x88>
        d |= 0x80;
 c6a:	20 68       	ori	r18, 0x80	; 128
 c6c:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 c6e:	91 f7       	brne	.-28     	; 0xc54 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 c70:	86 8d       	ldd	r24, Z+30	; 0x1e
 c72:	81 fd       	sbrc	r24, 1
      d = ~d;
 c74:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 c76:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	01 96       	adiw	r24, 0x01	; 1
 c7e:	8f 73       	andi	r24, 0x3F	; 63
 c80:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
 c82:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <_ZN14SoftwareSerial20_receive_buffer_headE>
 c86:	38 17       	cp	r19, r24
 c88:	49 f0       	breq	.+18     	; 0xc9c <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 c8a:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	ae 5f       	subi	r26, 0xFE	; 254
 c92:	bd 4f       	sbci	r27, 0xFD	; 253
 c94:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
 c96:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 c9c:	86 8d       	ldd	r24, Z+30	; 0x1e
 c9e:	81 60       	ori	r24, 0x01	; 1
 ca0:	86 8f       	std	Z+30, r24	; 0x1e
 ca2:	82 8d       	ldd	r24, Z+26	; 0x1a
 ca4:	93 8d       	ldd	r25, Z+27	; 0x1b
 ca6:	01 97       	sbiw	r24, 0x01	; 1
 ca8:	f1 f7       	brne	.-4      	; 0xca6 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 caa:	a3 89       	ldd	r26, Z+19	; 0x13
 cac:	b4 89       	ldd	r27, Z+20	; 0x14
 cae:	9c 91       	ld	r25, X
 cb0:	85 89       	ldd	r24, Z+21	; 0x15
 cb2:	89 2b       	or	r24, r25
 cb4:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 cb6:	ff 91       	pop	r31
 cb8:	ef 91       	pop	r30
 cba:	bf 91       	pop	r27
 cbc:	af 91       	pop	r26
 cbe:	9f 91       	pop	r25
 cc0:	8f 91       	pop	r24
 cc2:	7f 91       	pop	r23
 cc4:	6f 91       	pop	r22
 cc6:	5f 91       	pop	r21
 cc8:	4f 91       	pop	r20
 cca:	3f 91       	pop	r19
 ccc:	2f 91       	pop	r18
 cce:	0f 90       	pop	r0
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	0f 90       	pop	r0
 cd4:	1f 90       	pop	r1
 cd6:	18 95       	reti

00000cd8 <yield>:
 cd8:	08 95       	ret

00000cda <__udivmodsi4>:
 cda:	a1 e2       	ldi	r26, 0x21	; 33
 cdc:	1a 2e       	mov	r1, r26
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	fd 01       	movw	r30, r26
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__udivmodsi4_ep>

00000ce6 <__udivmodsi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	ee 1f       	adc	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	a2 17       	cp	r26, r18
 cf0:	b3 07       	cpc	r27, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	20 f0       	brcs	.+8      	; 0xd00 <__udivmodsi4_ep>
 cf8:	a2 1b       	sub	r26, r18
 cfa:	b3 0b       	sbc	r27, r19
 cfc:	e4 0b       	sbc	r30, r20
 cfe:	f5 0b       	sbc	r31, r21

00000d00 <__udivmodsi4_ep>:
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	1a 94       	dec	r1
 d0a:	69 f7       	brne	.-38     	; 0xce6 <__udivmodsi4_loop>
 d0c:	60 95       	com	r22
 d0e:	70 95       	com	r23
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	9b 01       	movw	r18, r22
 d16:	ac 01       	movw	r20, r24
 d18:	bd 01       	movw	r22, r26
 d1a:	cf 01       	movw	r24, r30
 d1c:	08 95       	ret

00000d1e <__tablejump2__>:
 d1e:	ee 0f       	add	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	05 90       	lpm	r0, Z+
 d24:	f4 91       	lpm	r31, Z
 d26:	e0 2d       	mov	r30, r0
 d28:	09 94       	ijmp

00000d2a <__muluhisi3>:
 d2a:	0e 94 a0 06 	call	0xd40	; 0xd40 <__umulhisi3>
 d2e:	a5 9f       	mul	r26, r21
 d30:	90 0d       	add	r25, r0
 d32:	b4 9f       	mul	r27, r20
 d34:	90 0d       	add	r25, r0
 d36:	a4 9f       	mul	r26, r20
 d38:	80 0d       	add	r24, r0
 d3a:	91 1d       	adc	r25, r1
 d3c:	11 24       	eor	r1, r1
 d3e:	08 95       	ret

00000d40 <__umulhisi3>:
 d40:	a2 9f       	mul	r26, r18
 d42:	b0 01       	movw	r22, r0
 d44:	b3 9f       	mul	r27, r19
 d46:	c0 01       	movw	r24, r0
 d48:	a3 9f       	mul	r26, r19
 d4a:	70 0d       	add	r23, r0
 d4c:	81 1d       	adc	r24, r1
 d4e:	11 24       	eor	r1, r1
 d50:	91 1d       	adc	r25, r1
 d52:	b2 9f       	mul	r27, r18
 d54:	70 0d       	add	r23, r0
 d56:	81 1d       	adc	r24, r1
 d58:	11 24       	eor	r1, r1
 d5a:	91 1d       	adc	r25, r1
 d5c:	08 95       	ret

00000d5e <__do_global_dtors>:
 d5e:	10 e0       	ldi	r17, 0x00	; 0
 d60:	c3 e6       	ldi	r28, 0x63	; 99
 d62:	d0 e0       	ldi	r29, 0x00	; 0
 d64:	04 c0       	rjmp	.+8      	; 0xd6e <__do_global_dtors+0x10>
 d66:	fe 01       	movw	r30, r28
 d68:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__tablejump2__>
 d6c:	21 96       	adiw	r28, 0x01	; 1
 d6e:	c4 36       	cpi	r28, 0x64	; 100
 d70:	d1 07       	cpc	r29, r17
 d72:	c9 f7       	brne	.-14     	; 0xd66 <__do_global_dtors+0x8>
 d74:	f8 94       	cli

00000d76 <__stop_program>:
 d76:	ff cf       	rjmp	.-2      	; 0xd76 <__stop_program>
