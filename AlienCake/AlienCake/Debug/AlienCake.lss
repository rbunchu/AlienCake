
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  000018e6  0000197a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  008001d6  008001d6  00001a50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d8  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012504  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ce8  00000000  00000000  0001459c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003106  00000000  00000000  00017284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f2c  00000000  00000000  0001a38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033f6  00000000  00000000  0001b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052ee  00000000  00000000  0001e6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  0002399c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__dtors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_3>
      10:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_3>
      14:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_3>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_16>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_18>
      4c:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_19>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      68:	33 02       	muls	r19, r19
      6a:	3a 02       	muls	r19, r26
      6c:	48 02       	muls	r20, r24
      6e:	27 02       	muls	r18, r23
      70:	48 02       	muls	r20, r24
      72:	2c 02       	muls	r18, r28
      74:	41 02       	muls	r20, r17
      76:	5a 02       	muls	r21, r26
      78:	48 02       	muls	r20, r24
      7a:	48 02       	muls	r20, r24
      7c:	48 02       	muls	r20, r24
      7e:	48 02       	muls	r20, r24
      80:	48 02       	muls	r20, r24
      82:	48 02       	muls	r20, r24
      84:	48 02       	muls	r20, r24
      86:	48 02       	muls	r20, r24
      88:	4c 02       	muls	r20, r28
      8a:	48 02       	muls	r20, r24
      8c:	48 02       	muls	r20, r24
      8e:	48 02       	muls	r20, r24
      90:	48 02       	muls	r20, r24
      92:	48 02       	muls	r20, r24

00000094 <__trampolines_end>:
      94:	00 00       	nop
      96:	00 08       	sbc	r0, r0
      98:	00 02       	muls	r16, r16
      9a:	01 00       	.word	0x0001	; ????
      9c:	00 03       	mulsu	r16, r16
      9e:	04 07       	cpc	r16, r20
	...

000000a8 <digital_pin_to_bit_mask_PGM>:
      a8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b8:	04 08 10 20                                         ... 

000000bc <digital_pin_to_port_PGM>:
      bc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      cc:	03 03 03 03                                         ....

000000d0 <port_to_input_PGM>:
      d0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000da <port_to_output_PGM>:
      da:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e4 <port_to_mode_PGM>:
      e4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ee <__ctors_start>:
      ee:	f7 00       	.word	0x00f7	; ????
      f0:	37 05       	cpc	r19, r7

000000f2 <__ctors_end>:
      f2:	05 01       	movw	r0, r10

000000f4 <__dtors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d8 e0       	ldi	r29, 0x08	; 8
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e6 ee       	ldi	r30, 0xE6	; 230
     108:	f8 e1       	ldi	r31, 0x18	; 24
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a6 3d       	cpi	r26, 0xD6	; 214
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
     116:	22 e0       	ldi	r18, 0x02	; 2
     118:	a6 ed       	ldi	r26, 0xD6	; 214
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	ac 3c       	cpi	r26, 0xCC	; 204
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	c9 e7       	ldi	r28, 0x79	; 121
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_global_ctors+0x10>
     12e:	21 97       	sbiw	r28, 0x01	; 1
     130:	fe 01       	movw	r30, r28
     132:	0e 94 11 0b 	call	0x1622	; 0x1622 <__tablejump2__>
     136:	c7 37       	cpi	r28, 0x77	; 119
     138:	d1 07       	cpc	r29, r17
     13a:	c9 f7       	brne	.-14     	; 0x12e <__do_global_ctors+0x8>
     13c:	0e 94 65 05 	call	0xaca	; 0xaca <main>
     140:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__do_global_dtors>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <setup>:
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
Mp3Player *mp3;

void setup() {
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     14c:	26 e0       	ldi	r18, 0x06	; 6
     14e:	40 e8       	ldi	r20, 0x80	; 128
     150:	55 e2       	ldi	r21, 0x25	; 37
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	8e ed       	ldi	r24, 0xDE	; 222
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN14HardwareSerial5beginEmh>
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
     15e:	60 e1       	ldi	r22, 0x10	; 16
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	8e ed       	ldi	r24, 0xDE	; 222
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);
     16a:	8c e2       	ldi	r24, 0x2C	; 44
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 74 05 	call	0xae8	; 0xae8 <_Znwj>
     172:	ec 01       	movw	r28, r24
     174:	4b e0       	ldi	r20, 0x0B	; 11
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	6a e0       	ldi	r22, 0x0A	; 10
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	0e 94 88 01 	call	0x310	; 0x310 <_ZN9Mp3PlayerC1Eii>
     180:	d0 93 d7 01 	sts	0x01D7, r29	; 0x8001d7 <__data_end+0x1>
     184:	c0 93 d6 01 	sts	0x01D6, r28	; 0x8001d6 <__data_end>

	led.TurnOff();
     188:	8c ed       	ldi	r24, 0xDC	; 220
     18a:	91 e0       	ldi	r25, 0x01	; 1
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
		Serial.println("Starting program for Alien Cake");
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);

	led.TurnOff();
     190:	0c 94 16 01 	jmp	0x22c	; 0x22c <_ZN10LedBlinker7TurnOffEv>

00000194 <loop>:
}

void loop() {
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
	#ifdef DEBUG
		Serial.println("Distance detector on");
     198:	60 e3       	ldi	r22, 0x30	; 48
     19a:	71 e0       	ldi	r23, 0x01	; 1
     19c:	8e ed       	ldi	r24, 0xDE	; 222
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
     1a4:	88 ed       	ldi	r24, 0xD8	; 216
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN12LengthSensor7MeasureEv>
     1ac:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		Serial.println(distance);
     1ae:	4a e0       	ldi	r20, 0x0A	; 10
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	bc 01       	movw	r22, r24
     1b4:	8e ed       	ldi	r24, 0xDE	; 222
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN5Print7printlnEii>
	#endif
		
	if(distance > 0 && distance < 50)
     1bc:	21 97       	sbiw	r28, 0x01	; 1
     1be:	e1 97       	sbiw	r28, 0x31	; 49
     1c0:	80 f4       	brcc	.+32     	; 0x1e2 <loop+0x4e>
	{
		led.TurnOn();
     1c2:	8c ed       	ldi	r24, 0xDC	; 220
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 11 01 	call	0x222	; 0x222 <_ZN10LedBlinker6TurnOnEv>
		mp3->Play();
     1ca:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
     1ce:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
     1d2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN9Mp3Player4PlayEv>
		delay(2000);
     1d6:	60 ed       	ldi	r22, 0xD0	; 208
     1d8:	77 e0       	ldi	r23, 0x07	; 7
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 16 07 	call	0xe2c	; 0xe2c <delay>
	}
	
	led.TurnOff();
     1e2:	8c ed       	ldi	r24, 0xDC	; 220
     1e4:	91 e0       	ldi	r25, 0x01	; 1
}
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
		led.TurnOn();
		mp3->Play();
		delay(2000);
	}
	
	led.TurnOff();
     1ea:	0c 94 16 01 	jmp	0x22c	; 0x22c <_ZN10LedBlinker7TurnOffEv>

000001ee <_GLOBAL__sub_I_led>:
#define MP3_TX 11
#define MP3_RX 10

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     1ee:	64 e0       	ldi	r22, 0x04	; 4
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8c ed       	ldi	r24, 0xDC	; 220
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
     1fa:	46 e0       	ldi	r20, 0x06	; 6
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	67 e0       	ldi	r22, 0x07	; 7
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	88 ed       	ldi	r24, 0xD8	; 216
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0c 94 1b 01 	jmp	0x236	; 0x236 <_ZN12LengthSensorC1Eii>

0000020a <_GLOBAL__sub_D_led>:
#define MP3_TX 11
#define MP3_RX 10

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     20a:	8c ed       	ldi	r24, 0xDC	; 220
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	0c 94 10 01 	jmp	0x220	; 0x220 <_ZN10LedBlinkerD1Ev>

00000212 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
     212:	fc 01       	movw	r30, r24
     214:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
     216:	60 83       	st	Z, r22
     218:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <pinMode>

00000220 <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
     220:	08 95       	ret

00000222 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	0c 94 fd 07 	jmp	0xffa	; 0xffa <digitalWrite>

0000022c <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	80 81       	ld	r24, Z
     232:	0c 94 fd 07 	jmp	0xffa	; 0xffa <digitalWrite>

00000236 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
     23c:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
     23e:	68 83       	st	Y, r22
     240:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
     242:	5b 83       	std	Y+3, r21	; 0x03
     244:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	0e 94 c1 07 	call	0xf82	; 0xf82 <pinMode>
	pinMode(m_trigPin, OUTPUT);
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
     254:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <pinMode>

00000258 <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	0e 94 fd 07 	call	0xffa	; 0xffa <digitalWrite>
	delayMicroseconds(10);
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 52 07 	call	0xea4	; 0xea4 <delayMicroseconds>
	digitalWrite(m_trigPin, LOW);
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	8a 81       	ldd	r24, Y+2	; 0x02
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(m_trigPin, LOW);
     276:	0c 94 fd 07 	jmp	0xffa	; 0xffa <digitalWrite>

0000027a <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ec 01       	movw	r28, r24
	  Ping();
     288:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     28c:	88 81       	ld	r24, Y
     28e:	0e 94 2c 08 	call	0x1058	; 0x1058 <digitalRead>
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	29 f0       	breq	.+10     	; 0x2a0 <_ZN12LengthSensor7MeasureEv+0x26>
	  {
		  delayMicroseconds(1);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 52 07 	call	0xea4	; 0xea4 <delayMicroseconds>
int LengthSensor::Measure()
{	
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <_ZN12LengthSensor7MeasureEv+0x12>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
     2a0:	0e 94 f1 06 	call	0xde2	; 0xde2 <micros>
     2a4:	6b 01       	movw	r12, r22
     2a6:	7c 01       	movw	r14, r24
	  while(digitalRead(m_echoPin) != LOW) {
     2a8:	88 81       	ld	r24, Y
     2aa:	0e 94 2c 08 	call	0x1058	; 0x1058 <digitalRead>
     2ae:	89 2b       	or	r24, r25
     2b0:	29 f0       	breq	.+10     	; 0x2bc <_ZN12LengthSensor7MeasureEv+0x42>
		  delayMicroseconds(1);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 52 07 	call	0xea4	; 0xea4 <delayMicroseconds>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
	  while(digitalRead(m_echoPin) != LOW) {
     2ba:	f6 cf       	rjmp	.-20     	; 0x2a8 <_ZN12LengthSensor7MeasureEv+0x2e>
		  delayMicroseconds(1);
	  }

	  time = micros() - time;
     2bc:	0e 94 f1 06 	call	0xde2	; 0xde2 <micros>
     2c0:	9b 01       	movw	r18, r22
     2c2:	ac 01       	movw	r20, r24
     2c4:	2c 19       	sub	r18, r12
     2c6:	3d 09       	sbc	r19, r13
     2c8:	4e 09       	sbc	r20, r14
     2ca:	5f 09       	sbc	r21, r15
     2cc:	69 01       	movw	r12, r18
     2ce:	7a 01       	movw	r14, r20
	  Serial.println(time);	  
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b7 01       	movw	r22, r14
     2d6:	a6 01       	movw	r20, r12
     2d8:	8e ed       	ldi	r24, 0xDE	; 222
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN5Print7printlnEmi>
	  return (time * 34) / 2000;
     2e0:	a2 e2       	ldi	r26, 0x22	; 34
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	a7 01       	movw	r20, r14
     2e6:	96 01       	movw	r18, r12
     2e8:	0e 94 17 0b 	call	0x162e	; 0x162e <__muluhisi3>
     2ec:	20 ed       	ldi	r18, 0xD0	; 208
     2ee:	37 e0       	ldi	r19, 0x07	; 7
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodsi4>
}
     2f8:	c9 01       	movw	r24, r18
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
     302:	df 90       	pop	r13
     304:	cf 90       	pop	r12
     306:	08 95       	ret

00000308 <_ZN9Mp3Player9VolumeMaxEv>:
}

void Mp3Player::VolumeMax()
{
	//Sets max volume
	m_mp3Player.volume(30);
     308:	6e e1       	ldi	r22, 0x1E	; 30
     30a:	06 96       	adiw	r24, 0x06	; 6
     30c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_ZN19DFRobotDFPlayerMini6volumeEh>

00000310 <_ZN9Mp3PlayerC1Eii>:

#include <Arduino.h>
#include <Mp3Player.h>


Mp3Player::Mp3Player(int rxPin, int txPin)
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	ec 01       	movw	r28, r24
     31e:	8c 01       	movw	r16, r24
     320:	0a 5f       	subi	r16, 0xFA	; 250
     322:	1f 4f       	sbci	r17, 0xFF	; 255
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
     324:	84 ef       	ldi	r24, 0xF4	; 244
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	8c 87       	std	Y+12, r24	; 0x0c
     32e:	9d 87       	std	Y+13, r25	; 0x0d
     330:	ae 87       	std	Y+14, r26	; 0x0e
     332:	bf 87       	std	Y+15, r27	; 0x0f
     334:	8a e0       	ldi	r24, 0x0A	; 10
     336:	e6 e0       	ldi	r30, 0x06	; 6
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	de 01       	movw	r26, r28
     33c:	5a 96       	adiw	r26, 0x1a	; 26
     33e:	01 90       	ld	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	8a 95       	dec	r24
     344:	e1 f7       	brne	.-8      	; 0x33e <_ZN9Mp3PlayerC1Eii+0x2e>
     346:	1c a2       	std	Y+36, r1	; 0x24
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	8d a3       	std	Y+37, r24	; 0x25
     34c:	1a a6       	std	Y+42, r1	; 0x2a
     34e:	1b a6       	std	Y+43, r1	; 0x2b
{
	m_rxPin = rxPin;
     350:	79 83       	std	Y+1, r23	; 0x01
     352:	68 83       	st	Y, r22
	m_txPin = txPin;
     354:	5b 83       	std	Y+3, r21	; 0x03
     356:	4a 83       	std	Y+2, r20	; 0x02
	m_softwareSerial = new SoftwareSerial(m_rxPin, m_txPin);
     358:	8f e1       	ldi	r24, 0x1F	; 31
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 74 05 	call	0xae8	; 0xae8 <_Znwj>
     360:	7c 01       	movw	r14, r24
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	4a 81       	ldd	r20, Y+2	; 0x02
     366:	68 81       	ld	r22, Y
     368:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN14SoftwareSerialC1Ehhb>
     36c:	fd 82       	std	Y+5, r15	; 0x05
     36e:	ec 82       	std	Y+4, r14	; 0x04
	m_softwareSerial->begin(9600);
     370:	40 e8       	ldi	r20, 0x80	; 128
     372:	55 e2       	ldi	r21, 0x25	; 37
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	c7 01       	movw	r24, r14
     37a:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN14SoftwareSerial5beginEl>
	if(!m_mp3Player.begin(*m_softwareSerial))
     37e:	6c 81       	ldd	r22, Y+4	; 0x04
     380:	7d 81       	ldd	r23, Y+5	; 0x05
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	c8 01       	movw	r24, r16
     386:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
     38a:	81 11       	cpse	r24, r1
     38c:	13 c0       	rjmp	.+38     	; 0x3b4 <_ZN9Mp3PlayerC1Eii+0xa4>
	{
		#ifdef DEBUG
			Serial.println("Unable to begin:");
     38e:	65 e4       	ldi	r22, 0x45	; 69
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	8e ed       	ldi	r24, 0xDE	; 222
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
			Serial.println("1. Please recheck the connection!");
     39a:	66 e5       	ldi	r22, 0x56	; 86
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	8e ed       	ldi	r24, 0xDE	; 222
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
			Serial.println("2. Please insert SD card!");
     3a6:	68 e7       	ldi	r22, 0x78	; 120
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	8e ed       	ldi	r24, 0xDE	; 222
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
     3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <_ZN9Mp3PlayerC1Eii+0xa2>
		//Hangs here if something goes wrong
		while(true);
	}

	#ifdef DEBUG
		Serial.println("MP3 player is online");
     3b4:	62 e9       	ldi	r22, 0x92	; 146
     3b6:	71 e0       	ldi	r23, 0x01	; 1
     3b8:	8e ed       	ldi	r24, 0xDE	; 222
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN5Print7printlnEPKc>
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	c8 01       	movw	r24, r16
     3c4:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN19DFRobotDFPlayerMini2EQEh>
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	c8 01       	movw	r24, r16
     3cc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>

	VolumeMax();
     3d0:	ce 01       	movw	r24, r28
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
		Serial.println("MP3 player is online");
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);

	VolumeMax();
     3de:	0c 94 84 01 	jmp	0x308	; 0x308 <_ZN9Mp3Player9VolumeMaxEv>

000003e2 <_ZN9Mp3Player4PlayEv>:
	m_mp3Player.volume(30);
}

void Mp3Player::Play()
{
	m_mp3Player.playMp3Folder(2);
     3e2:	62 e0       	ldi	r22, 0x02	; 2
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	06 96       	adiw	r24, 0x06	; 6
     3e8:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>

000003ec <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::enableLoopAll(){
  sendStack(0x11, 0x01);
}

void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
     3ec:	fb 01       	movw	r30, r22
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	69 5f       	subi	r22, 0xF9	; 249
     3f2:	7f 4f       	sbci	r23, 0xFF	; 255
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	21 91       	ld	r18, Z+
     3fa:	82 0f       	add	r24, r18
     3fc:	91 1d       	adc	r25, r1
     3fe:	e6 17       	cp	r30, r22
     400:	f7 07       	cpc	r31, r23
     402:	d1 f7       	brne	.-12     	; 0x3f8 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0xc>
     404:	91 95       	neg	r25
     406:	81 95       	neg	r24
     408:	91 09       	sbc	r25, r1
     40a:	08 95       	ret

0000040c <_ZN19DFRobotDFPlayerMini10parseStackEv>:
     40c:	dc 01       	movw	r26, r24
     40e:	1d 96       	adiw	r26, 0x0d	; 13
     410:	ec 91       	ld	r30, X
     412:	1d 97       	sbiw	r26, 0x0d	; 13
     414:	91 96       	adiw	r26, 0x21	; 33
     416:	ec 93       	st	X, r30
     418:	91 97       	sbiw	r26, 0x21	; 33
     41a:	1f 96       	adiw	r26, 0x0f	; 15
     41c:	8c 91       	ld	r24, X
     41e:	1f 97       	sbiw	r26, 0x0f	; 15
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	98 2f       	mov	r25, r24
     424:	88 27       	eor	r24, r24
     426:	50 96       	adiw	r26, 0x10	; 16
     428:	2c 91       	ld	r18, X
     42a:	50 97       	sbiw	r26, 0x10	; 16
     42c:	82 0f       	add	r24, r18
     42e:	91 1d       	adc	r25, r1
     430:	93 96       	adiw	r26, 0x23	; 35
     432:	9c 93       	st	X, r25
     434:	8e 93       	st	-X, r24
     436:	92 97       	sbiw	r26, 0x22	; 34
     438:	4e 2f       	mov	r20, r30
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	fa 01       	movw	r30, r20
     43e:	fa 97       	sbiw	r30, 0x3a	; 58
     440:	e6 31       	cpi	r30, 0x16	; 22
     442:	f1 05       	cpc	r31, r1
     444:	48 f5       	brcc	.+82     	; 0x498 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x8c>
     446:	ec 5c       	subi	r30, 0xCC	; 204
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__tablejump2__>
     44e:	5e 96       	adiw	r26, 0x1e	; 30
     450:	1c 92       	st	X, r1
     452:	5e 97       	sbiw	r26, 0x1e	; 30
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	19 c0       	rjmp	.+50     	; 0x48a <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     458:	81 ff       	sbrs	r24, 1
     45a:	2e c0       	rjmp	.+92     	; 0x4b8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     45c:	5e 96       	adiw	r26, 0x1e	; 30
     45e:	1c 92       	st	X, r1
     460:	5e 97       	sbiw	r26, 0x1e	; 30
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	12 c0       	rjmp	.+36     	; 0x48a <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     466:	81 ff       	sbrs	r24, 1
     468:	27 c0       	rjmp	.+78     	; 0x4b8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     46a:	5e 96       	adiw	r26, 0x1e	; 30
     46c:	1c 92       	st	X, r1
     46e:	5e 97       	sbiw	r26, 0x1e	; 30
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0b c0       	rjmp	.+22     	; 0x48a <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     474:	81 ff       	sbrs	r24, 1
     476:	20 c0       	rjmp	.+64     	; 0x4b8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     478:	5e 96       	adiw	r26, 0x1e	; 30
     47a:	1c 92       	st	X, r1
     47c:	5e 97       	sbiw	r26, 0x1e	; 30
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	04 c0       	rjmp	.+8      	; 0x48a <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     482:	5e 96       	adiw	r26, 0x1e	; 30
     484:	1c 92       	st	X, r1
     486:	5e 97       	sbiw	r26, 0x1e	; 30
     488:	86 e0       	ldi	r24, 0x06	; 6
     48a:	90 96       	adiw	r26, 0x20	; 32
     48c:	8c 93       	st	X, r24
     48e:	90 97       	sbiw	r26, 0x20	; 32
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	94 96       	adiw	r26, 0x24	; 36
     494:	8c 93       	st	X, r24
     496:	08 95       	ret
     498:	5e 96       	adiw	r26, 0x1e	; 30
     49a:	1c 92       	st	X, r1
     49c:	5e 97       	sbiw	r26, 0x1e	; 30
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 96       	adiw	r26, 0x20	; 32
     4a2:	8c 93       	st	X, r24
     4a4:	90 97       	sbiw	r26, 0x20	; 32
     4a6:	93 96       	adiw	r26, 0x23	; 35
     4a8:	1c 92       	st	X, r1
     4aa:	1e 92       	st	-X, r1
     4ac:	92 97       	sbiw	r26, 0x22	; 34
     4ae:	94 96       	adiw	r26, 0x24	; 36
     4b0:	8c 93       	st	X, r24
     4b2:	94 97       	sbiw	r26, 0x24	; 36
     4b4:	95 96       	adiw	r26, 0x25	; 37
     4b6:	1c 92       	st	X, r1
     4b8:	08 95       	ret

000004ba <_ZN19DFRobotDFPlayerMini13validateStackEv>:
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
     4c0:	bc 01       	movw	r22, r24
     4c2:	66 5f       	subi	r22, 0xF6	; 246
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     4ca:	29 89       	ldd	r18, Y+17	; 0x11
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	32 2f       	mov	r19, r18
     4d0:	22 27       	eor	r18, r18
     4d2:	4a 89       	ldd	r20, Y+18	; 0x12
     4d4:	24 0f       	add	r18, r20
     4d6:	31 1d       	adc	r19, r1
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	09 f0       	breq	.+2      	; 0x4e2 <_ZN19DFRobotDFPlayerMini13validateStackEv+0x28>
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	84 2f       	mov	r24, r20
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <_ZN19DFRobotDFPlayerMini9availableEv>:
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
     4fc:	88 81       	ld	r24, Y
     4fe:	99 81       	ldd	r25, Y+1	; 0x01
     500:	dc 01       	movw	r26, r24
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	04 80       	ldd	r0, Z+4	; 0x04
     508:	f5 81       	ldd	r31, Z+5	; 0x05
     50a:	e0 2d       	mov	r30, r0
     50c:	09 95       	icall
     50e:	89 2b       	or	r24, r25
     510:	09 f4       	brne	.+2      	; 0x514 <_ZN19DFRobotDFPlayerMini9availableEv+0x2a>
     512:	44 c0       	rjmp	.+136    	; 0x59c <_ZN19DFRobotDFPlayerMini9availableEv+0xb2>
     514:	0e 8d       	ldd	r16, Y+30	; 0x1e
     516:	88 81       	ld	r24, Y
     518:	99 81       	ldd	r25, Y+1	; 0x01
     51a:	dc 01       	movw	r26, r24
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	06 80       	ldd	r0, Z+6	; 0x06
     522:	f7 81       	ldd	r31, Z+7	; 0x07
     524:	e0 2d       	mov	r30, r0
     526:	01 11       	cpse	r16, r1
     528:	07 c0       	rjmp	.+14     	; 0x538 <_ZN19DFRobotDFPlayerMini9availableEv+0x4e>
     52a:	09 95       	icall
     52c:	8a 87       	std	Y+10, r24	; 0x0a
     52e:	8e 37       	cpi	r24, 0x7E	; 126
     530:	29 f7       	brne	.-54     	; 0x4fc <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     532:	1c a2       	std	Y+36, r1	; 0x24
     534:	8e 8d       	ldd	r24, Y+30	; 0x1e
     536:	2f c0       	rjmp	.+94     	; 0x596 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     538:	09 95       	icall
     53a:	fe 01       	movw	r30, r28
     53c:	e0 0f       	add	r30, r16
     53e:	f1 1d       	adc	r31, r1
     540:	82 87       	std	Z+10, r24	; 0x0a
     542:	8e 8d       	ldd	r24, Y+30	; 0x1e
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	49 f0       	breq	.+18     	; 0x55a <_ZN19DFRobotDFPlayerMini9availableEv+0x70>
     548:	89 30       	cpi	r24, 0x09	; 9
     54a:	59 f0       	breq	.+22     	; 0x562 <_ZN19DFRobotDFPlayerMini9availableEv+0x78>
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	19 f5       	brne	.+70     	; 0x596 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     550:	9b 85       	ldd	r25, Y+11	; 0x0b
     552:	9f 3f       	cpi	r25, 0xFF	; 255
     554:	01 f1       	breq	.+64     	; 0x596 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     556:	1e 8e       	std	Y+30, r1	; 0x1e
     558:	1a c0       	rjmp	.+52     	; 0x58e <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
     55a:	9c 85       	ldd	r25, Y+12	; 0x0c
     55c:	96 30       	cpi	r25, 0x06	; 6
     55e:	d9 f0       	breq	.+54     	; 0x596 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     560:	03 c0       	rjmp	.+6      	; 0x568 <_ZN19DFRobotDFPlayerMini9availableEv+0x7e>
     562:	8b 89       	ldd	r24, Y+19	; 0x13
     564:	8f 3e       	cpi	r24, 0xEF	; 239
     566:	11 f0       	breq	.+4      	; 0x56c <_ZN19DFRobotDFPlayerMini9availableEv+0x82>
     568:	1e 8e       	std	Y+30, r1	; 0x1e
     56a:	10 c0       	rjmp	.+32     	; 0x58c <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN19DFRobotDFPlayerMini13validateStackEv>
     572:	1e 8e       	std	Y+30, r1	; 0x1e
     574:	88 23       	and	r24, r24
     576:	51 f0       	breq	.+20     	; 0x58c <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     578:	ce 01       	movw	r24, r28
     57a:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN19DFRobotDFPlayerMini10parseStackEv>
     57e:	1c a1       	ldd	r17, Y+36	; 0x24
     580:	11 23       	and	r17, r17
     582:	69 f1       	breq	.+90     	; 0x5de <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     584:	88 8d       	ldd	r24, Y+24	; 0x18
     586:	81 11       	cpse	r24, r1
     588:	2a c0       	rjmp	.+84     	; 0x5de <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     58a:	26 c0       	rjmp	.+76     	; 0x5d8 <_ZN19DFRobotDFPlayerMini9availableEv+0xee>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	88 a3       	std	Y+32, r24	; 0x20
     590:	1b a2       	std	Y+35, r1	; 0x23
     592:	1a a2       	std	Y+34, r1	; 0x22
     594:	20 c0       	rjmp	.+64     	; 0x5d6 <_ZN19DFRobotDFPlayerMini9availableEv+0xec>
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	8e 8f       	std	Y+30, r24	; 0x1e
     59a:	b0 cf       	rjmp	.-160    	; 0x4fc <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     59c:	8d a1       	ldd	r24, Y+37	; 0x25
     59e:	88 23       	and	r24, r24
     5a0:	e9 f0       	breq	.+58     	; 0x5dc <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     5a2:	0e 94 e5 06 	call	0xdca	; 0xdca <millis>
     5a6:	ca 80       	ldd	r12, Y+2	; 0x02
     5a8:	db 80       	ldd	r13, Y+3	; 0x03
     5aa:	ec 80       	ldd	r14, Y+4	; 0x04
     5ac:	fd 80       	ldd	r15, Y+5	; 0x05
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	8c 19       	sub	r24, r12
     5b4:	9d 09       	sbc	r25, r13
     5b6:	ae 09       	sbc	r26, r14
     5b8:	bf 09       	sbc	r27, r15
     5ba:	ce 80       	ldd	r12, Y+6	; 0x06
     5bc:	df 80       	ldd	r13, Y+7	; 0x07
     5be:	e8 84       	ldd	r14, Y+8	; 0x08
     5c0:	f9 84       	ldd	r15, Y+9	; 0x09
     5c2:	8c 15       	cp	r24, r12
     5c4:	9d 05       	cpc	r25, r13
     5c6:	ae 05       	cpc	r26, r14
     5c8:	bf 05       	cpc	r27, r15
     5ca:	40 f0       	brcs	.+16     	; 0x5dc <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     5cc:	1e 8e       	std	Y+30, r1	; 0x1e
     5ce:	18 a2       	std	Y+32, r1	; 0x20
     5d0:	1b a2       	std	Y+35, r1	; 0x23
     5d2:	1a a2       	std	Y+34, r1	; 0x22
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	8c a3       	std	Y+36, r24	; 0x24
     5d8:	1d a2       	std	Y+37, r1	; 0x25
     5da:	01 c0       	rjmp	.+2      	; 0x5de <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     5dc:	1c a1       	ldd	r17, Y+36	; 0x24
     5de:	81 2f       	mov	r24, r17
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	08 95       	ret

000005f2 <_ZN19DFRobotDFPlayerMini9sendStackEv>:
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
     5f8:	88 8d       	ldd	r24, Y+24	; 0x18
     5fa:	88 23       	and	r24, r24
     5fc:	39 f0       	breq	.+14     	; 0x60c <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1a>
     5fe:	8d a1       	ldd	r24, Y+37	; 0x25
     600:	88 23       	and	r24, r24
     602:	51 f0       	breq	.+20     	; 0x618 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x26>
     604:	ce 01       	movw	r24, r28
     606:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN19DFRobotDFPlayerMini9availableEv>
     60a:	f9 cf       	rjmp	.-14     	; 0x5fe <_ZN19DFRobotDFPlayerMini9sendStackEv+0xc>
     60c:	6a e0       	ldi	r22, 0x0A	; 10
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 16 07 	call	0xe2c	; 0xe2c <delay>
     618:	88 81       	ld	r24, Y
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	dc 01       	movw	r26, r24
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	02 80       	ldd	r0, Z+2	; 0x02
     624:	f3 81       	ldd	r31, Z+3	; 0x03
     626:	e0 2d       	mov	r30, r0
     628:	4a e0       	ldi	r20, 0x0A	; 10
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	be 01       	movw	r22, r28
     62e:	6c 5e       	subi	r22, 0xEC	; 236
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	09 95       	icall
     634:	0e 94 e5 06 	call	0xdca	; 0xdca <millis>
     638:	6a 83       	std	Y+2, r22	; 0x02
     63a:	7b 83       	std	Y+3, r23	; 0x03
     63c:	8c 83       	std	Y+4, r24	; 0x04
     63e:	9d 83       	std	Y+5, r25	; 0x05
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	98 8d       	ldd	r25, Y+24	; 0x18
     644:	91 11       	cpse	r25, r1
     646:	01 c0       	rjmp	.+2      	; 0x64a <_ZN19DFRobotDFPlayerMini9sendStackEv+0x58>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	8d a3       	std	Y+37, r24	; 0x25
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>:
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	6f 8b       	std	Y+23, r22	; 0x17
     65a:	59 8f       	std	Y+25, r21	; 0x19
     65c:	4a 8f       	std	Y+26, r20	; 0x1a
     65e:	bc 01       	movw	r22, r24
     660:	6c 5e       	subi	r22, 0xEC	; 236
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     668:	9b 8f       	std	Y+27, r25	; 0x1b
     66a:	8c 8f       	std	Y+28, r24	; 0x1c
     66c:	ce 01       	movw	r24, r28
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_ZN19DFRobotDFPlayerMini9sendStackEv>

00000676 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	0c 94 29 03 	jmp	0x652	; 0x652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

0000067e <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8d a3       	std	Y+37, r24	; 0x25
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN19DFRobotDFPlayerMini9availableEv>
     68e:	88 23       	and	r24, r24
     690:	d9 f3       	breq	.-10     	; 0x688 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	98 a1       	ldd	r25, Y+32	; 0x20
     696:	91 11       	cpse	r25, r1
     698:	01 c0       	rjmp	.+2      	; 0x69c <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0x1e>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <_ZN19DFRobotDFPlayerMini6volumeEh>:
     6a2:	46 2f       	mov	r20, r22
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	66 e0       	ldi	r22, 0x06	; 6
     6a8:	0c 94 29 03 	jmp	0x652	; 0x652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

000006ac <_ZN19DFRobotDFPlayerMini2EQEh>:
     6ac:	46 2f       	mov	r20, r22
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	67 e0       	ldi	r22, 0x07	; 7
     6b2:	0c 94 29 03 	jmp	0x652	; 0x652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

000006b6 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>:
     6b6:	46 2f       	mov	r20, r22
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	69 e0       	ldi	r22, 0x09	; 9
     6bc:	0e 94 29 03 	call	0x652	; 0x652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     6c0:	68 ec       	ldi	r22, 0xC8	; 200
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <delay>

000006cc <_ZN19DFRobotDFPlayerMini5resetEv>:
     6cc:	6c e0       	ldi	r22, 0x0C	; 12
     6ce:	0c 94 3b 03 	jmp	0x676	; 0x676 <_ZN19DFRobotDFPlayerMini9sendStackEh>

000006d2 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
     6da:	14 2f       	mov	r17, r20
     6dc:	44 23       	and	r20, r20
     6de:	19 f0       	breq	.+6      	; 0x6e6 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x14>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	88 8f       	std	Y+24, r24	; 0x18
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x16>
     6e6:	18 8e       	std	Y+24, r1	; 0x18
     6e8:	79 83       	std	Y+1, r23	; 0x01
     6ea:	68 83       	st	Y, r22
     6ec:	8e 81       	ldd	r24, Y+6	; 0x06
     6ee:	9f 81       	ldd	r25, Y+7	; 0x07
     6f0:	a8 85       	ldd	r26, Y+8	; 0x08
     6f2:	b9 85       	ldd	r27, Y+9	; 0x09
     6f4:	88 54       	subi	r24, 0x48	; 72
     6f6:	94 4f       	sbci	r25, 0xF4	; 244
     6f8:	af 4f       	sbci	r26, 0xFF	; 255
     6fa:	bf 4f       	sbci	r27, 0xFF	; 255
     6fc:	8e 83       	std	Y+6, r24	; 0x06
     6fe:	9f 83       	std	Y+7, r25	; 0x07
     700:	a8 87       	std	Y+8, r26	; 0x08
     702:	b9 87       	std	Y+9, r27	; 0x09
     704:	ce 01       	movw	r24, r28
     706:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN19DFRobotDFPlayerMini5resetEv>
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
     710:	8e 81       	ldd	r24, Y+6	; 0x06
     712:	9f 81       	ldd	r25, Y+7	; 0x07
     714:	a8 85       	ldd	r26, Y+8	; 0x08
     716:	b9 85       	ldd	r27, Y+9	; 0x09
     718:	88 5b       	subi	r24, 0xB8	; 184
     71a:	9b 40       	sbci	r25, 0x0B	; 11
     71c:	a1 09       	sbc	r26, r1
     71e:	b1 09       	sbc	r27, r1
     720:	8e 83       	std	Y+6, r24	; 0x06
     722:	9f 83       	std	Y+7, r25	; 0x07
     724:	a8 87       	std	Y+8, r26	; 0x08
     726:	b9 87       	std	Y+9, r27	; 0x09
     728:	68 ec       	ldi	r22, 0xC8	; 200
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 16 07 	call	0xe2c	; 0xe2c <delay>
     734:	1c a2       	std	Y+36, r1	; 0x24
     736:	88 a1       	ldd	r24, Y+32	; 0x20
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	19 f0       	breq	.+6      	; 0x742 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x70>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	81 27       	eor	r24, r17
     740:	01 c0       	rjmp	.+2      	; 0x744 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x72>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>:
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
     74c:	ab 01       	movw	r20, r22
  sendStack(0x12, fileNumber);
     74e:	62 e1       	ldi	r22, 0x12	; 18
     750:	0c 94 29 03 	jmp	0x652	; 0x652 <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000754 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     754:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     756:	91 8d       	ldd	r25, Z+25	; 0x19
     758:	22 8d       	ldd	r18, Z+26	; 0x1a
     75a:	89 2f       	mov	r24, r25
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 5c       	subi	r24, 0xC0	; 192
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	82 1b       	sub	r24, r18
     764:	91 09       	sbc	r25, r1
}
     766:	8f 73       	andi	r24, 0x3F	; 63
     768:	99 27       	eor	r25, r25
     76a:	08 95       	ret

0000076c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     76c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     76e:	91 8d       	ldd	r25, Z+25	; 0x19
     770:	82 8d       	ldd	r24, Z+26	; 0x1a
     772:	98 17       	cp	r25, r24
     774:	31 f0       	breq	.+12     	; 0x782 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     776:	82 8d       	ldd	r24, Z+26	; 0x1a
     778:	e8 0f       	add	r30, r24
     77a:	f1 1d       	adc	r31, r1
     77c:	85 8d       	ldd	r24, Z+29	; 0x1d
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     786:	08 95       	ret

00000788 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     788:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     78a:	91 8d       	ldd	r25, Z+25	; 0x19
     78c:	82 8d       	ldd	r24, Z+26	; 0x1a
     78e:	98 17       	cp	r25, r24
     790:	61 f0       	breq	.+24     	; 0x7aa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     792:	82 8d       	ldd	r24, Z+26	; 0x1a
     794:	df 01       	movw	r26, r30
     796:	a8 0f       	add	r26, r24
     798:	b1 1d       	adc	r27, r1
     79a:	5d 96       	adiw	r26, 0x1d	; 29
     79c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     79e:	92 8d       	ldd	r25, Z+26	; 0x1a
     7a0:	9f 5f       	subi	r25, 0xFF	; 255
     7a2:	9f 73       	andi	r25, 0x3F	; 63
     7a4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7ae:	08 95       	ret

000007b0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7b0:	8d e2       	ldi	r24, 0x2D	; 45
     7b2:	95 e0       	ldi	r25, 0x05	; 5
     7b4:	89 2b       	or	r24, r25
     7b6:	49 f0       	breq	.+18     	; 0x7ca <_Z14serialEventRunv+0x1a>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	29 f0       	breq	.+10     	; 0x7ca <_Z14serialEventRunv+0x1a>
     7c0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z17Serial0_availablev>
     7c4:	81 11       	cpse	r24, r1
     7c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     7ca:	08 95       	ret

000007cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7cc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7ce:	84 8d       	ldd	r24, Z+28	; 0x1c
     7d0:	df 01       	movw	r26, r30
     7d2:	a8 0f       	add	r26, r24
     7d4:	b1 1d       	adc	r27, r1
     7d6:	a3 5a       	subi	r26, 0xA3	; 163
     7d8:	bf 4f       	sbci	r27, 0xFF	; 255
     7da:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7dc:	84 8d       	ldd	r24, Z+28	; 0x1c
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	8f 73       	andi	r24, 0x3F	; 63
     7e4:	99 27       	eor	r25, r25
     7e6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7e8:	a6 89       	ldd	r26, Z+22	; 0x16
     7ea:	b7 89       	ldd	r27, Z+23	; 0x17
     7ec:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     7ee:	a0 89       	ldd	r26, Z+16	; 0x10
     7f0:	b1 89       	ldd	r27, Z+17	; 0x11
     7f2:	8c 91       	ld	r24, X
     7f4:	80 64       	ori	r24, 0x40	; 64
     7f6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     7f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     7fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     7fc:	98 13       	cpse	r25, r24
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     800:	02 88       	ldd	r0, Z+18	; 0x12
     802:	f3 89       	ldd	r31, Z+19	; 0x13
     804:	e0 2d       	mov	r30, r0
     806:	80 81       	ld	r24, Z
     808:	8f 7d       	andi	r24, 0xDF	; 223
     80a:	80 83       	st	Z, r24
     80c:	08 95       	ret

0000080e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
  _written = true;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     820:	9b 8d       	ldd	r25, Y+27	; 0x1b
     822:	8c 8d       	ldd	r24, Y+28	; 0x1c
     824:	98 13       	cpse	r25, r24
     826:	05 c0       	rjmp	.+10     	; 0x832 <_ZN14HardwareSerial5writeEh+0x24>
     828:	e8 89       	ldd	r30, Y+16	; 0x10
     82a:	f9 89       	ldd	r31, Y+17	; 0x11
     82c:	80 81       	ld	r24, Z
     82e:	85 fd       	sbrc	r24, 5
     830:	24 c0       	rjmp	.+72     	; 0x87a <_ZN14HardwareSerial5writeEh+0x6c>
     832:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     834:	0b 8d       	ldd	r16, Y+27	; 0x1b
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	0f 5f       	subi	r16, 0xFF	; 255
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	0f 73       	andi	r16, 0x3F	; 63
     83e:	11 27       	eor	r17, r17
     840:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     842:	8c 8d       	ldd	r24, Y+28	; 0x1c
     844:	e8 12       	cpse	r14, r24
     846:	0c c0       	rjmp	.+24     	; 0x860 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	07 fc       	sbrc	r0, 7
     84c:	fa cf       	rjmp	.-12     	; 0x842 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     84e:	e8 89       	ldd	r30, Y+16	; 0x10
     850:	f9 89       	ldd	r31, Y+17	; 0x11
     852:	80 81       	ld	r24, Z
     854:	85 ff       	sbrs	r24, 5
     856:	f5 cf       	rjmp	.-22     	; 0x842 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     85e:	f1 cf       	rjmp	.-30     	; 0x842 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     860:	8b 8d       	ldd	r24, Y+27	; 0x1b
     862:	fe 01       	movw	r30, r28
     864:	e8 0f       	add	r30, r24
     866:	f1 1d       	adc	r31, r1
     868:	e3 5a       	subi	r30, 0xA3	; 163
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     86e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     870:	ea 89       	ldd	r30, Y+18	; 0x12
     872:	fb 89       	ldd	r31, Y+19	; 0x13
     874:	80 81       	ld	r24, Z
     876:	80 62       	ori	r24, 0x20	; 32
     878:	07 c0       	rjmp	.+14     	; 0x888 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     87a:	ee 89       	ldd	r30, Y+22	; 0x16
     87c:	ff 89       	ldd	r31, Y+23	; 0x17
     87e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     880:	e8 89       	ldd	r30, Y+16	; 0x10
     882:	f9 89       	ldd	r31, Y+17	; 0x11
     884:	80 81       	ld	r24, Z
     886:	80 64       	ori	r24, 0x40	; 64
     888:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	08 95       	ret

0000089c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8a2:	88 8d       	ldd	r24, Y+24	; 0x18
     8a4:	88 23       	and	r24, r24
     8a6:	c9 f0       	breq	.+50     	; 0x8da <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     8a8:	ea 89       	ldd	r30, Y+18	; 0x12
     8aa:	fb 89       	ldd	r31, Y+19	; 0x13
     8ac:	80 81       	ld	r24, Z
     8ae:	85 fd       	sbrc	r24, 5
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <_ZN14HardwareSerial5flushEv+0x20>
     8b2:	a8 89       	ldd	r26, Y+16	; 0x10
     8b4:	b9 89       	ldd	r27, Y+17	; 0x11
     8b6:	8c 91       	ld	r24, X
     8b8:	86 fd       	sbrc	r24, 6
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	07 fc       	sbrc	r0, 7
     8c0:	f5 cf       	rjmp	.-22     	; 0x8ac <_ZN14HardwareSerial5flushEv+0x10>
     8c2:	80 81       	ld	r24, Z
     8c4:	85 ff       	sbrs	r24, 5
     8c6:	f2 cf       	rjmp	.-28     	; 0x8ac <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     8c8:	a8 89       	ldd	r26, Y+16	; 0x10
     8ca:	b9 89       	ldd	r27, Y+17	; 0x11
     8cc:	8c 91       	ld	r24, X
     8ce:	85 ff       	sbrs	r24, 5
     8d0:	ed cf       	rjmp	.-38     	; 0x8ac <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8d8:	e7 cf       	rjmp	.-50     	; 0x8a8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
     8f0:	6a 01       	movw	r12, r20
     8f2:	7b 01       	movw	r14, r22
     8f4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8f6:	e8 89       	ldd	r30, Y+16	; 0x10
     8f8:	f9 89       	ldd	r31, Y+17	; 0x11
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8fe:	41 15       	cp	r20, r1
     900:	51 4e       	sbci	r21, 0xE1	; 225
     902:	61 05       	cpc	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	b1 f0       	breq	.+44     	; 0x934 <__stack+0x35>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	79 e0       	ldi	r23, 0x09	; 9
     90c:	8d e3       	ldi	r24, 0x3D	; 61
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a7 01       	movw	r20, r14
     912:	96 01       	movw	r18, r12
     914:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodsi4>
     918:	da 01       	movw	r26, r20
     91a:	c9 01       	movw	r24, r18
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	a1 09       	sbc	r26, r1
     920:	b1 09       	sbc	r27, r1
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     92c:	21 15       	cp	r18, r1
     92e:	80 e1       	ldi	r24, 0x10	; 16
     930:	38 07       	cpc	r19, r24
     932:	a8 f0       	brcs	.+42     	; 0x95e <__stack+0x5f>
  {
    *_ucsra = 0;
     934:	e8 89       	ldd	r30, Y+16	; 0x10
     936:	f9 89       	ldd	r31, Y+17	; 0x11
     938:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     93a:	60 e8       	ldi	r22, 0x80	; 128
     93c:	74 e8       	ldi	r23, 0x84	; 132
     93e:	8e e1       	ldi	r24, 0x1E	; 30
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a7 01       	movw	r20, r14
     944:	96 01       	movw	r18, r12
     946:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodsi4>
     94a:	da 01       	movw	r26, r20
     94c:	c9 01       	movw	r24, r18
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	a1 09       	sbc	r26, r1
     952:	b1 09       	sbc	r27, r1
     954:	b6 95       	lsr	r27
     956:	a7 95       	ror	r26
     958:	97 95       	ror	r25
     95a:	87 95       	ror	r24
     95c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     95e:	ec 85       	ldd	r30, Y+12	; 0x0c
     960:	fd 85       	ldd	r31, Y+13	; 0x0d
     962:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     964:	ee 85       	ldd	r30, Y+14	; 0x0e
     966:	ff 85       	ldd	r31, Y+15	; 0x0f
     968:	20 83       	st	Z, r18

  _written = false;
     96a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     96c:	ec 89       	ldd	r30, Y+20	; 0x14
     96e:	fd 89       	ldd	r31, Y+21	; 0x15
     970:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     972:	ea 89       	ldd	r30, Y+18	; 0x12
     974:	fb 89       	ldd	r31, Y+19	; 0x13
     976:	80 81       	ld	r24, Z
     978:	80 61       	ori	r24, 0x10	; 16
     97a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     97c:	ea 89       	ldd	r30, Y+18	; 0x12
     97e:	fb 89       	ldd	r31, Y+19	; 0x13
     980:	80 81       	ld	r24, Z
     982:	88 60       	ori	r24, 0x08	; 8
     984:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     986:	ea 89       	ldd	r30, Y+18	; 0x12
     988:	fb 89       	ldd	r31, Y+19	; 0x13
     98a:	80 81       	ld	r24, Z
     98c:	80 68       	ori	r24, 0x80	; 128
     98e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     990:	ea 89       	ldd	r30, Y+18	; 0x12
     992:	fb 89       	ldd	r31, Y+19	; 0x13
     994:	80 81       	ld	r24, Z
     996:	8f 7d       	andi	r24, 0xDF	; 223
     998:	80 83       	st	Z, r24
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	08 95       	ret

000009aa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	2f 93       	push	r18
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9be:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <Serial+0x10>
     9c2:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <Serial+0x11>
     9c6:	80 81       	ld	r24, Z
     9c8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Serial+0x16>
     9cc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <Serial+0x17>
     9d0:	82 fd       	sbrc	r24, 2
     9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9d4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9d6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Serial+0x19>
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9de:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <Serial+0x1a>
     9e2:	82 17       	cp	r24, r18
     9e4:	51 f0       	breq	.+20     	; 0x9fa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9e6:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <Serial+0x19>
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	e2 52       	subi	r30, 0x22	; 34
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9f2:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Serial+0x19>
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9f8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a30:	8e ed       	ldi	r24, 0xDE	; 222
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a5a:	8e ed       	ldi	r24, 0xDE	; 222
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN14HardwareSerial9availableEv>
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	89 2b       	or	r24, r25
     a66:	09 f4       	brne	.+2      	; 0xa6a <_Z17Serial0_availablev+0x10>
     a68:	20 e0       	ldi	r18, 0x00	; 0
}
     a6a:	82 2f       	mov	r24, r18
     a6c:	08 95       	ret

00000a6e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a6e:	ee ed       	ldi	r30, 0xDE	; 222
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	13 82       	std	Z+3, r1	; 0x03
     a74:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     a76:	88 ee       	ldi	r24, 0xE8	; 232
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	84 83       	std	Z+4, r24	; 0x04
     a80:	95 83       	std	Z+5, r25	; 0x05
     a82:	a6 83       	std	Z+6, r26	; 0x06
     a84:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a86:	8b ea       	ldi	r24, 0xAB	; 171
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
     a8e:	85 ec       	ldi	r24, 0xC5	; 197
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	95 87       	std	Z+13, r25	; 0x0d
     a94:	84 87       	std	Z+12, r24	; 0x0c
     a96:	84 ec       	ldi	r24, 0xC4	; 196
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	97 87       	std	Z+15, r25	; 0x0f
     a9c:	86 87       	std	Z+14, r24	; 0x0e
     a9e:	80 ec       	ldi	r24, 0xC0	; 192
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	91 8b       	std	Z+17, r25	; 0x11
     aa4:	80 8b       	std	Z+16, r24	; 0x10
     aa6:	81 ec       	ldi	r24, 0xC1	; 193
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	93 8b       	std	Z+19, r25	; 0x13
     aac:	82 8b       	std	Z+18, r24	; 0x12
     aae:	82 ec       	ldi	r24, 0xC2	; 194
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	95 8b       	std	Z+21, r25	; 0x15
     ab4:	84 8b       	std	Z+20, r24	; 0x14
     ab6:	86 ec       	ldi	r24, 0xC6	; 198
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	97 8b       	std	Z+23, r25	; 0x17
     abc:	86 8b       	std	Z+22, r24	; 0x16
     abe:	11 8e       	std	Z+25, r1	; 0x19
     ac0:	12 8e       	std	Z+26, r1	; 0x1a
     ac2:	13 8e       	std	Z+27, r1	; 0x1b
     ac4:	14 8e       	std	Z+28, r1	; 0x1c
     ac6:	08 95       	ret

00000ac8 <initVariant>:
     ac8:	08 95       	ret

00000aca <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     aca:	0e 94 5d 07 	call	0xeba	; 0xeba <init>

	initVariant();
     ace:	0e 94 64 05 	call	0xac8	; 0xac8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ad2:	0e 94 a4 00 	call	0x148	; 0x148 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ad6:	c8 ed       	ldi	r28, 0xD8	; 216
     ad8:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     ada:	0e 94 ca 00 	call	0x194	; 0x194 <loop>
		if (serialEventRun) serialEventRun();
     ade:	20 97       	sbiw	r28, 0x00	; 0
     ae0:	e1 f3       	breq	.-8      	; 0xada <main+0x10>
     ae2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z14serialEventRunv>
     ae6:	f9 cf       	rjmp	.-14     	; 0xada <main+0x10>

00000ae8 <_Znwj>:
     ae8:	0c 94 45 0b 	jmp	0x168a	; 0x168a <malloc>

00000aec <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	6c 01       	movw	r12, r24
     afe:	7a 01       	movw	r14, r20
     b00:	8b 01       	movw	r16, r22
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d0 e0       	ldi	r29, 0x00	; 0
     b06:	ce 15       	cp	r28, r14
     b08:	df 05       	cpc	r29, r15
     b0a:	81 f0       	breq	.+32     	; 0xb2c <_ZN5Print5writeEPKhj+0x40>
     b0c:	d8 01       	movw	r26, r16
     b0e:	6d 91       	ld	r22, X+
     b10:	8d 01       	movw	r16, r26
     b12:	d6 01       	movw	r26, r12
     b14:	ed 91       	ld	r30, X+
     b16:	fc 91       	ld	r31, X
     b18:	01 90       	ld	r0, Z+
     b1a:	f0 81       	ld	r31, Z
     b1c:	e0 2d       	mov	r30, r0
     b1e:	c6 01       	movw	r24, r12
     b20:	09 95       	icall
     b22:	89 2b       	or	r24, r25
     b24:	11 f0       	breq	.+4      	; 0xb2a <_ZN5Print5writeEPKhj+0x3e>
     b26:	21 96       	adiw	r28, 0x01	; 1
     b28:	ee cf       	rjmp	.-36     	; 0xb06 <_ZN5Print5writeEPKhj+0x1a>
     b2a:	7e 01       	movw	r14, r28
     b2c:	c7 01       	movw	r24, r14
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <_ZN5Print5writeEPKc>:
     b40:	61 15       	cp	r22, r1
     b42:	71 05       	cpc	r23, r1
     b44:	79 f0       	breq	.+30     	; 0xb64 <_ZN5Print5writeEPKc+0x24>
     b46:	fb 01       	movw	r30, r22
     b48:	01 90       	ld	r0, Z+
     b4a:	00 20       	and	r0, r0
     b4c:	e9 f7       	brne	.-6      	; 0xb48 <_ZN5Print5writeEPKc+0x8>
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	af 01       	movw	r20, r30
     b52:	46 1b       	sub	r20, r22
     b54:	57 0b       	sbc	r21, r23
     b56:	dc 01       	movw	r26, r24
     b58:	ed 91       	ld	r30, X+
     b5a:	fc 91       	ld	r31, X
     b5c:	02 80       	ldd	r0, Z+2	; 0x02
     b5e:	f3 81       	ldd	r31, Z+3	; 0x03
     b60:	e0 2d       	mov	r30, r0
     b62:	09 94       	ijmp
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	08 95       	ret

00000b6a <_ZN5Print5printEc>:
     b6a:	dc 01       	movw	r26, r24
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	01 90       	ld	r0, Z+
     b72:	f0 81       	ld	r31, Z
     b74:	e0 2d       	mov	r30, r0
     b76:	09 94       	ijmp

00000b78 <_ZN5Print7printlnEv>:
     b78:	67 eb       	ldi	r22, 0xB7	; 183
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <_ZN5Print5writeEPKc>

00000b80 <_ZN5Print7printlnEPKc>:
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
     b8a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN5Print5writeEPKc>
     b8e:	8c 01       	movw	r16, r24
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Print7printlnEv>
     b96:	80 0f       	add	r24, r16
     b98:	91 1f       	adc	r25, r17
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <_ZN5Print11printNumberEmh>:
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	a1 97       	sbiw	r28, 0x21	; 33
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	7c 01       	movw	r14, r24
     bca:	fa 01       	movw	r30, r20
     bcc:	cb 01       	movw	r24, r22
     bce:	19 a2       	std	Y+33, r1	; 0x21
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <_ZN5Print11printNumberEmh+0x32>
     bd4:	2a e0       	ldi	r18, 0x0A	; 10
     bd6:	8e 01       	movw	r16, r28
     bd8:	0f 5d       	subi	r16, 0xDF	; 223
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	82 2e       	mov	r8, r18
     bde:	91 2c       	mov	r9, r1
     be0:	a1 2c       	mov	r10, r1
     be2:	b1 2c       	mov	r11, r1
     be4:	bf 01       	movw	r22, r30
     be6:	a5 01       	movw	r20, r10
     be8:	94 01       	movw	r18, r8
     bea:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodsi4>
     bee:	f9 01       	movw	r30, r18
     bf0:	ca 01       	movw	r24, r20
     bf2:	01 50       	subi	r16, 0x01	; 1
     bf4:	11 09       	sbc	r17, r1
     bf6:	6a 30       	cpi	r22, 0x0A	; 10
     bf8:	10 f4       	brcc	.+4      	; 0xbfe <_ZN5Print11printNumberEmh+0x5a>
     bfa:	60 5d       	subi	r22, 0xD0	; 208
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <_ZN5Print11printNumberEmh+0x5c>
     bfe:	69 5c       	subi	r22, 0xC9	; 201
     c00:	d8 01       	movw	r26, r16
     c02:	6c 93       	st	X, r22
     c04:	23 2b       	or	r18, r19
     c06:	24 2b       	or	r18, r20
     c08:	25 2b       	or	r18, r21
     c0a:	61 f7       	brne	.-40     	; 0xbe4 <_ZN5Print11printNumberEmh+0x40>
     c0c:	b8 01       	movw	r22, r16
     c0e:	c7 01       	movw	r24, r14
     c10:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN5Print5writeEPKc>
     c14:	a1 96       	adiw	r28, 0x21	; 33
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	08 95       	ret

00000c36 <_ZN5Print5printEmi>:
     c36:	21 15       	cp	r18, r1
     c38:	31 05       	cpc	r19, r1
     c3a:	41 f4       	brne	.+16     	; 0xc4c <_ZN5Print5printEmi+0x16>
     c3c:	dc 01       	movw	r26, r24
     c3e:	ed 91       	ld	r30, X+
     c40:	fc 91       	ld	r31, X
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	64 2f       	mov	r22, r20
     c4a:	09 94       	ijmp
     c4c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <_ZN5Print11printNumberEmh>

00000c50 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     c5a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN5Print5printEmi>
     c5e:	8c 01       	movw	r16, r24
  n += println();
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Print7printlnEv>
  return n;
}
     c66:	80 0f       	add	r24, r16
     c68:	91 1f       	adc	r25, r17
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
  if (base == 0) {
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	81 f4       	brne	.+32     	; 0xcaa <_ZN5Print5printEli+0x36>
    return write(n);
     c8a:	dc 01       	movw	r26, r24
     c8c:	ed 91       	ld	r30, X+
     c8e:	fc 91       	ld	r31, X
     c90:	01 90       	ld	r0, Z+
     c92:	f0 81       	ld	r31, Z
     c94:	e0 2d       	mov	r30, r0
     c96:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     ca8:	09 94       	ijmp
  } else if (base == 10) {
     caa:	2a 30       	cpi	r18, 0x0A	; 10
     cac:	31 05       	cpc	r19, r1
     cae:	01 f5       	brne	.+64     	; 0xcf0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     cb0:	77 ff       	sbrs	r23, 7
     cb2:	1d c0       	rjmp	.+58     	; 0xcee <_ZN5Print5printEli+0x7a>
     cb4:	6a 01       	movw	r12, r20
     cb6:	7b 01       	movw	r14, r22
     cb8:	ec 01       	movw	r28, r24
      int t = print('-');
     cba:	6d e2       	ldi	r22, 0x2D	; 45
     cbc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN5Print5printEc>
     cc0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     cc2:	44 27       	eor	r20, r20
     cc4:	55 27       	eor	r21, r21
     cc6:	ba 01       	movw	r22, r20
     cc8:	4c 19       	sub	r20, r12
     cca:	5d 09       	sbc	r21, r13
     ccc:	6e 09       	sbc	r22, r14
     cce:	7f 09       	sbc	r23, r15
     cd0:	2a e0       	ldi	r18, 0x0A	; 10
     cd2:	ce 01       	movw	r24, r28
     cd4:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN5Print11printNumberEmh>
     cd8:	80 0f       	add	r24, r16
     cda:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     cee:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d00:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <_ZN5Print11printNumberEmh>

00000d04 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     d04:	9a 01       	movw	r18, r20
  return print((long) n, base);
     d06:	ab 01       	movw	r20, r22
     d08:	77 0f       	add	r23, r23
     d0a:	66 0b       	sbc	r22, r22
     d0c:	77 0b       	sbc	r23, r23
     d0e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_ZN5Print5printEli>

00000d12 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     d1c:	0e 94 82 06 	call	0xd04	; 0xd04 <_ZN5Print5printEii>
     d20:	8c 01       	movw	r16, r24
  n += println();
     d22:	ce 01       	movw	r24, r28
     d24:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Print7printlnEv>
  return n;
}
     d28:	80 0f       	add	r24, r16
     d2a:	91 1f       	adc	r25, r17
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     d4c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <timer0_millis>
     d50:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <timer0_millis+0x1>
     d54:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <timer0_millis+0x2>
     d58:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     d5c:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     d60:	23 e0       	ldi	r18, 0x03	; 3
     d62:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     d64:	2d 37       	cpi	r18, 0x7D	; 125
     d66:	20 f4       	brcc	.+8      	; 0xd70 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	a1 1d       	adc	r26, r1
     d6c:	b1 1d       	adc	r27, r1
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     d70:	26 e8       	ldi	r18, 0x86	; 134
     d72:	23 0f       	add	r18, r19
		m += 1;
     d74:	02 96       	adiw	r24, 0x02	; 2
     d76:	a1 1d       	adc	r26, r1
     d78:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     d7a:	20 93 7b 02 	sts	0x027B, r18	; 0x80027b <timer0_fract>
	timer0_millis = m;
     d7e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <timer0_millis>
     d82:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <timer0_millis+0x1>
     d86:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <timer0_millis+0x2>
     d8a:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <timer0_millis+0x3>
	timer0_overflow_count++;
     d8e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <timer0_overflow_count>
     d92:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <timer0_overflow_count+0x1>
     d96:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <timer0_overflow_count+0x2>
     d9a:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <timer0_overflow_count+0x3>
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <timer0_overflow_count>
     da8:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <timer0_overflow_count+0x1>
     dac:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <timer0_overflow_count+0x2>
     db0:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <timer0_overflow_count+0x3>
}
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     dca:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     dcc:	f8 94       	cli
	m = timer0_millis;
     dce:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <timer0_millis>
     dd2:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <timer0_millis+0x1>
     dd6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer0_millis+0x2>
     dda:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <timer0_millis+0x3>
	SREG = oldSREG;
     dde:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     de0:	08 95       	ret

00000de2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     de2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     de4:	f8 94       	cli
	m = timer0_overflow_count;
     de6:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <timer0_overflow_count>
     dea:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <timer0_overflow_count+0x1>
     dee:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <timer0_overflow_count+0x2>
     df2:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     df6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     df8:	a8 9b       	sbis	0x15, 0	; 21
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <micros+0x24>
     dfc:	2f 3f       	cpi	r18, 0xFF	; 255
     dfe:	19 f0       	breq	.+6      	; 0xe06 <micros+0x24>
		m++;
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	a1 1d       	adc	r26, r1
     e04:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e06:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e08:	ba 2f       	mov	r27, r26
     e0a:	a9 2f       	mov	r26, r25
     e0c:	98 2f       	mov	r25, r24
     e0e:	88 27       	eor	r24, r24
     e10:	82 0f       	add	r24, r18
     e12:	91 1d       	adc	r25, r1
     e14:	a1 1d       	adc	r26, r1
     e16:	b1 1d       	adc	r27, r1
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	42 e0       	ldi	r20, 0x02	; 2
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	4a 95       	dec	r20
     e28:	d1 f7       	brne	.-12     	; 0xe1e <micros+0x3c>
}
     e2a:	08 95       	ret

00000e2c <delay>:

void delay(unsigned long ms)
{
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e40:	0e 94 f1 06 	call	0xde2	; 0xde2 <micros>
     e44:	4b 01       	movw	r8, r22
     e46:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e48:	c1 14       	cp	r12, r1
     e4a:	d1 04       	cpc	r13, r1
     e4c:	e1 04       	cpc	r14, r1
     e4e:	f1 04       	cpc	r15, r1
     e50:	01 f1       	breq	.+64     	; 0xe92 <delay+0x66>
		yield();
     e52:	0e 94 bb 0a 	call	0x1576	; 0x1576 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e56:	0e 94 f1 06 	call	0xde2	; 0xde2 <micros>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	88 19       	sub	r24, r8
     e60:	99 09       	sbc	r25, r9
     e62:	aa 09       	sbc	r26, r10
     e64:	bb 09       	sbc	r27, r11
     e66:	88 3e       	cpi	r24, 0xE8	; 232
     e68:	93 40       	sbci	r25, 0x03	; 3
     e6a:	a1 05       	cpc	r26, r1
     e6c:	b1 05       	cpc	r27, r1
     e6e:	60 f3       	brcs	.-40     	; 0xe48 <delay+0x1c>
			ms--;
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	c2 1a       	sub	r12, r18
     e74:	d1 08       	sbc	r13, r1
     e76:	e1 08       	sbc	r14, r1
     e78:	f1 08       	sbc	r15, r1
			start += 1000;
     e7a:	88 ee       	ldi	r24, 0xE8	; 232
     e7c:	88 0e       	add	r8, r24
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	98 1e       	adc	r9, r24
     e82:	a1 1c       	adc	r10, r1
     e84:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e86:	c1 14       	cp	r12, r1
     e88:	d1 04       	cpc	r13, r1
     e8a:	e1 04       	cpc	r14, r1
     e8c:	f1 04       	cpc	r15, r1
     e8e:	19 f7       	brne	.-58     	; 0xe56 <delay+0x2a>
     e90:	db cf       	rjmp	.-74     	; 0xe48 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	08 95       	ret

00000ea4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	38 f0       	brcs	.+14     	; 0xeb8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     eb2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <delayMicroseconds+0x10>
     eb8:	08 95       	ret

00000eba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     eba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ebc:	84 b5       	in	r24, 0x24	; 36
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ec2:	84 b5       	in	r24, 0x24	; 36
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ec8:	85 b5       	in	r24, 0x25	; 37
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ed4:	ee e6       	ldi	r30, 0x6E	; 110
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ede:	e1 e8       	ldi	r30, 0x81	; 129
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ee4:	80 81       	ld	r24, Z
     ee6:	82 60       	ori	r24, 0x02	; 2
     ee8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ef0:	e0 e8       	ldi	r30, 0x80	; 128
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     efa:	e1 eb       	ldi	r30, 0xB1	; 177
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f04:	e0 eb       	ldi	r30, 0xB0	; 176
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f0e:	ea e7       	ldi	r30, 0x7A	; 122
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f18:	80 81       	ld	r24, Z
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f1e:	80 81       	ld	r24, Z
     f20:	81 60       	ori	r24, 0x01	; 1
     f22:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f24:	80 81       	ld	r24, Z
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f2a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f2e:	08 95       	ret

00000f30 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	81 f0       	breq	.+32     	; 0xf54 <turnOffPWM+0x24>
     f34:	28 f4       	brcc	.+10     	; 0xf40 <turnOffPWM+0x10>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	99 f0       	breq	.+38     	; 0xf60 <turnOffPWM+0x30>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	a1 f0       	breq	.+40     	; 0xf66 <turnOffPWM+0x36>
     f3e:	08 95       	ret
     f40:	87 30       	cpi	r24, 0x07	; 7
     f42:	a9 f0       	breq	.+42     	; 0xf6e <turnOffPWM+0x3e>
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	b9 f0       	breq	.+46     	; 0xf76 <turnOffPWM+0x46>
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	d1 f4       	brne	.+52     	; 0xf80 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f4c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f54:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f58:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f5a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f5e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f60:	84 b5       	in	r24, 0x24	; 36
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f66:	84 b5       	in	r24, 0x24	; 36
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	84 bd       	out	0x24, r24	; 36
     f6c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f6e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f72:	8f 77       	andi	r24, 0x7F	; 127
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f80:	08 95       	ret

00000f82 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	e8 55       	subi	r30, 0x58	; 88
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f90:	fc 01       	movw	r30, r24
     f92:	e4 54       	subi	r30, 0x44	; 68
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f98:	88 23       	and	r24, r24
     f9a:	61 f1       	breq	.+88     	; 0xff4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	fc 01       	movw	r30, r24
     fa4:	ec 51       	subi	r30, 0x1C	; 28
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	c5 91       	lpm	r28, Z+
     faa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fac:	fc 01       	movw	r30, r24
     fae:	e6 52       	subi	r30, 0x26	; 38
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	a5 91       	lpm	r26, Z+
     fb4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     fb6:	61 11       	cpse	r22, r1
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     fba:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fbc:	f8 94       	cli
		*reg &= ~bit;
     fbe:	88 81       	ld	r24, Y
     fc0:	20 95       	com	r18
     fc2:	82 23       	and	r24, r18
     fc4:	88 83       	st	Y, r24
		*out &= ~bit;
     fc6:	ec 91       	ld	r30, X
     fc8:	2e 23       	and	r18, r30
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fcc:	62 30       	cpi	r22, 0x02	; 2
     fce:	61 f4       	brne	.+24     	; 0xfe8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fd0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fd2:	f8 94       	cli
		*reg &= ~bit;
     fd4:	88 81       	ld	r24, Y
     fd6:	32 2f       	mov	r19, r18
     fd8:	30 95       	com	r19
     fda:	83 23       	and	r24, r19
     fdc:	88 83       	st	Y, r24
		*out |= bit;
     fde:	ec 91       	ld	r30, X
     fe0:	2e 2b       	or	r18, r30
     fe2:	2c 93       	st	X, r18
		SREG = oldSREG;
     fe4:	9f bf       	out	0x3f, r25	; 63
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fe8:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fea:	f8 94       	cli
		*reg |= bit;
     fec:	e8 81       	ld	r30, Y
     fee:	2e 2b       	or	r18, r30
     ff0:	28 83       	st	Y, r18
		SREG = oldSREG;
     ff2:	8f bf       	out	0x3f, r24	; 63
	}
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	ec 56       	subi	r30, 0x6C	; 108
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    100c:	f9 01       	movw	r30, r18
    100e:	e8 55       	subi	r30, 0x58	; 88
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1014:	f9 01       	movw	r30, r18
    1016:	e4 54       	subi	r30, 0x44	; 68
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    101c:	cc 23       	and	r28, r28
    101e:	c1 f0       	breq	.+48     	; 0x1050 <digitalWrite+0x56>
    1020:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1022:	81 11       	cpse	r24, r1
    1024:	0e 94 98 07 	call	0xf30	; 0xf30 <turnOffPWM>

	out = portOutputRegister(port);
    1028:	ec 2f       	mov	r30, r28
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	e6 52       	subi	r30, 0x26	; 38
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	a5 91       	lpm	r26, Z+
    1036:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1038:	9f b7       	in	r25, 0x3f	; 63
	cli();
    103a:	f8 94       	cli

	if (val == LOW) {
    103c:	11 11       	cpse	r17, r1
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <digitalWrite+0x4e>
		*out &= ~bit;
    1040:	8c 91       	ld	r24, X
    1042:	d0 95       	com	r29
    1044:	d8 23       	and	r29, r24
    1046:	02 c0       	rjmp	.+4      	; 0x104c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1048:	ec 91       	ld	r30, X
    104a:	de 2b       	or	r29, r30
    104c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    104e:	9f bf       	out	0x3f, r25	; 63
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	08 95       	ret

00001058 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	ec 56       	subi	r30, 0x6C	; 108
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1068:	f9 01       	movw	r30, r18
    106a:	e8 55       	subi	r30, 0x58	; 88
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1070:	f9 01       	movw	r30, r18
    1072:	e4 54       	subi	r30, 0x44	; 68
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1078:	cc 23       	and	r28, r28
    107a:	91 f0       	breq	.+36     	; 0x10a0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    107c:	81 11       	cpse	r24, r1
    107e:	0e 94 98 07 	call	0xf30	; 0xf30 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1082:	ec 2f       	mov	r30, r28
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	e0 53       	subi	r30, 0x30	; 48
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	a5 91       	lpm	r26, Z+
    1090:	b4 91       	lpm	r27, Z
    1092:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1094:	ed 23       	and	r30, r29
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	21 f4       	brne	.+8      	; 0x10a4 <digitalRead+0x4c>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <digitalRead+0x4c>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    10aa:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    10ae:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	b9 f4       	brne	.+46     	; 0x10e6 <_ZN14SoftwareSerial4readEv+0x3c>
    10b8:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    10bc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    10c0:	98 17       	cp	r25, r24
    10c2:	89 f0       	breq	.+34     	; 0x10e6 <_ZN14SoftwareSerial4readEv+0x3c>
    10c4:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	ea 57       	subi	r30, 0x7A	; 122
    10cc:	fd 4f       	sbci	r31, 0xFD	; 253
    10ce:	80 81       	ld	r24, Z
    10d0:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	2f 73       	andi	r18, 0x3F	; 63
    10dc:	33 27       	eor	r19, r19
    10de:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	08 95       	ret
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	08 95       	ret

000010ec <_ZN14SoftwareSerial5writeEh>:
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	dc 01       	movw	r26, r24
    10f4:	5c 96       	adiw	r26, 0x1c	; 28
    10f6:	8d 91       	ld	r24, X+
    10f8:	9c 91       	ld	r25, X
    10fa:	5d 97       	sbiw	r26, 0x1d	; 29
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	39 f4       	brne	.+14     	; 0x110e <_ZN14SoftwareSerial5writeEh+0x22>
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	13 96       	adiw	r26, 0x03	; 3
    1106:	3c 93       	st	X, r19
    1108:	2e 93       	st	-X, r18
    110a:	12 97       	sbiw	r26, 0x02	; 2
    110c:	3b c0       	rjmp	.+118    	; 0x1184 <_ZN14SoftwareSerial5writeEh+0x98>
    110e:	51 96       	adiw	r26, 0x11	; 17
    1110:	ed 91       	ld	r30, X+
    1112:	fc 91       	ld	r31, X
    1114:	52 97       	sbiw	r26, 0x12	; 18
    1116:	50 96       	adiw	r26, 0x10	; 16
    1118:	2c 91       	ld	r18, X
    111a:	50 97       	sbiw	r26, 0x10	; 16
    111c:	32 2f       	mov	r19, r18
    111e:	30 95       	com	r19
    1120:	1f b7       	in	r17, 0x3f	; 63
    1122:	5e 96       	adiw	r26, 0x1e	; 30
    1124:	4c 91       	ld	r20, X
    1126:	5e 97       	sbiw	r26, 0x1e	; 30
    1128:	74 2f       	mov	r23, r20
    112a:	72 70       	andi	r23, 0x02	; 2
    112c:	41 fd       	sbrc	r20, 1
    112e:	60 95       	com	r22
    1130:	f8 94       	cli
    1132:	40 81       	ld	r20, Z
    1134:	77 23       	and	r23, r23
    1136:	11 f0       	breq	.+4      	; 0x113c <_ZN14SoftwareSerial5writeEh+0x50>
    1138:	42 2b       	or	r20, r18
    113a:	01 c0       	rjmp	.+2      	; 0x113e <_ZN14SoftwareSerial5writeEh+0x52>
    113c:	43 23       	and	r20, r19
    113e:	40 83       	st	Z, r20
    1140:	ec 01       	movw	r28, r24
    1142:	21 97       	sbiw	r28, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <_ZN14SoftwareSerial5writeEh+0x56>
    1146:	48 e0       	ldi	r20, 0x08	; 8
    1148:	50 81       	ld	r21, Z
    114a:	60 ff       	sbrs	r22, 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <_ZN14SoftwareSerial5writeEh+0x66>
    114e:	52 2b       	or	r21, r18
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <_ZN14SoftwareSerial5writeEh+0x68>
    1152:	53 23       	and	r21, r19
    1154:	50 83       	st	Z, r21
    1156:	ec 01       	movw	r28, r24
    1158:	21 97       	sbiw	r28, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <_ZN14SoftwareSerial5writeEh+0x6c>
    115c:	66 95       	lsr	r22
    115e:	41 50       	subi	r20, 0x01	; 1
    1160:	99 f7       	brne	.-26     	; 0x1148 <_ZN14SoftwareSerial5writeEh+0x5c>
    1162:	80 81       	ld	r24, Z
    1164:	77 23       	and	r23, r23
    1166:	19 f0       	breq	.+6      	; 0x116e <_ZN14SoftwareSerial5writeEh+0x82>
    1168:	83 23       	and	r24, r19
    116a:	80 83       	st	Z, r24
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <_ZN14SoftwareSerial5writeEh+0x86>
    116e:	28 2b       	or	r18, r24
    1170:	20 83       	st	Z, r18
    1172:	1f bf       	out	0x3f, r17	; 63
    1174:	5c 96       	adiw	r26, 0x1c	; 28
    1176:	8d 91       	ld	r24, X+
    1178:	9c 91       	ld	r25, X
    117a:	5d 97       	sbiw	r26, 0x1d	; 29
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <_ZN14SoftwareSerial5writeEh+0x90>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	08 95       	ret

0000118c <_ZN14SoftwareSerial5flushEv>:
    118c:	08 95       	ret

0000118e <_ZN14SoftwareSerial4peekEv>:
    118e:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    1192:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    1196:	28 17       	cp	r18, r24
    1198:	39 07       	cpc	r19, r25
    119a:	71 f4       	brne	.+28     	; 0x11b8 <_ZN14SoftwareSerial4peekEv+0x2a>
    119c:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    11a0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    11a4:	98 17       	cp	r25, r24
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <_ZN14SoftwareSerial4peekEv+0x2a>
    11a8:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ea 57       	subi	r30, 0x7A	; 122
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	80 81       	ld	r24, Z
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <_ZN14SoftwareSerial9availableEv>:
    11be:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    11c2:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	71 f4       	brne	.+28     	; 0x11e8 <_ZN14SoftwareSerial9availableEv+0x2a>
    11cc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    11d0:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	80 5c       	subi	r24, 0xC0	; 192
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	82 1b       	sub	r24, r18
    11dc:	91 09       	sbc	r25, r1
    11de:	60 e4       	ldi	r22, 0x40	; 64
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__divmodhi4>
    11e6:	08 95       	ret
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	08 95       	ret

000011ee <_ZN14SoftwareSerial13stopListeningEv>:
    11ee:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    11f2:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    11f6:	e8 17       	cp	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	69 f4       	brne	.+26     	; 0x1216 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    11fc:	a3 89       	ldd	r26, Z+19	; 0x13
    11fe:	b4 89       	ldd	r27, Z+20	; 0x14
    1200:	9c 91       	ld	r25, X
    1202:	85 89       	ldd	r24, Z+21	; 0x15
    1204:	80 95       	com	r24
    1206:	89 23       	and	r24, r25
    1208:	8c 93       	st	X, r24
    120a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    120e:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	08 95       	ret

0000121a <_ZN14SoftwareSerial6listenEv>:
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1222:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1224:	89 2b       	or	r24, r25
    1226:	f1 f0       	breq	.+60     	; 0x1264 <_ZN14SoftwareSerial6listenEv+0x4a>
    1228:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    122c:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    1230:	c8 17       	cp	r28, r24
    1232:	d9 07       	cpc	r29, r25
    1234:	b9 f0       	breq	.+46     	; 0x1264 <_ZN14SoftwareSerial6listenEv+0x4a>
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	11 f0       	breq	.+4      	; 0x123e <_ZN14SoftwareSerial6listenEv+0x24>
    123a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN14SoftwareSerial13stopListeningEv>
    123e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	8e 8f       	std	Y+30, r24	; 0x1e
    1244:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1248:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    124c:	d0 93 c7 02 	sts	0x02C7, r29	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    1250:	c0 93 c6 02 	sts	0x02C6, r28	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    1254:	eb 89       	ldd	r30, Y+19	; 0x13
    1256:	fc 89       	ldd	r31, Y+20	; 0x14
    1258:	90 81       	ld	r25, Z
    125a:	8d 89       	ldd	r24, Y+21	; 0x15
    125c:	89 2b       	or	r24, r25
    125e:	80 83       	st	Z, r24
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <_ZN14SoftwareSerial6listenEv+0x4c>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <__vector_3>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <_ZN14SoftwareSerial13active_objectE>
    1292:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <_ZN14SoftwareSerial13active_objectE+0x1>
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	09 f4       	brne	.+2      	; 0x129c <__vector_3+0x30>
    129a:	51 c0       	rjmp	.+162    	; 0x133e <__vector_3+0xd2>
    129c:	96 8d       	ldd	r25, Z+30	; 0x1e
    129e:	a6 85       	ldd	r26, Z+14	; 0x0e
    12a0:	b7 85       	ldd	r27, Z+15	; 0x0f
    12a2:	85 85       	ldd	r24, Z+13	; 0x0d
    12a4:	91 ff       	sbrs	r25, 1
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__vector_3+0x44>
    12a8:	9c 91       	ld	r25, X
    12aa:	89 23       	and	r24, r25
    12ac:	29 f4       	brne	.+10     	; 0x12b8 <__vector_3+0x4c>
    12ae:	47 c0       	rjmp	.+142    	; 0x133e <__vector_3+0xd2>
    12b0:	9c 91       	ld	r25, X
    12b2:	89 23       	and	r24, r25
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__vector_3+0x4c>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <__vector_3+0xd2>
    12b8:	a3 89       	ldd	r26, Z+19	; 0x13
    12ba:	b4 89       	ldd	r27, Z+20	; 0x14
    12bc:	9c 91       	ld	r25, X
    12be:	85 89       	ldd	r24, Z+21	; 0x15
    12c0:	80 95       	com	r24
    12c2:	89 23       	and	r24, r25
    12c4:	8c 93       	st	X, r24
    12c6:	86 89       	ldd	r24, Z+22	; 0x16
    12c8:	97 89       	ldd	r25, Z+23	; 0x17
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <__vector_3+0x5e>
    12ce:	60 8d       	ldd	r22, Z+24	; 0x18
    12d0:	71 8d       	ldd	r23, Z+25	; 0x19
    12d2:	a6 85       	ldd	r26, Z+14	; 0x0e
    12d4:	b7 85       	ldd	r27, Z+15	; 0x0f
    12d6:	55 85       	ldd	r21, Z+13	; 0x0d
    12d8:	38 e0       	ldi	r19, 0x08	; 8
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	cb 01       	movw	r24, r22
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <__vector_3+0x72>
    12e2:	82 2f       	mov	r24, r18
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	95 95       	asr	r25
    12e8:	87 95       	ror	r24
    12ea:	28 2f       	mov	r18, r24
    12ec:	4c 91       	ld	r20, X
    12ee:	45 23       	and	r20, r21
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__vector_3+0x88>
    12f2:	20 68       	ori	r18, 0x80	; 128
    12f4:	31 50       	subi	r19, 0x01	; 1
    12f6:	91 f7       	brne	.-28     	; 0x12dc <__vector_3+0x70>
    12f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    12fa:	81 fd       	sbrc	r24, 1
    12fc:	20 95       	com	r18
    12fe:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	8f 73       	andi	r24, 0x3F	; 63
    1308:	99 27       	eor	r25, r25
    130a:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN14SoftwareSerial20_receive_buffer_headE>
    130e:	38 17       	cp	r19, r24
    1310:	49 f0       	breq	.+18     	; 0x1324 <__vector_3+0xb8>
    1312:	a0 91 85 02 	lds	r26, 0x0285	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	aa 57       	subi	r26, 0x7A	; 122
    131a:	bd 4f       	sbci	r27, 0xFD	; 253
    131c:	2c 93       	st	X, r18
    131e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1322:	03 c0       	rjmp	.+6      	; 0x132a <__vector_3+0xbe>
    1324:	86 8d       	ldd	r24, Z+30	; 0x1e
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	86 8f       	std	Z+30, r24	; 0x1e
    132a:	82 8d       	ldd	r24, Z+26	; 0x1a
    132c:	93 8d       	ldd	r25, Z+27	; 0x1b
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <__vector_3+0xc2>
    1332:	a3 89       	ldd	r26, Z+19	; 0x13
    1334:	b4 89       	ldd	r27, Z+20	; 0x14
    1336:	9c 91       	ld	r25, X
    1338:	85 89       	ldd	r24, Z+21	; 0x15
    133a:	89 2b       	or	r24, r25
    133c:	8c 93       	st	X, r24
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <_ZN14SoftwareSerial5setTXEh>:
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	ec 01       	movw	r28, r24
    1368:	16 2f       	mov	r17, r22
    136a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    136c:	66 95       	lsr	r22
    136e:	61 70       	andi	r22, 0x01	; 1
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	68 27       	eor	r22, r24
    1374:	81 2f       	mov	r24, r17
    1376:	0e 94 fd 07 	call	0xffa	; 0xffa <digitalWrite>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	81 2f       	mov	r24, r17
    137e:	0e 94 c1 07 	call	0xf82	; 0xf82 <pinMode>
    1382:	81 2f       	mov	r24, r17
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	e8 55       	subi	r30, 0x58	; 88
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	e4 91       	lpm	r30, Z
    138e:	e8 8b       	std	Y+16, r30	; 0x10
    1390:	fc 01       	movw	r30, r24
    1392:	e4 54       	subi	r30, 0x44	; 68
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	e4 91       	lpm	r30, Z
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	e6 52       	subi	r30, 0x26	; 38
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	85 91       	lpm	r24, Z+
    13a4:	94 91       	lpm	r25, Z
    13a6:	9a 8b       	std	Y+18, r25	; 0x12
    13a8:	89 8b       	std	Y+17, r24	; 0x11
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	08 95       	ret

000013b2 <_ZN14SoftwareSerial5setRXEh>:
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
    13ba:	16 2f       	mov	r17, r22
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	81 2f       	mov	r24, r17
    13c0:	0e 94 c1 07 	call	0xf82	; 0xf82 <pinMode>
    13c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c6:	81 fd       	sbrc	r24, 1
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <_ZN14SoftwareSerial5setRXEh+0x20>
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	81 2f       	mov	r24, r17
    13ce:	0e 94 fd 07 	call	0xffa	; 0xffa <digitalWrite>
    13d2:	1c 87       	std	Y+12, r17	; 0x0c
    13d4:	81 2f       	mov	r24, r17
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	fc 01       	movw	r30, r24
    13da:	e8 55       	subi	r30, 0x58	; 88
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	e4 91       	lpm	r30, Z
    13e0:	ed 87       	std	Y+13, r30	; 0x0d
    13e2:	fc 01       	movw	r30, r24
    13e4:	e4 54       	subi	r30, 0x44	; 68
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	e4 91       	lpm	r30, Z
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e0 53       	subi	r30, 0x30	; 48
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	85 91       	lpm	r24, Z+
    13f6:	94 91       	lpm	r25, Z
    13f8:	9f 87       	std	Y+15, r25	; 0x0f
    13fa:	8e 87       	std	Y+14, r24	; 0x0e
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	08 95       	ret

00001404 <_ZN14SoftwareSerialC1Ehhb>:
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    140c:	16 2f       	mov	r17, r22
    140e:	1b 82       	std	Y+3, r1	; 0x03
    1410:	1a 82       	std	Y+2, r1	; 0x02
    1412:	88 ee       	ldi	r24, 0xE8	; 232
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	8c 83       	std	Y+4, r24	; 0x04
    141c:	9d 83       	std	Y+5, r25	; 0x05
    141e:	ae 83       	std	Y+6, r26	; 0x06
    1420:	bf 83       	std	Y+7, r27	; 0x07
    1422:	8a ec       	ldi	r24, 0xCA	; 202
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	99 83       	std	Y+1, r25	; 0x01
    1428:	88 83       	st	Y, r24
    142a:	1f 8a       	std	Y+23, r1	; 0x17
    142c:	1e 8a       	std	Y+22, r1	; 0x16
    142e:	19 8e       	std	Y+25, r1	; 0x19
    1430:	18 8e       	std	Y+24, r1	; 0x18
    1432:	1b 8e       	std	Y+27, r1	; 0x1b
    1434:	1a 8e       	std	Y+26, r1	; 0x1a
    1436:	1d 8e       	std	Y+29, r1	; 0x1d
    1438:	1c 8e       	std	Y+28, r1	; 0x1c
    143a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	20 fb       	bst	r18, 0
    1440:	81 f9       	bld	r24, 1
    1442:	8e 8f       	std	Y+30, r24	; 0x1e
    1444:	64 2f       	mov	r22, r20
    1446:	ce 01       	movw	r24, r28
    1448:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN14SoftwareSerial5setTXEh>
    144c:	61 2f       	mov	r22, r17
    144e:	ce 01       	movw	r24, r28
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_ZN14SoftwareSerial5setRXEh>

0000145a <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ec 01       	movw	r28, r24
    1460:	9a 01       	movw	r18, r20
    1462:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1464:	1b 8e       	std	Y+27, r1	; 0x1b
    1466:	1a 8e       	std	Y+26, r1	; 0x1a
    1468:	19 8e       	std	Y+25, r1	; 0x19
    146a:	18 8e       	std	Y+24, r1	; 0x18
    146c:	1f 8a       	std	Y+23, r1	; 0x17
    146e:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	79 e0       	ldi	r23, 0x09	; 9
    1474:	8d e3       	ldi	r24, 0x3D	; 61
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__divmodsi4>
    147c:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    147e:	24 30       	cpi	r18, 0x04	; 4
    1480:	31 05       	cpc	r19, r1
    1482:	18 f0       	brcs	.+6      	; 0x148a <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1484:	c9 01       	movw	r24, r18
    1486:	03 97       	sbiw	r24, 0x03	; 3
    1488:	02 c0       	rjmp	.+4      	; 0x148e <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    148e:	9d 8f       	std	Y+29, r25	; 0x1d
    1490:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    1492:	6c 85       	ldd	r22, Y+12	; 0x0c
    1494:	66 31       	cpi	r22, 0x16	; 22
    1496:	08 f0       	brcs	.+2      	; 0x149a <_ZN14SoftwareSerial5beginEl+0x40>
    1498:	69 c0       	rjmp	.+210    	; 0x156c <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    149a:	c9 01       	movw	r24, r18
    149c:	96 95       	lsr	r25
    149e:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    14a0:	84 31       	cpi	r24, 0x14	; 20
    14a2:	91 05       	cpc	r25, r1
    14a4:	10 f0       	brcs	.+4      	; 0x14aa <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    14a6:	43 97       	sbiw	r24, 0x13	; 19
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    14ae:	9f 8b       	std	Y+23, r25	; 0x17
    14b0:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    14b2:	36 97       	sbiw	r30, 0x06	; 6
    14b4:	18 f0       	brcs	.+6      	; 0x14bc <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    14b6:	c9 01       	movw	r24, r18
    14b8:	05 97       	sbiw	r24, 0x05	; 5
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    14c0:	99 8f       	std	Y+25, r25	; 0x19
    14c2:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    14c4:	c9 01       	movw	r24, r18
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	28 0f       	add	r18, r24
    14cc:	39 1f       	adc	r19, r25
    14ce:	36 95       	lsr	r19
    14d0:	27 95       	ror	r18
    14d2:	36 95       	lsr	r19
    14d4:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    14d6:	2d 30       	cpi	r18, 0x0D	; 13
    14d8:	31 05       	cpc	r19, r1
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    14dc:	2c 50       	subi	r18, 0x0C	; 12
    14de:	31 09       	sbc	r19, r1
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    14e6:	3b 8f       	std	Y+27, r19	; 0x1b
    14e8:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    14ea:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    14ee:	68 30       	cpi	r22, 0x08	; 8
    14f0:	50 f0       	brcs	.+20     	; 0x1506 <_ZN14SoftwareSerial5beginEl+0xac>
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	6e 30       	cpi	r22, 0x0E	; 14
    14f6:	08 f4       	brcc	.+2      	; 0x14fa <_ZN14SoftwareSerial5beginEl+0xa0>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <_ZN14SoftwareSerial5beginEl+0xa6>
    14fe:	88 0f       	add	r24, r24
    1500:	2a 95       	dec	r18
    1502:	ea f7       	brpl	.-6      	; 0x14fe <_ZN14SoftwareSerial5beginEl+0xa4>
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <_ZN14SoftwareSerial5beginEl+0xae>
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	89 2b       	or	r24, r25
    150a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    150e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1510:	98 30       	cpi	r25, 0x08	; 8
    1512:	38 f0       	brcs	.+14     	; 0x1522 <_ZN14SoftwareSerial5beginEl+0xc8>
    1514:	9e 30       	cpi	r25, 0x0E	; 14
    1516:	40 f0       	brcs	.+16     	; 0x1528 <_ZN14SoftwareSerial5beginEl+0xce>
    1518:	96 31       	cpi	r25, 0x16	; 22
    151a:	48 f0       	brcs	.+18     	; 0x152e <_ZN14SoftwareSerial5beginEl+0xd4>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <_ZN14SoftwareSerial5beginEl+0xd8>
    1522:	2d e6       	ldi	r18, 0x6D	; 109
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <_ZN14SoftwareSerial5beginEl+0xd8>
    1528:	2b e6       	ldi	r18, 0x6B	; 107
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <_ZN14SoftwareSerial5beginEl+0xd8>
    152e:	2c e6       	ldi	r18, 0x6C	; 108
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 8b       	std	Y+20, r19	; 0x14
    1534:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1536:	98 30       	cpi	r25, 0x08	; 8
    1538:	30 f4       	brcc	.+12     	; 0x1546 <_ZN14SoftwareSerial5beginEl+0xec>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <_ZN14SoftwareSerial5beginEl+0xe6>
    153e:	88 0f       	add	r24, r24
    1540:	9a 95       	dec	r25
    1542:	ea f7       	brpl	.-6      	; 0x153e <_ZN14SoftwareSerial5beginEl+0xe4>
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <_ZN14SoftwareSerial5beginEl+0x108>
    1546:	29 2f       	mov	r18, r25
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	9e 30       	cpi	r25, 0x0E	; 14
    154c:	18 f4       	brcc	.+6      	; 0x1554 <_ZN14SoftwareSerial5beginEl+0xfa>
    154e:	28 50       	subi	r18, 0x08	; 8
    1550:	31 09       	sbc	r19, r1
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <_ZN14SoftwareSerial5beginEl+0xfe>
    1554:	2e 50       	subi	r18, 0x0E	; 14
    1556:	31 09       	sbc	r19, r1
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	01 c0       	rjmp	.+2      	; 0x155e <_ZN14SoftwareSerial5beginEl+0x104>
    155c:	88 0f       	add	r24, r24
    155e:	2a 95       	dec	r18
    1560:	ea f7       	brpl	.-6      	; 0x155c <_ZN14SoftwareSerial5beginEl+0x102>
    1562:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1564:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1566:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    156c:	ce 01       	movw	r24, r28
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1572:	0c 94 0d 09 	jmp	0x121a	; 0x121a <_ZN14SoftwareSerial6listenEv>

00001576 <yield>:
    1576:	08 95       	ret

00001578 <__divmodhi4>:
    1578:	97 fb       	bst	r25, 7
    157a:	07 2e       	mov	r0, r23
    157c:	16 f4       	brtc	.+4      	; 0x1582 <__divmodhi4+0xa>
    157e:	00 94       	com	r0
    1580:	07 d0       	rcall	.+14     	; 0x1590 <__divmodhi4_neg1>
    1582:	77 fd       	sbrc	r23, 7
    1584:	09 d0       	rcall	.+18     	; 0x1598 <__divmodhi4_neg2>
    1586:	0e 94 22 0b 	call	0x1644	; 0x1644 <__udivmodhi4>
    158a:	07 fc       	sbrc	r0, 7
    158c:	05 d0       	rcall	.+10     	; 0x1598 <__divmodhi4_neg2>
    158e:	3e f4       	brtc	.+14     	; 0x159e <__divmodhi4_exit>

00001590 <__divmodhi4_neg1>:
    1590:	90 95       	com	r25
    1592:	81 95       	neg	r24
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__divmodhi4_neg2>:
    1598:	70 95       	com	r23
    159a:	61 95       	neg	r22
    159c:	7f 4f       	sbci	r23, 0xFF	; 255

0000159e <__divmodhi4_exit>:
    159e:	08 95       	ret

000015a0 <__udivmodsi4>:
    15a0:	a1 e2       	ldi	r26, 0x21	; 33
    15a2:	1a 2e       	mov	r1, r26
    15a4:	aa 1b       	sub	r26, r26
    15a6:	bb 1b       	sub	r27, r27
    15a8:	fd 01       	movw	r30, r26
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <__udivmodsi4_ep>

000015ac <__udivmodsi4_loop>:
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	ee 1f       	adc	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	a2 17       	cp	r26, r18
    15b6:	b3 07       	cpc	r27, r19
    15b8:	e4 07       	cpc	r30, r20
    15ba:	f5 07       	cpc	r31, r21
    15bc:	20 f0       	brcs	.+8      	; 0x15c6 <__udivmodsi4_ep>
    15be:	a2 1b       	sub	r26, r18
    15c0:	b3 0b       	sbc	r27, r19
    15c2:	e4 0b       	sbc	r30, r20
    15c4:	f5 0b       	sbc	r31, r21

000015c6 <__udivmodsi4_ep>:
    15c6:	66 1f       	adc	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	1a 94       	dec	r1
    15d0:	69 f7       	brne	.-38     	; 0x15ac <__udivmodsi4_loop>
    15d2:	60 95       	com	r22
    15d4:	70 95       	com	r23
    15d6:	80 95       	com	r24
    15d8:	90 95       	com	r25
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	bd 01       	movw	r22, r26
    15e0:	cf 01       	movw	r24, r30
    15e2:	08 95       	ret

000015e4 <__divmodsi4>:
    15e4:	05 2e       	mov	r0, r21
    15e6:	97 fb       	bst	r25, 7
    15e8:	1e f4       	brtc	.+6      	; 0x15f0 <__divmodsi4+0xc>
    15ea:	00 94       	com	r0
    15ec:	0e 94 09 0b 	call	0x1612	; 0x1612 <__negsi2>
    15f0:	57 fd       	sbrc	r21, 7
    15f2:	07 d0       	rcall	.+14     	; 0x1602 <__divmodsi4_neg2>
    15f4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__udivmodsi4>
    15f8:	07 fc       	sbrc	r0, 7
    15fa:	03 d0       	rcall	.+6      	; 0x1602 <__divmodsi4_neg2>
    15fc:	4e f4       	brtc	.+18     	; 0x1610 <__divmodsi4_exit>
    15fe:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__negsi2>

00001602 <__divmodsi4_neg2>:
    1602:	50 95       	com	r21
    1604:	40 95       	com	r20
    1606:	30 95       	com	r19
    1608:	21 95       	neg	r18
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	4f 4f       	sbci	r20, 0xFF	; 255
    160e:	5f 4f       	sbci	r21, 0xFF	; 255

00001610 <__divmodsi4_exit>:
    1610:	08 95       	ret

00001612 <__negsi2>:
    1612:	90 95       	com	r25
    1614:	80 95       	com	r24
    1616:	70 95       	com	r23
    1618:	61 95       	neg	r22
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__tablejump2__>:
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	05 90       	lpm	r0, Z+
    1628:	f4 91       	lpm	r31, Z
    162a:	e0 2d       	mov	r30, r0
    162c:	09 94       	ijmp

0000162e <__muluhisi3>:
    162e:	0e 94 36 0b 	call	0x166c	; 0x166c <__umulhisi3>
    1632:	a5 9f       	mul	r26, r21
    1634:	90 0d       	add	r25, r0
    1636:	b4 9f       	mul	r27, r20
    1638:	90 0d       	add	r25, r0
    163a:	a4 9f       	mul	r26, r20
    163c:	80 0d       	add	r24, r0
    163e:	91 1d       	adc	r25, r1
    1640:	11 24       	eor	r1, r1
    1642:	08 95       	ret

00001644 <__udivmodhi4>:
    1644:	aa 1b       	sub	r26, r26
    1646:	bb 1b       	sub	r27, r27
    1648:	51 e1       	ldi	r21, 0x11	; 17
    164a:	07 c0       	rjmp	.+14     	; 0x165a <__udivmodhi4_ep>

0000164c <__udivmodhi4_loop>:
    164c:	aa 1f       	adc	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	a6 17       	cp	r26, r22
    1652:	b7 07       	cpc	r27, r23
    1654:	10 f0       	brcs	.+4      	; 0x165a <__udivmodhi4_ep>
    1656:	a6 1b       	sub	r26, r22
    1658:	b7 0b       	sbc	r27, r23

0000165a <__udivmodhi4_ep>:
    165a:	88 1f       	adc	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	5a 95       	dec	r21
    1660:	a9 f7       	brne	.-22     	; 0x164c <__udivmodhi4_loop>
    1662:	80 95       	com	r24
    1664:	90 95       	com	r25
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	08 95       	ret

0000166c <__umulhisi3>:
    166c:	a2 9f       	mul	r26, r18
    166e:	b0 01       	movw	r22, r0
    1670:	b3 9f       	mul	r27, r19
    1672:	c0 01       	movw	r24, r0
    1674:	a3 9f       	mul	r26, r19
    1676:	70 0d       	add	r23, r0
    1678:	81 1d       	adc	r24, r1
    167a:	11 24       	eor	r1, r1
    167c:	91 1d       	adc	r25, r1
    167e:	b2 9f       	mul	r27, r18
    1680:	70 0d       	add	r23, r0
    1682:	81 1d       	adc	r24, r1
    1684:	11 24       	eor	r1, r1
    1686:	91 1d       	adc	r25, r1
    1688:	08 95       	ret

0000168a <malloc>:
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	91 05       	cpc	r25, r1
    1696:	10 f4       	brcc	.+4      	; 0x169c <malloc+0x12>
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <__flp>
    16a0:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <__flp+0x1>
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	a0 e0       	ldi	r26, 0x00	; 0
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	30 97       	sbiw	r30, 0x00	; 0
    16ae:	19 f1       	breq	.+70     	; 0x16f6 <malloc+0x6c>
    16b0:	40 81       	ld	r20, Z
    16b2:	51 81       	ldd	r21, Z+1	; 0x01
    16b4:	02 81       	ldd	r16, Z+2	; 0x02
    16b6:	13 81       	ldd	r17, Z+3	; 0x03
    16b8:	48 17       	cp	r20, r24
    16ba:	59 07       	cpc	r21, r25
    16bc:	c8 f0       	brcs	.+50     	; 0x16f0 <malloc+0x66>
    16be:	84 17       	cp	r24, r20
    16c0:	95 07       	cpc	r25, r21
    16c2:	69 f4       	brne	.+26     	; 0x16de <malloc+0x54>
    16c4:	10 97       	sbiw	r26, 0x00	; 0
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <malloc+0x4a>
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	0c 93       	st	X, r16
    16cc:	12 97       	sbiw	r26, 0x02	; 2
    16ce:	13 96       	adiw	r26, 0x03	; 3
    16d0:	1c 93       	st	X, r17
    16d2:	27 c0       	rjmp	.+78     	; 0x1722 <malloc+0x98>
    16d4:	00 93 ca 02 	sts	0x02CA, r16	; 0x8002ca <__flp>
    16d8:	10 93 cb 02 	sts	0x02CB, r17	; 0x8002cb <__flp+0x1>
    16dc:	22 c0       	rjmp	.+68     	; 0x1722 <malloc+0x98>
    16de:	21 15       	cp	r18, r1
    16e0:	31 05       	cpc	r19, r1
    16e2:	19 f0       	breq	.+6      	; 0x16ea <malloc+0x60>
    16e4:	42 17       	cp	r20, r18
    16e6:	53 07       	cpc	r21, r19
    16e8:	18 f4       	brcc	.+6      	; 0x16f0 <malloc+0x66>
    16ea:	9a 01       	movw	r18, r20
    16ec:	bd 01       	movw	r22, r26
    16ee:	ef 01       	movw	r28, r30
    16f0:	df 01       	movw	r26, r30
    16f2:	f8 01       	movw	r30, r16
    16f4:	db cf       	rjmp	.-74     	; 0x16ac <malloc+0x22>
    16f6:	21 15       	cp	r18, r1
    16f8:	31 05       	cpc	r19, r1
    16fa:	f9 f0       	breq	.+62     	; 0x173a <malloc+0xb0>
    16fc:	28 1b       	sub	r18, r24
    16fe:	39 0b       	sbc	r19, r25
    1700:	24 30       	cpi	r18, 0x04	; 4
    1702:	31 05       	cpc	r19, r1
    1704:	80 f4       	brcc	.+32     	; 0x1726 <malloc+0x9c>
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	61 15       	cp	r22, r1
    170c:	71 05       	cpc	r23, r1
    170e:	21 f0       	breq	.+8      	; 0x1718 <malloc+0x8e>
    1710:	fb 01       	movw	r30, r22
    1712:	93 83       	std	Z+3, r25	; 0x03
    1714:	82 83       	std	Z+2, r24	; 0x02
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <malloc+0x96>
    1718:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <__flp+0x1>
    171c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__flp>
    1720:	fe 01       	movw	r30, r28
    1722:	32 96       	adiw	r30, 0x02	; 2
    1724:	44 c0       	rjmp	.+136    	; 0x17ae <malloc+0x124>
    1726:	fe 01       	movw	r30, r28
    1728:	e2 0f       	add	r30, r18
    172a:	f3 1f       	adc	r31, r19
    172c:	81 93       	st	Z+, r24
    172e:	91 93       	st	Z+, r25
    1730:	22 50       	subi	r18, 0x02	; 2
    1732:	31 09       	sbc	r19, r1
    1734:	39 83       	std	Y+1, r19	; 0x01
    1736:	28 83       	st	Y, r18
    1738:	3a c0       	rjmp	.+116    	; 0x17ae <malloc+0x124>
    173a:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <__brkval>
    173e:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <__brkval+0x1>
    1742:	23 2b       	or	r18, r19
    1744:	41 f4       	brne	.+16     	; 0x1756 <malloc+0xcc>
    1746:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    174a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    174e:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <__brkval+0x1>
    1752:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <__brkval>
    1756:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    175a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    175e:	21 15       	cp	r18, r1
    1760:	31 05       	cpc	r19, r1
    1762:	41 f4       	brne	.+16     	; 0x1774 <malloc+0xea>
    1764:	2d b7       	in	r18, 0x3d	; 61
    1766:	3e b7       	in	r19, 0x3e	; 62
    1768:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    176c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1770:	24 1b       	sub	r18, r20
    1772:	35 0b       	sbc	r19, r21
    1774:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <__brkval>
    1778:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <__brkval+0x1>
    177c:	e2 17       	cp	r30, r18
    177e:	f3 07       	cpc	r31, r19
    1780:	a0 f4       	brcc	.+40     	; 0x17aa <malloc+0x120>
    1782:	2e 1b       	sub	r18, r30
    1784:	3f 0b       	sbc	r19, r31
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	78 f0       	brcs	.+30     	; 0x17aa <malloc+0x120>
    178c:	ac 01       	movw	r20, r24
    178e:	4e 5f       	subi	r20, 0xFE	; 254
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	24 17       	cp	r18, r20
    1794:	35 07       	cpc	r19, r21
    1796:	48 f0       	brcs	.+18     	; 0x17aa <malloc+0x120>
    1798:	4e 0f       	add	r20, r30
    179a:	5f 1f       	adc	r21, r31
    179c:	50 93 c9 02 	sts	0x02C9, r21	; 0x8002c9 <__brkval+0x1>
    17a0:	40 93 c8 02 	sts	0x02C8, r20	; 0x8002c8 <__brkval>
    17a4:	81 93       	st	Z+, r24
    17a6:	91 93       	st	Z+, r25
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <malloc+0x124>
    17aa:	e0 e0       	ldi	r30, 0x00	; 0
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	cf 01       	movw	r24, r30
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <free>:
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <free+0xa>
    17c2:	81 c0       	rjmp	.+258    	; 0x18c6 <free+0x10c>
    17c4:	fc 01       	movw	r30, r24
    17c6:	32 97       	sbiw	r30, 0x02	; 2
    17c8:	13 82       	std	Z+3, r1	; 0x03
    17ca:	12 82       	std	Z+2, r1	; 0x02
    17cc:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <__flp>
    17d0:	b0 91 cb 02 	lds	r27, 0x02CB	; 0x8002cb <__flp+0x1>
    17d4:	10 97       	sbiw	r26, 0x00	; 0
    17d6:	81 f4       	brne	.+32     	; 0x17f8 <free+0x3e>
    17d8:	20 81       	ld	r18, Z
    17da:	31 81       	ldd	r19, Z+1	; 0x01
    17dc:	82 0f       	add	r24, r18
    17de:	93 1f       	adc	r25, r19
    17e0:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <__brkval>
    17e4:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <__brkval+0x1>
    17e8:	28 17       	cp	r18, r24
    17ea:	39 07       	cpc	r19, r25
    17ec:	51 f5       	brne	.+84     	; 0x1842 <free+0x88>
    17ee:	f0 93 c9 02 	sts	0x02C9, r31	; 0x8002c9 <__brkval+0x1>
    17f2:	e0 93 c8 02 	sts	0x02C8, r30	; 0x8002c8 <__brkval>
    17f6:	67 c0       	rjmp	.+206    	; 0x18c6 <free+0x10c>
    17f8:	ed 01       	movw	r28, r26
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	ce 17       	cp	r28, r30
    1800:	df 07       	cpc	r29, r31
    1802:	40 f4       	brcc	.+16     	; 0x1814 <free+0x5a>
    1804:	4a 81       	ldd	r20, Y+2	; 0x02
    1806:	5b 81       	ldd	r21, Y+3	; 0x03
    1808:	9e 01       	movw	r18, r28
    180a:	41 15       	cp	r20, r1
    180c:	51 05       	cpc	r21, r1
    180e:	f1 f0       	breq	.+60     	; 0x184c <free+0x92>
    1810:	ea 01       	movw	r28, r20
    1812:	f5 cf       	rjmp	.-22     	; 0x17fe <free+0x44>
    1814:	d3 83       	std	Z+3, r29	; 0x03
    1816:	c2 83       	std	Z+2, r28	; 0x02
    1818:	40 81       	ld	r20, Z
    181a:	51 81       	ldd	r21, Z+1	; 0x01
    181c:	84 0f       	add	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	c8 17       	cp	r28, r24
    1822:	d9 07       	cpc	r29, r25
    1824:	59 f4       	brne	.+22     	; 0x183c <free+0x82>
    1826:	88 81       	ld	r24, Y
    1828:	99 81       	ldd	r25, Y+1	; 0x01
    182a:	84 0f       	add	r24, r20
    182c:	95 1f       	adc	r25, r21
    182e:	02 96       	adiw	r24, 0x02	; 2
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	93 83       	std	Z+3, r25	; 0x03
    183a:	82 83       	std	Z+2, r24	; 0x02
    183c:	21 15       	cp	r18, r1
    183e:	31 05       	cpc	r19, r1
    1840:	29 f4       	brne	.+10     	; 0x184c <free+0x92>
    1842:	f0 93 cb 02 	sts	0x02CB, r31	; 0x8002cb <__flp+0x1>
    1846:	e0 93 ca 02 	sts	0x02CA, r30	; 0x8002ca <__flp>
    184a:	3d c0       	rjmp	.+122    	; 0x18c6 <free+0x10c>
    184c:	e9 01       	movw	r28, r18
    184e:	fb 83       	std	Y+3, r31	; 0x03
    1850:	ea 83       	std	Y+2, r30	; 0x02
    1852:	49 91       	ld	r20, Y+
    1854:	59 91       	ld	r21, Y+
    1856:	c4 0f       	add	r28, r20
    1858:	d5 1f       	adc	r29, r21
    185a:	ec 17       	cp	r30, r28
    185c:	fd 07       	cpc	r31, r29
    185e:	61 f4       	brne	.+24     	; 0x1878 <free+0xbe>
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	84 0f       	add	r24, r20
    1866:	95 1f       	adc	r25, r21
    1868:	02 96       	adiw	r24, 0x02	; 2
    186a:	e9 01       	movw	r28, r18
    186c:	99 83       	std	Y+1, r25	; 0x01
    186e:	88 83       	st	Y, r24
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	9b 83       	std	Y+3, r25	; 0x03
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	e0 e0       	ldi	r30, 0x00	; 0
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	12 96       	adiw	r26, 0x02	; 2
    187e:	8d 91       	ld	r24, X+
    1880:	9c 91       	ld	r25, X
    1882:	13 97       	sbiw	r26, 0x03	; 3
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	19 f0       	breq	.+6      	; 0x188e <free+0xd4>
    1888:	fd 01       	movw	r30, r26
    188a:	dc 01       	movw	r26, r24
    188c:	f7 cf       	rjmp	.-18     	; 0x187c <free+0xc2>
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	9d 01       	movw	r18, r26
    1896:	2e 5f       	subi	r18, 0xFE	; 254
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	82 0f       	add	r24, r18
    189c:	93 1f       	adc	r25, r19
    189e:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <__brkval>
    18a2:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <__brkval+0x1>
    18a6:	28 17       	cp	r18, r24
    18a8:	39 07       	cpc	r19, r25
    18aa:	69 f4       	brne	.+26     	; 0x18c6 <free+0x10c>
    18ac:	30 97       	sbiw	r30, 0x00	; 0
    18ae:	29 f4       	brne	.+10     	; 0x18ba <free+0x100>
    18b0:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <__flp+0x1>
    18b4:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <__flp>
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <free+0x104>
    18ba:	13 82       	std	Z+3, r1	; 0x03
    18bc:	12 82       	std	Z+2, r1	; 0x02
    18be:	b0 93 c9 02 	sts	0x02C9, r27	; 0x8002c9 <__brkval+0x1>
    18c2:	a0 93 c8 02 	sts	0x02C8, r26	; 0x8002c8 <__brkval>
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <__do_global_dtors>:
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	c9 e7       	ldi	r28, 0x79	; 121
    18d0:	d0 e0       	ldi	r29, 0x00	; 0
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__do_global_dtors+0x10>
    18d4:	fe 01       	movw	r30, r28
    18d6:	0e 94 11 0b 	call	0x1622	; 0x1622 <__tablejump2__>
    18da:	21 96       	adiw	r28, 0x01	; 1
    18dc:	ca 37       	cpi	r28, 0x7A	; 122
    18de:	d1 07       	cpc	r29, r17
    18e0:	c9 f7       	brne	.-14     	; 0x18d4 <__do_global_dtors+0x8>
    18e2:	f8 94       	cli

000018e4 <__stop_program>:
    18e4:	ff cf       	rjmp	.-2      	; 0x18e4 <__stop_program>
