
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000d30  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800146  00800146  00000e0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007efb  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b3f  00000000  00000000  00009097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001abf  00000000  00000000  0000abd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000086c  00000000  00000000  0000c698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000216f  00000000  00000000  0000cf04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f3a  00000000  00000000  0000f073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00011fad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_18>
  4c:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	a3 04       	cpc	r10, r3

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e0 e3       	ldi	r30, 0x30	; 48
  d8:	fd e0       	ldi	r31, 0x0D	; 13
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a6 34       	cpi	r26, 0x46	; 70
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a6 e4       	ldi	r26, 0x46	; 70
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a6 3f       	cpi	r26, 0xF6	; 246
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 6f 05 	call	0xade	; 0xade <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
 110:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <led_create>:
	return led;
}

void led_destroy(led_blinker* led)
{
	free(led);
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	18 2f       	mov	r17, r24
 122:	09 2f       	mov	r16, r25
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 75 05 	call	0xaea	; 0xaea <malloc>
 12c:	ec 01       	movw	r28, r24
 12e:	18 83       	st	Y, r17
 130:	09 83       	std	Y+1, r16	; 0x01
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 2f       	mov	r24, r17
 136:	0e 94 73 02 	call	0x4e6	; 0x4e6 <pinMode>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <led_turn_on>:
	pinMode(led_pin, OUTPUT);
}
 
void led_turn_on(int led_pin)
{
	digitalWrite(led_pin, HIGH);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0c 94 af 02 	jmp	0x55e	; 0x55e <digitalWrite>

0000014c <led_turn_off>:
}

void led_turn_off(int led_pin)
{
	digitalWrite(led_pin, LOW);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	0c 94 af 02 	jmp	0x55e	; 0x55e <digitalWrite>

00000152 <length_detector_create>:
#include "length_detector.h"


length_detector *length_detector_create(int trig_pin, int echo_pin)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	18 2f       	mov	r17, r24
 160:	09 2f       	mov	r16, r25
 162:	7b 01       	movw	r14, r22
  length_detector * detector = malloc(sizeof(length_detector));
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 75 05 	call	0xaea	; 0xaea <malloc>
 16c:	ec 01       	movw	r28, r24
  detector->trig_pin = trig_pin;
 16e:	1a 83       	std	Y+2, r17	; 0x02
 170:	0b 83       	std	Y+3, r16	; 0x03
  detector->echo_pin = echo_pin;
 172:	f9 82       	std	Y+1, r15	; 0x01
 174:	e8 82       	st	Y, r14
  return detector;
}

void length_detector_init(length_detector * detector)
{
  pinMode(detector->trig_pin, OUTPUT);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 2f       	mov	r24, r17
 17a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <pinMode>
  pinMode(detector->echo_pin, INPUT);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	88 81       	ld	r24, Y
 182:	0e 94 73 02 	call	0x4e6	; 0x4e6 <pinMode>
  length_detector * detector = malloc(sizeof(length_detector));
  detector->trig_pin = trig_pin;
  detector->echo_pin = echo_pin;
  length_detector_init(detector);
  return detector;
}
 186:	ce 01       	movw	r24, r28
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <length_detector_measure>:
  delay(10);
  digitalWrite(trig_pin, LOW);
}

int length_detector_measure(length_detector * detector)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	8c 01       	movw	r16, r24
  pinMode(detector->echo_pin, INPUT);
}

void length_detector_ping(int trig_pin)
{
  digitalWrite(trig_pin, HIGH);
 1a0:	fc 01       	movw	r30, r24
 1a2:	c2 81       	ldd	r28, Z+2	; 0x02
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 af 02 	call	0x55e	; 0x55e <digitalWrite>
  delay(10);
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <delay>
  digitalWrite(trig_pin, LOW);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 af 02 	call	0x55e	; 0x55e <digitalWrite>
int length_detector_measure(length_detector * detector)
{
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
 1c0:	f8 01       	movw	r30, r16
 1c2:	80 81       	ld	r24, Z
 1c4:	0e 94 de 02 	call	0x5bc	; 0x5bc <digitalRead>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	e1 f4       	brne	.+56     	; 0x204 <length_detector_measure+0x6e>
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
  {
    return -1;
  }
  
  int time = 0;  
  while(digitalRead(detector->echo_pin) != LOW) {
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 81       	ld	r24, Z
 1d4:	0e 94 de 02 	call	0x5bc	; 0x5bc <digitalRead>
 1d8:	89 2b       	or	r24, r25
 1da:	41 f0       	breq	.+16     	; 0x1ec <length_detector_measure+0x56>
    time++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
    delay(1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <delay>
 1ea:	f2 cf       	rjmp	.-28     	; 0x1d0 <length_detector_measure+0x3a>
  }
  
  return (time * 34) / 2000;
 1ec:	22 e2       	ldi	r18, 0x22	; 34
 1ee:	2c 9f       	mul	r18, r28
 1f0:	c0 01       	movw	r24, r0
 1f2:	2d 9f       	mul	r18, r29
 1f4:	90 0d       	add	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	60 ed       	ldi	r22, 0xD0	; 208
 1fa:	77 e0       	ldi	r23, 0x07	; 7
 1fc:	0e 94 25 05 	call	0xa4a	; 0xa4a <__divmodhi4>
 200:	cb 01       	movw	r24, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <length_detector_measure+0x72>
  length_detector_ping(detector->trig_pin);
  
  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
  if(digitalRead(detector->echo_pin) != HIGH)
  {
    return -1;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	9f ef       	ldi	r25, 0xFF	; 255
    time++;
    delay(1);
  }
  
  return (time * 34) / 2000;
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <setup>:
HardwareSerial *serial;
#endif

void setup() {
	#ifdef DEBUG
		serial = hardware_serial_get();
 212:	0e 94 08 03 	call	0x610	; 0x610 <hardware_serial_get>
 216:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <serial+0x1>
 21a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <serial>
		hardware_serial_begin(serial, 9600);
 21e:	60 e8       	ldi	r22, 0x80	; 128
 220:	75 e2       	ldi	r23, 0x25	; 37
 222:	0e 94 0b 03 	call	0x616	; 0x616 <hardware_serial_begin>
		hardware_serial_println(serial, "Starting program for Alien Cake");
 226:	66 e0       	ldi	r22, 0x06	; 6
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <serial>
 22e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <serial+0x1>
 232:	0e 94 13 03 	call	0x626	; 0x626 <hardware_serial_println>
	#endif
	// put your setup code here, to run once:
	led = led_create(PIN_D4);
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 8c 00 	call	0x118	; 0x118 <led_create>
 23e:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <led+0x1>
 242:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <led>
	detector = length_detector_create(TRIG_PIN, ECHO_PIN);
 246:	69 e0       	ldi	r22, 0x09	; 9
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 a9 00 	call	0x152	; 0x152 <length_detector_create>
 252:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <detector+0x1>
 256:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <detector>
	
	led_turn_off(led->led_pin);
 25a:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <led>
 25e:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <led+0x1>
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	0c 94 a6 00 	jmp	0x14c	; 0x14c <led_turn_off>

0000026a <loop>:
}

void loop() {
  // put your main code here, to run repeatedly:
	int distance = length_detector_measure(detector);
 26a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <detector>
 26e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <detector+0x1>
 272:	0e 94 cb 00 	call	0x196	; 0x196 <length_detector_measure>
	
	if(distance > 0)
 276:	18 16       	cp	r1, r24
 278:	19 06       	cpc	r1, r25
 27a:	74 f4       	brge	.+28     	; 0x298 <loop+0x2e>
	{
		led_turn_on(led->led_pin);
 27c:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <led>
 280:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <led+0x1>
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	0e 94 a3 00 	call	0x146	; 0x146 <led_turn_on>
		delay(2000);
 28c:	60 ed       	ldi	r22, 0xD0	; 208
 28e:	77 e0       	ldi	r23, 0x07	; 7
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <delay>
	}
	
	led_turn_off(led->led_pin);
 298:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <led>
 29c:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <led+0x1>
 2a0:	80 81       	ld	r24, Z
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <led_turn_off>

000002a8 <initVariant>:
 2a8:	08 95       	ret

000002aa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 2aa:	0e 94 0f 02 	call	0x41e	; 0x41e <init>

	initVariant();
 2ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 2b2:	0e 94 09 01 	call	0x212	; 0x212 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2b6:	c4 e4       	ldi	r28, 0x44	; 68
 2b8:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 2ba:	0e 94 35 01 	call	0x26a	; 0x26a <loop>
		if (serialEventRun) serialEventRun();
 2be:	20 97       	sbiw	r28, 0x00	; 0
 2c0:	e1 f3       	breq	.-8      	; 0x2ba <main+0x10>
 2c2:	0e 94 44 03 	call	0x688	; 0x688 <_Z14serialEventRunv>
 2c6:	f9 cf       	rjmp	.-14     	; 0x2ba <main+0x10>

000002c8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timer0_millis>
 2e2:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <timer0_millis+0x1>
 2e6:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <timer0_millis+0x2>
 2ea:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <timer0_millis+0x3>
 2ee:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <__data_end>
 2f2:	23 e0       	ldi	r18, 0x03	; 3
 2f4:	23 0f       	add	r18, r19
 2f6:	2d 37       	cpi	r18, 0x7D	; 125
 2f8:	20 f4       	brcc	.+8      	; 0x302 <__vector_16+0x3a>
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	a1 1d       	adc	r26, r1
 2fe:	b1 1d       	adc	r27, r1
 300:	05 c0       	rjmp	.+10     	; 0x30c <__vector_16+0x44>
 302:	26 e8       	ldi	r18, 0x86	; 134
 304:	23 0f       	add	r18, r19
 306:	02 96       	adiw	r24, 0x02	; 2
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <__data_end>
 310:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timer0_millis>
 314:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <timer0_millis+0x1>
 318:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <timer0_millis+0x2>
 31c:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <timer0_millis+0x3>
 320:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timer0_overflow_count>
 324:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timer0_overflow_count+0x1>
 328:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <timer0_overflow_count+0x2>
 32c:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <timer0_overflow_count+0x3>
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	a1 1d       	adc	r26, r1
 334:	b1 1d       	adc	r27, r1
 336:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timer0_overflow_count>
 33a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timer0_overflow_count+0x1>
 33e:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timer0_overflow_count+0x2>
 342:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timer0_overflow_count+0x3>
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <micros>:
 35c:	3f b7       	in	r19, 0x3f	; 63
 35e:	f8 94       	cli
 360:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timer0_overflow_count>
 364:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timer0_overflow_count+0x1>
 368:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <timer0_overflow_count+0x2>
 36c:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <timer0_overflow_count+0x3>
 370:	26 b5       	in	r18, 0x26	; 38
 372:	a8 9b       	sbis	0x15, 0	; 21
 374:	05 c0       	rjmp	.+10     	; 0x380 <micros+0x24>
 376:	2f 3f       	cpi	r18, 0xFF	; 255
 378:	19 f0       	breq	.+6      	; 0x380 <micros+0x24>
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	a1 1d       	adc	r26, r1
 37e:	b1 1d       	adc	r27, r1
 380:	3f bf       	out	0x3f, r19	; 63
 382:	ba 2f       	mov	r27, r26
 384:	a9 2f       	mov	r26, r25
 386:	98 2f       	mov	r25, r24
 388:	88 27       	eor	r24, r24
 38a:	82 0f       	add	r24, r18
 38c:	91 1d       	adc	r25, r1
 38e:	a1 1d       	adc	r26, r1
 390:	b1 1d       	adc	r27, r1
 392:	bc 01       	movw	r22, r24
 394:	cd 01       	movw	r24, r26
 396:	42 e0       	ldi	r20, 0x02	; 2
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	4a 95       	dec	r20
 3a2:	d1 f7       	brne	.-12     	; 0x398 <micros+0x3c>
 3a4:	08 95       	ret

000003a6 <delay>:
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
 3ba:	0e 94 ae 01 	call	0x35c	; 0x35c <micros>
 3be:	4b 01       	movw	r8, r22
 3c0:	5c 01       	movw	r10, r24
 3c2:	c1 14       	cp	r12, r1
 3c4:	d1 04       	cpc	r13, r1
 3c6:	e1 04       	cpc	r14, r1
 3c8:	f1 04       	cpc	r15, r1
 3ca:	01 f1       	breq	.+64     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3cc:	0e 94 07 03 	call	0x60e	; 0x60e <yield>
 3d0:	0e 94 ae 01 	call	0x35c	; 0x35c <micros>
 3d4:	dc 01       	movw	r26, r24
 3d6:	cb 01       	movw	r24, r22
 3d8:	88 19       	sub	r24, r8
 3da:	99 09       	sbc	r25, r9
 3dc:	aa 09       	sbc	r26, r10
 3de:	bb 09       	sbc	r27, r11
 3e0:	88 3e       	cpi	r24, 0xE8	; 232
 3e2:	93 40       	sbci	r25, 0x03	; 3
 3e4:	a1 05       	cpc	r26, r1
 3e6:	b1 05       	cpc	r27, r1
 3e8:	60 f3       	brcs	.-40     	; 0x3c2 <delay+0x1c>
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	c2 1a       	sub	r12, r18
 3ee:	d1 08       	sbc	r13, r1
 3f0:	e1 08       	sbc	r14, r1
 3f2:	f1 08       	sbc	r15, r1
 3f4:	88 ee       	ldi	r24, 0xE8	; 232
 3f6:	88 0e       	add	r8, r24
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	98 1e       	adc	r9, r24
 3fc:	a1 1c       	adc	r10, r1
 3fe:	b1 1c       	adc	r11, r1
 400:	c1 14       	cp	r12, r1
 402:	d1 04       	cpc	r13, r1
 404:	e1 04       	cpc	r14, r1
 406:	f1 04       	cpc	r15, r1
 408:	19 f7       	brne	.-58     	; 0x3d0 <delay+0x2a>
 40a:	db cf       	rjmp	.-74     	; 0x3c2 <delay+0x1c>
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	8f 90       	pop	r8
 41c:	08 95       	ret

0000041e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 41e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 420:	84 b5       	in	r24, 0x24	; 36
 422:	82 60       	ori	r24, 0x02	; 2
 424:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 426:	84 b5       	in	r24, 0x24	; 36
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 42c:	85 b5       	in	r24, 0x25	; 37
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 432:	85 b5       	in	r24, 0x25	; 37
 434:	81 60       	ori	r24, 0x01	; 1
 436:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 438:	ee e6       	ldi	r30, 0x6E	; 110
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 442:	e1 e8       	ldi	r30, 0x81	; 129
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 448:	80 81       	ld	r24, Z
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 44e:	80 81       	ld	r24, Z
 450:	81 60       	ori	r24, 0x01	; 1
 452:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 454:	e0 e8       	ldi	r30, 0x80	; 128
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 45e:	e1 eb       	ldi	r30, 0xB1	; 177
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	84 60       	ori	r24, 0x04	; 4
 466:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 468:	e0 eb       	ldi	r30, 0xB0	; 176
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 472:	ea e7       	ldi	r30, 0x7A	; 122
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 47c:	80 81       	ld	r24, Z
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 482:	80 81       	ld	r24, Z
 484:	81 60       	ori	r24, 0x01	; 1
 486:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 488:	80 81       	ld	r24, Z
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 48e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 492:	08 95       	ret

00000494 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	81 f0       	breq	.+32     	; 0x4b8 <turnOffPWM+0x24>
 498:	28 f4       	brcc	.+10     	; 0x4a4 <turnOffPWM+0x10>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	99 f0       	breq	.+38     	; 0x4c4 <turnOffPWM+0x30>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	a1 f0       	breq	.+40     	; 0x4ca <turnOffPWM+0x36>
 4a2:	08 95       	ret
 4a4:	87 30       	cpi	r24, 0x07	; 7
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <turnOffPWM+0x3e>
 4a8:	88 30       	cpi	r24, 0x08	; 8
 4aa:	b9 f0       	breq	.+46     	; 0x4da <turnOffPWM+0x46>
 4ac:	84 30       	cpi	r24, 0x04	; 4
 4ae:	d1 f4       	brne	.+52     	; 0x4e4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4b4:	8f 7d       	andi	r24, 0xDF	; 223
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4bc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4c2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4c4:	84 b5       	in	r24, 0x24	; 36
 4c6:	8f 77       	andi	r24, 0x7F	; 127
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4ca:	84 b5       	in	r24, 0x24	; 36
 4cc:	8f 7d       	andi	r24, 0xDF	; 223
 4ce:	84 bd       	out	0x24, r24	; 36
 4d0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4d6:	8f 77       	andi	r24, 0x7F	; 127
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4de:	8f 7d       	andi	r24, 0xDF	; 223
 4e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4e4:	08 95       	ret

000004e6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	fc 01       	movw	r30, r24
 4ee:	e4 58       	subi	r30, 0x84	; 132
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 4f4:	fc 01       	movw	r30, r24
 4f6:	e0 57       	subi	r30, 0x70	; 112
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 4fc:	88 23       	and	r24, r24
 4fe:	61 f1       	breq	.+88     	; 0x558 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	fc 01       	movw	r30, r24
 508:	e8 54       	subi	r30, 0x48	; 72
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	c5 91       	lpm	r28, Z+
 50e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 510:	fc 01       	movw	r30, r24
 512:	e2 55       	subi	r30, 0x52	; 82
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	a5 91       	lpm	r26, Z+
 518:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 51a:	61 11       	cpse	r22, r1
 51c:	09 c0       	rjmp	.+18     	; 0x530 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 51e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 520:	f8 94       	cli
		*reg &= ~bit;
 522:	88 81       	ld	r24, Y
 524:	20 95       	com	r18
 526:	82 23       	and	r24, r18
 528:	88 83       	st	Y, r24
		*out &= ~bit;
 52a:	ec 91       	ld	r30, X
 52c:	2e 23       	and	r18, r30
 52e:	0b c0       	rjmp	.+22     	; 0x546 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 530:	62 30       	cpi	r22, 0x02	; 2
 532:	61 f4       	brne	.+24     	; 0x54c <pinMode+0x66>
		uint8_t oldSREG = SREG;
 534:	9f b7       	in	r25, 0x3f	; 63
                cli();
 536:	f8 94       	cli
		*reg &= ~bit;
 538:	88 81       	ld	r24, Y
 53a:	32 2f       	mov	r19, r18
 53c:	30 95       	com	r19
 53e:	83 23       	and	r24, r19
 540:	88 83       	st	Y, r24
		*out |= bit;
 542:	ec 91       	ld	r30, X
 544:	2e 2b       	or	r18, r30
 546:	2c 93       	st	X, r18
		SREG = oldSREG;
 548:	9f bf       	out	0x3f, r25	; 63
 54a:	06 c0       	rjmp	.+12     	; 0x558 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 54c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 54e:	f8 94       	cli
		*reg |= bit;
 550:	e8 81       	ld	r30, Y
 552:	2e 2b       	or	r18, r30
 554:	28 83       	st	Y, r18
		SREG = oldSREG;
 556:	8f bf       	out	0x3f, r24	; 63
	}
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	e8 59       	subi	r30, 0x98	; 152
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 570:	f9 01       	movw	r30, r18
 572:	e4 58       	subi	r30, 0x84	; 132
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 578:	f9 01       	movw	r30, r18
 57a:	e0 57       	subi	r30, 0x70	; 112
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 580:	cc 23       	and	r28, r28
 582:	c1 f0       	breq	.+48     	; 0x5b4 <digitalWrite+0x56>
 584:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 586:	81 11       	cpse	r24, r1
 588:	0e 94 4a 02 	call	0x494	; 0x494 <turnOffPWM>

	out = portOutputRegister(port);
 58c:	ec 2f       	mov	r30, r28
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	e2 55       	subi	r30, 0x52	; 82
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	a5 91       	lpm	r26, Z+
 59a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 59c:	9f b7       	in	r25, 0x3f	; 63
	cli();
 59e:	f8 94       	cli

	if (val == LOW) {
 5a0:	11 11       	cpse	r17, r1
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <digitalWrite+0x4e>
		*out &= ~bit;
 5a4:	8c 91       	ld	r24, X
 5a6:	d0 95       	com	r29
 5a8:	d8 23       	and	r29, r24
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5ac:	ec 91       	ld	r30, X
 5ae:	de 2b       	or	r29, r30
 5b0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5b2:	9f bf       	out	0x3f, r25	; 63
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	08 95       	ret

000005bc <digitalRead>:

int digitalRead(uint8_t pin)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	e8 59       	subi	r30, 0x98	; 152
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5cc:	f9 01       	movw	r30, r18
 5ce:	e4 58       	subi	r30, 0x84	; 132
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5d4:	f9 01       	movw	r30, r18
 5d6:	e0 57       	subi	r30, 0x70	; 112
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 5dc:	cc 23       	and	r28, r28
 5de:	91 f0       	breq	.+36     	; 0x604 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5e0:	81 11       	cpse	r24, r1
 5e2:	0e 94 4a 02 	call	0x494	; 0x494 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 5e6:	ec 2f       	mov	r30, r28
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ec 55       	subi	r30, 0x5C	; 92
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	a5 91       	lpm	r26, Z+
 5f4:	b4 91       	lpm	r27, Z
 5f6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 5f8:	ed 23       	and	r30, r29
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	21 f4       	brne	.+8      	; 0x608 <digitalRead+0x4c>
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <digitalRead+0x4c>
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 60e:	08 95       	ret

00000610 <hardware_serial_get>:
 extern "C"
 {
	HardwareSerial* hardware_serial_get(void)
	{
		return &Serial;
	}
 610:	8f e4       	ldi	r24, 0x4F	; 79
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	08 95       	ret

00000616 <hardware_serial_begin>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 616:	ab 01       	movw	r20, r22
 618:	77 0f       	add	r23, r23
 61a:	66 0b       	sbc	r22, r22
 61c:	77 0b       	sbc	r23, r23
 61e:	26 e0       	ldi	r18, 0x06	; 6
 620:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN14HardwareSerial5beginEmh>
 624:	08 95       	ret

00000626 <hardware_serial_println>:
		handle->begin(bandwith);
	}

	void hardware_serial_println(HardwareSerial *handle, const char *text)
	{
		handle->println(text);
 626:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN5Print7printlnEPKc>
 62a:	08 95       	ret

0000062c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 62c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 62e:	91 8d       	ldd	r25, Z+25	; 0x19
 630:	22 8d       	ldd	r18, Z+26	; 0x1a
 632:	89 2f       	mov	r24, r25
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	80 5c       	subi	r24, 0xC0	; 192
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	82 1b       	sub	r24, r18
 63c:	91 09       	sbc	r25, r1
}
 63e:	8f 73       	andi	r24, 0x3F	; 63
 640:	99 27       	eor	r25, r25
 642:	08 95       	ret

00000644 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 644:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 646:	91 8d       	ldd	r25, Z+25	; 0x19
 648:	82 8d       	ldd	r24, Z+26	; 0x1a
 64a:	98 17       	cp	r25, r24
 64c:	31 f0       	breq	.+12     	; 0x65a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 64e:	82 8d       	ldd	r24, Z+26	; 0x1a
 650:	e8 0f       	add	r30, r24
 652:	f1 1d       	adc	r31, r1
 654:	85 8d       	ldd	r24, Z+29	; 0x1d
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 65a:	8f ef       	ldi	r24, 0xFF	; 255
 65c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 65e:	08 95       	ret

00000660 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 660:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 662:	91 8d       	ldd	r25, Z+25	; 0x19
 664:	82 8d       	ldd	r24, Z+26	; 0x1a
 666:	98 17       	cp	r25, r24
 668:	61 f0       	breq	.+24     	; 0x682 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 66a:	82 8d       	ldd	r24, Z+26	; 0x1a
 66c:	df 01       	movw	r26, r30
 66e:	a8 0f       	add	r26, r24
 670:	b1 1d       	adc	r27, r1
 672:	5d 96       	adiw	r26, 0x1d	; 29
 674:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 676:	92 8d       	ldd	r25, Z+26	; 0x1a
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	9f 73       	andi	r25, 0x3F	; 63
 67c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 686:	08 95       	ret

00000688 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 688:	89 e9       	ldi	r24, 0x99	; 153
 68a:	94 e0       	ldi	r25, 0x04	; 4
 68c:	89 2b       	or	r24, r25
 68e:	49 f0       	breq	.+18     	; 0x6a2 <_Z14serialEventRunv+0x1a>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	89 2b       	or	r24, r25
 696:	29 f0       	breq	.+10     	; 0x6a2 <_Z14serialEventRunv+0x1a>
 698:	0e 94 99 04 	call	0x932	; 0x932 <_Z17Serial0_availablev>
 69c:	81 11       	cpse	r24, r1
 69e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 6a2:	08 95       	ret

000006a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 6a4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 6a6:	84 8d       	ldd	r24, Z+28	; 0x1c
 6a8:	df 01       	movw	r26, r30
 6aa:	a8 0f       	add	r26, r24
 6ac:	b1 1d       	adc	r27, r1
 6ae:	a3 5a       	subi	r26, 0xA3	; 163
 6b0:	bf 4f       	sbci	r27, 0xFF	; 255
 6b2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 6b4:	84 8d       	ldd	r24, Z+28	; 0x1c
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	8f 73       	andi	r24, 0x3F	; 63
 6bc:	99 27       	eor	r25, r25
 6be:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 6c0:	a6 89       	ldd	r26, Z+22	; 0x16
 6c2:	b7 89       	ldd	r27, Z+23	; 0x17
 6c4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 6c6:	a0 89       	ldd	r26, Z+16	; 0x10
 6c8:	b1 89       	ldd	r27, Z+17	; 0x11
 6ca:	8c 91       	ld	r24, X
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 6d0:	93 8d       	ldd	r25, Z+27	; 0x1b
 6d2:	84 8d       	ldd	r24, Z+28	; 0x1c
 6d4:	98 13       	cpse	r25, r24
 6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 6d8:	02 88       	ldd	r0, Z+18	; 0x12
 6da:	f3 89       	ldd	r31, Z+19	; 0x13
 6dc:	e0 2d       	mov	r30, r0
 6de:	80 81       	ld	r24, Z
 6e0:	8f 7d       	andi	r24, 0xDF	; 223
 6e2:	80 83       	st	Z, r24
 6e4:	08 95       	ret

000006e6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	ec 01       	movw	r28, r24
  _written = true;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 6f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
 6fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6fc:	98 13       	cpse	r25, r24
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <_ZN14HardwareSerial5writeEh+0x24>
 700:	e8 89       	ldd	r30, Y+16	; 0x10
 702:	f9 89       	ldd	r31, Y+17	; 0x11
 704:	80 81       	ld	r24, Z
 706:	85 fd       	sbrc	r24, 5
 708:	24 c0       	rjmp	.+72     	; 0x752 <_ZN14HardwareSerial5writeEh+0x6c>
 70a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 70c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 70e:	10 e0       	ldi	r17, 0x00	; 0
 710:	0f 5f       	subi	r16, 0xFF	; 255
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	0f 73       	andi	r16, 0x3F	; 63
 716:	11 27       	eor	r17, r17
 718:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 71a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 71c:	e8 12       	cpse	r14, r24
 71e:	0c c0       	rjmp	.+24     	; 0x738 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	07 fc       	sbrc	r0, 7
 724:	fa cf       	rjmp	.-12     	; 0x71a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 726:	e8 89       	ldd	r30, Y+16	; 0x10
 728:	f9 89       	ldd	r31, Y+17	; 0x11
 72a:	80 81       	ld	r24, Z
 72c:	85 ff       	sbrs	r24, 5
 72e:	f5 cf       	rjmp	.-22     	; 0x71a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 730:	ce 01       	movw	r24, r28
 732:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 736:	f1 cf       	rjmp	.-30     	; 0x71a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 738:	8b 8d       	ldd	r24, Y+27	; 0x1b
 73a:	fe 01       	movw	r30, r28
 73c:	e8 0f       	add	r30, r24
 73e:	f1 1d       	adc	r31, r1
 740:	e3 5a       	subi	r30, 0xA3	; 163
 742:	ff 4f       	sbci	r31, 0xFF	; 255
 744:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 746:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 748:	ea 89       	ldd	r30, Y+18	; 0x12
 74a:	fb 89       	ldd	r31, Y+19	; 0x13
 74c:	80 81       	ld	r24, Z
 74e:	80 62       	ori	r24, 0x20	; 32
 750:	07 c0       	rjmp	.+14     	; 0x760 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 752:	ee 89       	ldd	r30, Y+22	; 0x16
 754:	ff 89       	ldd	r31, Y+23	; 0x17
 756:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 758:	e8 89       	ldd	r30, Y+16	; 0x10
 75a:	f9 89       	ldd	r31, Y+17	; 0x11
 75c:	80 81       	ld	r24, Z
 75e:	80 64       	ori	r24, 0x40	; 64
 760:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	08 95       	ret

00000774 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 77a:	88 8d       	ldd	r24, Y+24	; 0x18
 77c:	88 23       	and	r24, r24
 77e:	c9 f0       	breq	.+50     	; 0x7b2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 780:	ea 89       	ldd	r30, Y+18	; 0x12
 782:	fb 89       	ldd	r31, Y+19	; 0x13
 784:	80 81       	ld	r24, Z
 786:	85 fd       	sbrc	r24, 5
 788:	05 c0       	rjmp	.+10     	; 0x794 <_ZN14HardwareSerial5flushEv+0x20>
 78a:	a8 89       	ldd	r26, Y+16	; 0x10
 78c:	b9 89       	ldd	r27, Y+17	; 0x11
 78e:	8c 91       	ld	r24, X
 790:	86 fd       	sbrc	r24, 6
 792:	0f c0       	rjmp	.+30     	; 0x7b2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	07 fc       	sbrc	r0, 7
 798:	f5 cf       	rjmp	.-22     	; 0x784 <_ZN14HardwareSerial5flushEv+0x10>
 79a:	80 81       	ld	r24, Z
 79c:	85 ff       	sbrs	r24, 5
 79e:	f2 cf       	rjmp	.-28     	; 0x784 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 7a0:	a8 89       	ldd	r26, Y+16	; 0x10
 7a2:	b9 89       	ldd	r27, Y+17	; 0x11
 7a4:	8c 91       	ld	r24, X
 7a6:	85 ff       	sbrs	r24, 5
 7a8:	ed cf       	rjmp	.-38     	; 0x784 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 7aa:	ce 01       	movw	r24, r28
 7ac:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 7b0:	e7 cf       	rjmp	.-50     	; 0x780 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 7b8:	cf 92       	push	r12
 7ba:	df 92       	push	r13
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	ec 01       	movw	r28, r24
 7c8:	6a 01       	movw	r12, r20
 7ca:	7b 01       	movw	r14, r22
 7cc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 7ce:	e8 89       	ldd	r30, Y+16	; 0x10
 7d0:	f9 89       	ldd	r31, Y+17	; 0x11
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 7d6:	41 15       	cp	r20, r1
 7d8:	51 4e       	sbci	r21, 0xE1	; 225
 7da:	61 05       	cpc	r22, r1
 7dc:	71 05       	cpc	r23, r1
 7de:	b1 f0       	breq	.+44     	; 0x80c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	79 e0       	ldi	r23, 0x09	; 9
 7e4:	8d e3       	ldi	r24, 0x3D	; 61
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a7 01       	movw	r20, r14
 7ea:	96 01       	movw	r18, r12
 7ec:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
 7f0:	da 01       	movw	r26, r20
 7f2:	c9 01       	movw	r24, r18
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	a1 09       	sbc	r26, r1
 7f8:	b1 09       	sbc	r27, r1
 7fa:	b6 95       	lsr	r27
 7fc:	a7 95       	ror	r26
 7fe:	97 95       	ror	r25
 800:	87 95       	ror	r24
 802:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 804:	21 15       	cp	r18, r1
 806:	80 e1       	ldi	r24, 0x10	; 16
 808:	38 07       	cpc	r19, r24
 80a:	a8 f0       	brcs	.+42     	; 0x836 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 80c:	e8 89       	ldd	r30, Y+16	; 0x10
 80e:	f9 89       	ldd	r31, Y+17	; 0x11
 810:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 812:	60 e8       	ldi	r22, 0x80	; 128
 814:	74 e8       	ldi	r23, 0x84	; 132
 816:	8e e1       	ldi	r24, 0x1E	; 30
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	a7 01       	movw	r20, r14
 81c:	96 01       	movw	r18, r12
 81e:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
 822:	da 01       	movw	r26, r20
 824:	c9 01       	movw	r24, r18
 826:	01 97       	sbiw	r24, 0x01	; 1
 828:	a1 09       	sbc	r26, r1
 82a:	b1 09       	sbc	r27, r1
 82c:	b6 95       	lsr	r27
 82e:	a7 95       	ror	r26
 830:	97 95       	ror	r25
 832:	87 95       	ror	r24
 834:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 836:	ec 85       	ldd	r30, Y+12	; 0x0c
 838:	fd 85       	ldd	r31, Y+13	; 0x0d
 83a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 83c:	ee 85       	ldd	r30, Y+14	; 0x0e
 83e:	ff 85       	ldd	r31, Y+15	; 0x0f
 840:	20 83       	st	Z, r18

  _written = false;
 842:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 844:	ec 89       	ldd	r30, Y+20	; 0x14
 846:	fd 89       	ldd	r31, Y+21	; 0x15
 848:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 84a:	ea 89       	ldd	r30, Y+18	; 0x12
 84c:	fb 89       	ldd	r31, Y+19	; 0x13
 84e:	80 81       	ld	r24, Z
 850:	80 61       	ori	r24, 0x10	; 16
 852:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 854:	ea 89       	ldd	r30, Y+18	; 0x12
 856:	fb 89       	ldd	r31, Y+19	; 0x13
 858:	80 81       	ld	r24, Z
 85a:	88 60       	ori	r24, 0x08	; 8
 85c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 85e:	ea 89       	ldd	r30, Y+18	; 0x12
 860:	fb 89       	ldd	r31, Y+19	; 0x13
 862:	80 81       	ld	r24, Z
 864:	80 68       	ori	r24, 0x80	; 128
 866:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 868:	ea 89       	ldd	r30, Y+18	; 0x12
 86a:	fb 89       	ldd	r31, Y+19	; 0x13
 86c:	80 81       	ld	r24, Z
 86e:	8f 7d       	andi	r24, 0xDF	; 223
 870:	80 83       	st	Z, r24
}
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	ff 90       	pop	r15
 87a:	ef 90       	pop	r14
 87c:	df 90       	pop	r13
 87e:	cf 90       	pop	r12
 880:	08 95       	ret

00000882 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	8f 93       	push	r24
 890:	9f 93       	push	r25
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 896:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Serial+0x10>
 89a:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Serial+0x11>
 89e:	80 81       	ld	r24, Z
 8a0:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <Serial+0x16>
 8a4:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <Serial+0x17>
 8a8:	82 fd       	sbrc	r24, 2
 8aa:	12 c0       	rjmp	.+36     	; 0x8d0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 8ac:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8ae:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <Serial+0x19>
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
 8b4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 8b6:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <Serial+0x1a>
 8ba:	82 17       	cp	r24, r18
 8bc:	51 f0       	breq	.+20     	; 0x8d2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 8be:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Serial+0x19>
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	e1 5b       	subi	r30, 0xB1	; 177
 8c6:	fe 4f       	sbci	r31, 0xFE	; 254
 8c8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 8ca:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <Serial+0x19>
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 8d0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	2f 91       	pop	r18
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

000008e6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 8e6:	1f 92       	push	r1
 8e8:	0f 92       	push	r0
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	0f 92       	push	r0
 8ee:	11 24       	eor	r1, r1
 8f0:	2f 93       	push	r18
 8f2:	3f 93       	push	r19
 8f4:	4f 93       	push	r20
 8f6:	5f 93       	push	r21
 8f8:	6f 93       	push	r22
 8fa:	7f 93       	push	r23
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
 900:	af 93       	push	r26
 902:	bf 93       	push	r27
 904:	ef 93       	push	r30
 906:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 908:	8f e4       	ldi	r24, 0x4F	; 79
 90a:	91 e0       	ldi	r25, 0x01	; 1
 90c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 932:	8f e4       	ldi	r24, 0x4F	; 79
 934:	91 e0       	ldi	r25, 0x01	; 1
 936:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN14HardwareSerial9availableEv>
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	89 2b       	or	r24, r25
 93e:	09 f4       	brne	.+2      	; 0x942 <_Z17Serial0_availablev+0x10>
 940:	20 e0       	ldi	r18, 0x00	; 0
}
 942:	82 2f       	mov	r24, r18
 944:	08 95       	ret

00000946 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 946:	ef e4       	ldi	r30, 0x4F	; 79
 948:	f1 e0       	ldi	r31, 0x01	; 1
 94a:	13 82       	std	Z+3, r1	; 0x03
 94c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 94e:	88 ee       	ldi	r24, 0xE8	; 232
 950:	93 e0       	ldi	r25, 0x03	; 3
 952:	a0 e0       	ldi	r26, 0x00	; 0
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	84 83       	std	Z+4, r24	; 0x04
 958:	95 83       	std	Z+5, r25	; 0x05
 95a:	a6 83       	std	Z+6, r26	; 0x06
 95c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 95e:	8a e2       	ldi	r24, 0x2A	; 42
 960:	91 e0       	ldi	r25, 0x01	; 1
 962:	91 83       	std	Z+1, r25	; 0x01
 964:	80 83       	st	Z, r24
 966:	85 ec       	ldi	r24, 0xC5	; 197
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	95 87       	std	Z+13, r25	; 0x0d
 96c:	84 87       	std	Z+12, r24	; 0x0c
 96e:	84 ec       	ldi	r24, 0xC4	; 196
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	97 87       	std	Z+15, r25	; 0x0f
 974:	86 87       	std	Z+14, r24	; 0x0e
 976:	80 ec       	ldi	r24, 0xC0	; 192
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	91 8b       	std	Z+17, r25	; 0x11
 97c:	80 8b       	std	Z+16, r24	; 0x10
 97e:	81 ec       	ldi	r24, 0xC1	; 193
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	93 8b       	std	Z+19, r25	; 0x13
 984:	82 8b       	std	Z+18, r24	; 0x12
 986:	82 ec       	ldi	r24, 0xC2	; 194
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	95 8b       	std	Z+21, r25	; 0x15
 98c:	84 8b       	std	Z+20, r24	; 0x14
 98e:	86 ec       	ldi	r24, 0xC6	; 198
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	97 8b       	std	Z+23, r25	; 0x17
 994:	86 8b       	std	Z+22, r24	; 0x16
 996:	11 8e       	std	Z+25, r1	; 0x19
 998:	12 8e       	std	Z+26, r1	; 0x1a
 99a:	13 8e       	std	Z+27, r1	; 0x1b
 99c:	14 8e       	std	Z+28, r1	; 0x1c
 99e:	08 95       	ret

000009a0 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 9a0:	cf 92       	push	r12
 9a2:	df 92       	push	r13
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	6c 01       	movw	r12, r24
 9b2:	7a 01       	movw	r14, r20
 9b4:	8b 01       	movw	r16, r22
 9b6:	c0 e0       	ldi	r28, 0x00	; 0
 9b8:	d0 e0       	ldi	r29, 0x00	; 0
 9ba:	ce 15       	cp	r28, r14
 9bc:	df 05       	cpc	r29, r15
 9be:	81 f0       	breq	.+32     	; 0x9e0 <_ZN5Print5writeEPKhj+0x40>
 9c0:	d8 01       	movw	r26, r16
 9c2:	6d 91       	ld	r22, X+
 9c4:	8d 01       	movw	r16, r26
 9c6:	d6 01       	movw	r26, r12
 9c8:	ed 91       	ld	r30, X+
 9ca:	fc 91       	ld	r31, X
 9cc:	01 90       	ld	r0, Z+
 9ce:	f0 81       	ld	r31, Z
 9d0:	e0 2d       	mov	r30, r0
 9d2:	c6 01       	movw	r24, r12
 9d4:	09 95       	icall
 9d6:	89 2b       	or	r24, r25
 9d8:	11 f0       	breq	.+4      	; 0x9de <_ZN5Print5writeEPKhj+0x3e>
 9da:	21 96       	adiw	r28, 0x01	; 1
 9dc:	ee cf       	rjmp	.-36     	; 0x9ba <_ZN5Print5writeEPKhj+0x1a>
 9de:	7e 01       	movw	r14, r28
 9e0:	c7 01       	movw	r24, r14
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	ff 90       	pop	r15
 9ec:	ef 90       	pop	r14
 9ee:	df 90       	pop	r13
 9f0:	cf 90       	pop	r12
 9f2:	08 95       	ret

000009f4 <_ZN5Print5writeEPKc>:
 9f4:	61 15       	cp	r22, r1
 9f6:	71 05       	cpc	r23, r1
 9f8:	79 f0       	breq	.+30     	; 0xa18 <_ZN5Print5writeEPKc+0x24>
 9fa:	fb 01       	movw	r30, r22
 9fc:	01 90       	ld	r0, Z+
 9fe:	00 20       	and	r0, r0
 a00:	e9 f7       	brne	.-6      	; 0x9fc <_ZN5Print5writeEPKc+0x8>
 a02:	31 97       	sbiw	r30, 0x01	; 1
 a04:	af 01       	movw	r20, r30
 a06:	46 1b       	sub	r20, r22
 a08:	57 0b       	sbc	r21, r23
 a0a:	dc 01       	movw	r26, r24
 a0c:	ed 91       	ld	r30, X+
 a0e:	fc 91       	ld	r31, X
 a10:	02 80       	ldd	r0, Z+2	; 0x02
 a12:	f3 81       	ldd	r31, Z+3	; 0x03
 a14:	e0 2d       	mov	r30, r0
 a16:	09 94       	ijmp
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	08 95       	ret

00000a1e <_ZN5Print7printlnEv>:
 a1e:	66 e3       	ldi	r22, 0x36	; 54
 a20:	71 e0       	ldi	r23, 0x01	; 1
 a22:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <_ZN5Print5writeEPKc>

00000a26 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 a30:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN5Print5writeEPKc>
 a34:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 a36:	ce 01       	movw	r24, r28
 a38:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN5Print7printlnEv>
  return n;
}
 a3c:	80 0f       	add	r24, r16
 a3e:	91 1f       	adc	r25, r17
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <__divmodhi4>:
 a4a:	97 fb       	bst	r25, 7
 a4c:	07 2e       	mov	r0, r23
 a4e:	16 f4       	brtc	.+4      	; 0xa54 <__divmodhi4+0xa>
 a50:	00 94       	com	r0
 a52:	07 d0       	rcall	.+14     	; 0xa62 <__divmodhi4_neg1>
 a54:	77 fd       	sbrc	r23, 7
 a56:	09 d0       	rcall	.+18     	; 0xa6a <__divmodhi4_neg2>
 a58:	0e 94 5b 05 	call	0xab6	; 0xab6 <__udivmodhi4>
 a5c:	07 fc       	sbrc	r0, 7
 a5e:	05 d0       	rcall	.+10     	; 0xa6a <__divmodhi4_neg2>
 a60:	3e f4       	brtc	.+14     	; 0xa70 <__divmodhi4_exit>

00000a62 <__divmodhi4_neg1>:
 a62:	90 95       	com	r25
 a64:	81 95       	neg	r24
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	08 95       	ret

00000a6a <__divmodhi4_neg2>:
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a70 <__divmodhi4_exit>:
 a70:	08 95       	ret

00000a72 <__udivmodsi4>:
 a72:	a1 e2       	ldi	r26, 0x21	; 33
 a74:	1a 2e       	mov	r1, r26
 a76:	aa 1b       	sub	r26, r26
 a78:	bb 1b       	sub	r27, r27
 a7a:	fd 01       	movw	r30, r26
 a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__udivmodsi4_ep>

00000a7e <__udivmodsi4_loop>:
 a7e:	aa 1f       	adc	r26, r26
 a80:	bb 1f       	adc	r27, r27
 a82:	ee 1f       	adc	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	a2 17       	cp	r26, r18
 a88:	b3 07       	cpc	r27, r19
 a8a:	e4 07       	cpc	r30, r20
 a8c:	f5 07       	cpc	r31, r21
 a8e:	20 f0       	brcs	.+8      	; 0xa98 <__udivmodsi4_ep>
 a90:	a2 1b       	sub	r26, r18
 a92:	b3 0b       	sbc	r27, r19
 a94:	e4 0b       	sbc	r30, r20
 a96:	f5 0b       	sbc	r31, r21

00000a98 <__udivmodsi4_ep>:
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	1a 94       	dec	r1
 aa2:	69 f7       	brne	.-38     	; 0xa7e <__udivmodsi4_loop>
 aa4:	60 95       	com	r22
 aa6:	70 95       	com	r23
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	9b 01       	movw	r18, r22
 aae:	ac 01       	movw	r20, r24
 ab0:	bd 01       	movw	r22, r26
 ab2:	cf 01       	movw	r24, r30
 ab4:	08 95       	ret

00000ab6 <__udivmodhi4>:
 ab6:	aa 1b       	sub	r26, r26
 ab8:	bb 1b       	sub	r27, r27
 aba:	51 e1       	ldi	r21, 0x11	; 17
 abc:	07 c0       	rjmp	.+14     	; 0xacc <__udivmodhi4_ep>

00000abe <__udivmodhi4_loop>:
 abe:	aa 1f       	adc	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	a6 17       	cp	r26, r22
 ac4:	b7 07       	cpc	r27, r23
 ac6:	10 f0       	brcs	.+4      	; 0xacc <__udivmodhi4_ep>
 ac8:	a6 1b       	sub	r26, r22
 aca:	b7 0b       	sbc	r27, r23

00000acc <__udivmodhi4_ep>:
 acc:	88 1f       	adc	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	5a 95       	dec	r21
 ad2:	a9 f7       	brne	.-22     	; 0xabe <__udivmodhi4_loop>
 ad4:	80 95       	com	r24
 ad6:	90 95       	com	r25
 ad8:	bc 01       	movw	r22, r24
 ada:	cd 01       	movw	r24, r26
 adc:	08 95       	ret

00000ade <__tablejump2__>:
 ade:	ee 0f       	add	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	05 90       	lpm	r0, Z+
 ae4:	f4 91       	lpm	r31, Z
 ae6:	e0 2d       	mov	r30, r0
 ae8:	09 94       	ijmp

00000aea <malloc>:
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	91 05       	cpc	r25, r1
 af6:	10 f4       	brcc	.+4      	; 0xafc <malloc+0x12>
 af8:	82 e0       	ldi	r24, 0x02	; 2
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <__flp>
 b00:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <__flp+0x1>
 b04:	20 e0       	ldi	r18, 0x00	; 0
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	a0 e0       	ldi	r26, 0x00	; 0
 b0a:	b0 e0       	ldi	r27, 0x00	; 0
 b0c:	30 97       	sbiw	r30, 0x00	; 0
 b0e:	19 f1       	breq	.+70     	; 0xb56 <malloc+0x6c>
 b10:	40 81       	ld	r20, Z
 b12:	51 81       	ldd	r21, Z+1	; 0x01
 b14:	02 81       	ldd	r16, Z+2	; 0x02
 b16:	13 81       	ldd	r17, Z+3	; 0x03
 b18:	48 17       	cp	r20, r24
 b1a:	59 07       	cpc	r21, r25
 b1c:	c8 f0       	brcs	.+50     	; 0xb50 <malloc+0x66>
 b1e:	84 17       	cp	r24, r20
 b20:	95 07       	cpc	r25, r21
 b22:	69 f4       	brne	.+26     	; 0xb3e <malloc+0x54>
 b24:	10 97       	sbiw	r26, 0x00	; 0
 b26:	31 f0       	breq	.+12     	; 0xb34 <malloc+0x4a>
 b28:	12 96       	adiw	r26, 0x02	; 2
 b2a:	0c 93       	st	X, r16
 b2c:	12 97       	sbiw	r26, 0x02	; 2
 b2e:	13 96       	adiw	r26, 0x03	; 3
 b30:	1c 93       	st	X, r17
 b32:	27 c0       	rjmp	.+78     	; 0xb82 <malloc+0x98>
 b34:	00 93 f4 01 	sts	0x01F4, r16	; 0x8001f4 <__flp>
 b38:	10 93 f5 01 	sts	0x01F5, r17	; 0x8001f5 <__flp+0x1>
 b3c:	22 c0       	rjmp	.+68     	; 0xb82 <malloc+0x98>
 b3e:	21 15       	cp	r18, r1
 b40:	31 05       	cpc	r19, r1
 b42:	19 f0       	breq	.+6      	; 0xb4a <malloc+0x60>
 b44:	42 17       	cp	r20, r18
 b46:	53 07       	cpc	r21, r19
 b48:	18 f4       	brcc	.+6      	; 0xb50 <malloc+0x66>
 b4a:	9a 01       	movw	r18, r20
 b4c:	bd 01       	movw	r22, r26
 b4e:	ef 01       	movw	r28, r30
 b50:	df 01       	movw	r26, r30
 b52:	f8 01       	movw	r30, r16
 b54:	db cf       	rjmp	.-74     	; 0xb0c <malloc+0x22>
 b56:	21 15       	cp	r18, r1
 b58:	31 05       	cpc	r19, r1
 b5a:	f9 f0       	breq	.+62     	; 0xb9a <malloc+0xb0>
 b5c:	28 1b       	sub	r18, r24
 b5e:	39 0b       	sbc	r19, r25
 b60:	24 30       	cpi	r18, 0x04	; 4
 b62:	31 05       	cpc	r19, r1
 b64:	80 f4       	brcc	.+32     	; 0xb86 <malloc+0x9c>
 b66:	8a 81       	ldd	r24, Y+2	; 0x02
 b68:	9b 81       	ldd	r25, Y+3	; 0x03
 b6a:	61 15       	cp	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	21 f0       	breq	.+8      	; 0xb78 <malloc+0x8e>
 b70:	fb 01       	movw	r30, r22
 b72:	93 83       	std	Z+3, r25	; 0x03
 b74:	82 83       	std	Z+2, r24	; 0x02
 b76:	04 c0       	rjmp	.+8      	; 0xb80 <malloc+0x96>
 b78:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <__flp+0x1>
 b7c:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__flp>
 b80:	fe 01       	movw	r30, r28
 b82:	32 96       	adiw	r30, 0x02	; 2
 b84:	44 c0       	rjmp	.+136    	; 0xc0e <malloc+0x124>
 b86:	fe 01       	movw	r30, r28
 b88:	e2 0f       	add	r30, r18
 b8a:	f3 1f       	adc	r31, r19
 b8c:	81 93       	st	Z+, r24
 b8e:	91 93       	st	Z+, r25
 b90:	22 50       	subi	r18, 0x02	; 2
 b92:	31 09       	sbc	r19, r1
 b94:	39 83       	std	Y+1, r19	; 0x01
 b96:	28 83       	st	Y, r18
 b98:	3a c0       	rjmp	.+116    	; 0xc0e <malloc+0x124>
 b9a:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <__brkval>
 b9e:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <__brkval+0x1>
 ba2:	23 2b       	or	r18, r19
 ba4:	41 f4       	brne	.+16     	; 0xbb6 <malloc+0xcc>
 ba6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 baa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 bae:	30 93 f3 01 	sts	0x01F3, r19	; 0x8001f3 <__brkval+0x1>
 bb2:	20 93 f2 01 	sts	0x01F2, r18	; 0x8001f2 <__brkval>
 bb6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 bba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 bbe:	21 15       	cp	r18, r1
 bc0:	31 05       	cpc	r19, r1
 bc2:	41 f4       	brne	.+16     	; 0xbd4 <malloc+0xea>
 bc4:	2d b7       	in	r18, 0x3d	; 61
 bc6:	3e b7       	in	r19, 0x3e	; 62
 bc8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 bcc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 bd0:	24 1b       	sub	r18, r20
 bd2:	35 0b       	sbc	r19, r21
 bd4:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <__brkval>
 bd8:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <__brkval+0x1>
 bdc:	e2 17       	cp	r30, r18
 bde:	f3 07       	cpc	r31, r19
 be0:	a0 f4       	brcc	.+40     	; 0xc0a <malloc+0x120>
 be2:	2e 1b       	sub	r18, r30
 be4:	3f 0b       	sbc	r19, r31
 be6:	28 17       	cp	r18, r24
 be8:	39 07       	cpc	r19, r25
 bea:	78 f0       	brcs	.+30     	; 0xc0a <malloc+0x120>
 bec:	ac 01       	movw	r20, r24
 bee:	4e 5f       	subi	r20, 0xFE	; 254
 bf0:	5f 4f       	sbci	r21, 0xFF	; 255
 bf2:	24 17       	cp	r18, r20
 bf4:	35 07       	cpc	r19, r21
 bf6:	48 f0       	brcs	.+18     	; 0xc0a <malloc+0x120>
 bf8:	4e 0f       	add	r20, r30
 bfa:	5f 1f       	adc	r21, r31
 bfc:	50 93 f3 01 	sts	0x01F3, r21	; 0x8001f3 <__brkval+0x1>
 c00:	40 93 f2 01 	sts	0x01F2, r20	; 0x8001f2 <__brkval>
 c04:	81 93       	st	Z+, r24
 c06:	91 93       	st	Z+, r25
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <malloc+0x124>
 c0a:	e0 e0       	ldi	r30, 0x00	; 0
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	cf 01       	movw	r24, r30
 c10:	df 91       	pop	r29
 c12:	cf 91       	pop	r28
 c14:	1f 91       	pop	r17
 c16:	0f 91       	pop	r16
 c18:	08 95       	ret

00000c1a <free>:
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	09 f4       	brne	.+2      	; 0xc24 <free+0xa>
 c22:	81 c0       	rjmp	.+258    	; 0xd26 <free+0x10c>
 c24:	fc 01       	movw	r30, r24
 c26:	32 97       	sbiw	r30, 0x02	; 2
 c28:	13 82       	std	Z+3, r1	; 0x03
 c2a:	12 82       	std	Z+2, r1	; 0x02
 c2c:	a0 91 f4 01 	lds	r26, 0x01F4	; 0x8001f4 <__flp>
 c30:	b0 91 f5 01 	lds	r27, 0x01F5	; 0x8001f5 <__flp+0x1>
 c34:	10 97       	sbiw	r26, 0x00	; 0
 c36:	81 f4       	brne	.+32     	; 0xc58 <free+0x3e>
 c38:	20 81       	ld	r18, Z
 c3a:	31 81       	ldd	r19, Z+1	; 0x01
 c3c:	82 0f       	add	r24, r18
 c3e:	93 1f       	adc	r25, r19
 c40:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <__brkval>
 c44:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <__brkval+0x1>
 c48:	28 17       	cp	r18, r24
 c4a:	39 07       	cpc	r19, r25
 c4c:	51 f5       	brne	.+84     	; 0xca2 <free+0x88>
 c4e:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <__brkval+0x1>
 c52:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <__brkval>
 c56:	67 c0       	rjmp	.+206    	; 0xd26 <free+0x10c>
 c58:	ed 01       	movw	r28, r26
 c5a:	20 e0       	ldi	r18, 0x00	; 0
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	ce 17       	cp	r28, r30
 c60:	df 07       	cpc	r29, r31
 c62:	40 f4       	brcc	.+16     	; 0xc74 <free+0x5a>
 c64:	4a 81       	ldd	r20, Y+2	; 0x02
 c66:	5b 81       	ldd	r21, Y+3	; 0x03
 c68:	9e 01       	movw	r18, r28
 c6a:	41 15       	cp	r20, r1
 c6c:	51 05       	cpc	r21, r1
 c6e:	f1 f0       	breq	.+60     	; 0xcac <free+0x92>
 c70:	ea 01       	movw	r28, r20
 c72:	f5 cf       	rjmp	.-22     	; 0xc5e <free+0x44>
 c74:	d3 83       	std	Z+3, r29	; 0x03
 c76:	c2 83       	std	Z+2, r28	; 0x02
 c78:	40 81       	ld	r20, Z
 c7a:	51 81       	ldd	r21, Z+1	; 0x01
 c7c:	84 0f       	add	r24, r20
 c7e:	95 1f       	adc	r25, r21
 c80:	c8 17       	cp	r28, r24
 c82:	d9 07       	cpc	r29, r25
 c84:	59 f4       	brne	.+22     	; 0xc9c <free+0x82>
 c86:	88 81       	ld	r24, Y
 c88:	99 81       	ldd	r25, Y+1	; 0x01
 c8a:	84 0f       	add	r24, r20
 c8c:	95 1f       	adc	r25, r21
 c8e:	02 96       	adiw	r24, 0x02	; 2
 c90:	91 83       	std	Z+1, r25	; 0x01
 c92:	80 83       	st	Z, r24
 c94:	8a 81       	ldd	r24, Y+2	; 0x02
 c96:	9b 81       	ldd	r25, Y+3	; 0x03
 c98:	93 83       	std	Z+3, r25	; 0x03
 c9a:	82 83       	std	Z+2, r24	; 0x02
 c9c:	21 15       	cp	r18, r1
 c9e:	31 05       	cpc	r19, r1
 ca0:	29 f4       	brne	.+10     	; 0xcac <free+0x92>
 ca2:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <__flp+0x1>
 ca6:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <__flp>
 caa:	3d c0       	rjmp	.+122    	; 0xd26 <free+0x10c>
 cac:	e9 01       	movw	r28, r18
 cae:	fb 83       	std	Y+3, r31	; 0x03
 cb0:	ea 83       	std	Y+2, r30	; 0x02
 cb2:	49 91       	ld	r20, Y+
 cb4:	59 91       	ld	r21, Y+
 cb6:	c4 0f       	add	r28, r20
 cb8:	d5 1f       	adc	r29, r21
 cba:	ec 17       	cp	r30, r28
 cbc:	fd 07       	cpc	r31, r29
 cbe:	61 f4       	brne	.+24     	; 0xcd8 <free+0xbe>
 cc0:	80 81       	ld	r24, Z
 cc2:	91 81       	ldd	r25, Z+1	; 0x01
 cc4:	84 0f       	add	r24, r20
 cc6:	95 1f       	adc	r25, r21
 cc8:	02 96       	adiw	r24, 0x02	; 2
 cca:	e9 01       	movw	r28, r18
 ccc:	99 83       	std	Y+1, r25	; 0x01
 cce:	88 83       	st	Y, r24
 cd0:	82 81       	ldd	r24, Z+2	; 0x02
 cd2:	93 81       	ldd	r25, Z+3	; 0x03
 cd4:	9b 83       	std	Y+3, r25	; 0x03
 cd6:	8a 83       	std	Y+2, r24	; 0x02
 cd8:	e0 e0       	ldi	r30, 0x00	; 0
 cda:	f0 e0       	ldi	r31, 0x00	; 0
 cdc:	12 96       	adiw	r26, 0x02	; 2
 cde:	8d 91       	ld	r24, X+
 ce0:	9c 91       	ld	r25, X
 ce2:	13 97       	sbiw	r26, 0x03	; 3
 ce4:	00 97       	sbiw	r24, 0x00	; 0
 ce6:	19 f0       	breq	.+6      	; 0xcee <free+0xd4>
 ce8:	fd 01       	movw	r30, r26
 cea:	dc 01       	movw	r26, r24
 cec:	f7 cf       	rjmp	.-18     	; 0xcdc <free+0xc2>
 cee:	8d 91       	ld	r24, X+
 cf0:	9c 91       	ld	r25, X
 cf2:	11 97       	sbiw	r26, 0x01	; 1
 cf4:	9d 01       	movw	r18, r26
 cf6:	2e 5f       	subi	r18, 0xFE	; 254
 cf8:	3f 4f       	sbci	r19, 0xFF	; 255
 cfa:	82 0f       	add	r24, r18
 cfc:	93 1f       	adc	r25, r19
 cfe:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <__brkval>
 d02:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <__brkval+0x1>
 d06:	28 17       	cp	r18, r24
 d08:	39 07       	cpc	r19, r25
 d0a:	69 f4       	brne	.+26     	; 0xd26 <free+0x10c>
 d0c:	30 97       	sbiw	r30, 0x00	; 0
 d0e:	29 f4       	brne	.+10     	; 0xd1a <free+0x100>
 d10:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__flp+0x1>
 d14:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__flp>
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <free+0x104>
 d1a:	13 82       	std	Z+3, r1	; 0x03
 d1c:	12 82       	std	Z+2, r1	; 0x02
 d1e:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <__brkval+0x1>
 d22:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <__brkval>
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	08 95       	ret

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
