
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  000029da  00002a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  008001f0  008001f0  00002b5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000142ff  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033b7  00000000  00000000  00017617  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040d0  00000000  00000000  0001a9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014f4  00000000  00000000  0001eaa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d02  00000000  00000000  0001ff94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e59  00000000  00000000  00023c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  0002aaef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__dtors_end>
       4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_3>
      10:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_3>
      14:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_3>
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_18>
      4c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	0f 03       	fmul	r16, r23
      6a:	16 03       	mulsu	r17, r22
      6c:	24 03       	mulsu	r18, r20
      6e:	03 03       	mulsu	r16, r19
      70:	24 03       	mulsu	r18, r20
      72:	08 03       	fmul	r16, r16
      74:	1d 03       	fmul	r17, r21
      76:	36 03       	mulsu	r19, r22
      78:	24 03       	mulsu	r18, r20
      7a:	24 03       	mulsu	r18, r20
      7c:	24 03       	mulsu	r18, r20
      7e:	24 03       	mulsu	r18, r20
      80:	24 03       	mulsu	r18, r20
      82:	24 03       	mulsu	r18, r20
      84:	24 03       	mulsu	r18, r20
      86:	24 03       	mulsu	r18, r20
      88:	28 03       	fmul	r18, r16
      8a:	24 03       	mulsu	r18, r20
      8c:	24 03       	mulsu	r18, r20
      8e:	24 03       	mulsu	r18, r20
      90:	24 03       	mulsu	r18, r20
      92:	24 03       	mulsu	r18, r20
      94:	a6 0b       	sbc	r26, r22
      96:	ad 0b       	sbc	r26, r29
      98:	b4 0b       	sbc	r27, r20
      9a:	bb 0b       	sbc	r27, r27
      9c:	c2 0b       	sbc	r28, r18
      9e:	d9 0b       	sbc	r29, r25
      a0:	c9 0b       	sbc	r28, r25
      a2:	d9 0b       	sbc	r29, r25
      a4:	d0 0b       	sbc	r29, r16
      a6:	4a 0c       	add	r4, r10
      a8:	50 0c       	add	r5, r0
      aa:	56 0c       	add	r5, r6
      ac:	5c 0c       	add	r5, r12
      ae:	62 0c       	add	r6, r2
      b0:	68 0c       	add	r6, r8
      b2:	6e 0c       	add	r6, r14

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_input_PGM>:
      f0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000fa <port_to_output_PGM>:
      fa:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000104 <port_to_mode_PGM>:
     104:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010e <__ctors_start>:
     10e:	0d 01       	movw	r0, r26
     110:	13 06       	cpc	r1, r19

00000112 <__ctors_end>:
     112:	3a 01       	movw	r6, r20

00000114 <__dtors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea ed       	ldi	r30, 0xDA	; 218
     128:	f9 e2       	ldi	r31, 0x29	; 41
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	a0 3f       	cpi	r26, 0xF0	; 240
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	22 e0       	ldi	r18, 0x02	; 2
     138:	a0 ef       	ldi	r26, 0xF0	; 240
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	a4 3f       	cpi	r26, 0xF4	; 244
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	c9 e8       	ldi	r28, 0x89	; 137
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	04 c0       	rjmp	.+8      	; 0x156 <__do_global_ctors+0x10>
     14e:	21 97       	sbiw	r28, 0x01	; 1
     150:	fe 01       	movw	r30, r28
     152:	0e 94 8b 13 	call	0x2716	; 0x2716 <__tablejump2__>
     156:	c7 38       	cpi	r28, 0x87	; 135
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <__do_global_ctors+0x8>
     15c:	0e 94 41 06 	call	0xc82	; 0xc82 <main>
     160:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__do_global_dtors>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <setup>:
LedBlinker led(PIN_D4);
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
Mp3Player *mp3;
MotorizedPole pole(MOTOR_IN1, MOTOR_IN2, MOTOR_IN3, MOTOR_IN4, 1000);

void setup() {
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     16c:	26 e0       	ldi	r18, 0x06	; 6
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	55 e2       	ldi	r21, 0x25	; 37
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	86 e0       	ldi	r24, 0x06	; 6
     178:	92 e0       	ldi	r25, 0x02	; 2
     17a:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN14HardwareSerial5beginEmh>
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
     17e:	60 e1       	ldi	r22, 0x10	; 16
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	86 e0       	ldi	r24, 0x06	; 6
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);
     18a:	8c e2       	ldi	r24, 0x2C	; 44
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 50 06 	call	0xca0	; 0xca0 <_Znwj>
     192:	ec 01       	movw	r28, r24
     194:	4b e0       	ldi	r20, 0x0B	; 11
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	6a e0       	ldi	r22, 0x0A	; 10
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN9Mp3PlayerC1Eii>
     1a0:	d0 93 ff 01 	sts	0x01FF, r29	; 0x8001ff <mp3+0x1>
     1a4:	c0 93 fe 01 	sts	0x01FE, r28	; 0x8001fe <mp3>
	delay(1000); //Wait 1 second to mp3 player init itself
     1a8:	68 ee       	ldi	r22, 0xE8	; 232
     1aa:	73 e0       	ldi	r23, 0x03	; 3
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>

	led.TurnOff();
     1b4:	84 e0       	ldi	r24, 0x04	; 4
     1b6:	92 e0       	ldi	r25, 0x02	; 2
}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX);
	delay(1000); //Wait 1 second to mp3 player init itself

	led.TurnOff();
     1bc:	0c 94 4b 01 	jmp	0x296	; 0x296 <_ZN10LedBlinker7TurnOffEv>

000001c0 <loop>:
}

void loop() {
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
	#ifdef DEBUG
		Serial.println("Distance detector on");
     1c4:	60 e3       	ldi	r22, 0x30	; 48
     1c6:	71 e0       	ldi	r23, 0x01	; 1
     1c8:	86 e0       	ldi	r24, 0x06	; 6
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN12LengthSensor7MeasureEv>
     1d8:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		Serial.println(distance);
     1da:	4a e0       	ldi	r20, 0x0A	; 10
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	bc 01       	movw	r22, r24
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN5Print7printlnEii>
	#endif
		
	if(distance > 0 && distance < 50)
     1e8:	21 97       	sbiw	r28, 0x01	; 1
     1ea:	e1 97       	sbiw	r28, 0x31	; 49
     1ec:	80 f4       	brcc	.+32     	; 0x20e <loop+0x4e>
	{
		led.TurnOn();
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	92 e0       	ldi	r25, 0x02	; 2
     1f2:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN10LedBlinker6TurnOnEv>
		mp3->Play();
     1f6:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <mp3>
     1fa:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <mp3+0x1>
     1fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN9Mp3Player4PlayEv>
		delay(2000);
     202:	60 ed       	ldi	r22, 0xD0	; 208
     204:	77 e0       	ldi	r23, 0x07	; 7
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
	}
	
	led.TurnOff();
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	92 e0       	ldi	r25, 0x02	; 2
}
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
		led.TurnOn();
		mp3->Play();
		delay(2000);
	}
	
	led.TurnOff();
     216:	0c 94 4b 01 	jmp	0x296	; 0x296 <_ZN10LedBlinker7TurnOffEv>

0000021a <_GLOBAL__sub_I_led>:
}
     21a:	cf 92       	push	r12
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
#define MOTOR_IN3 9
#define MOTOR_IN4 3

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     226:	64 e0       	ldi	r22, 0x04	; 4
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	84 e0       	ldi	r24, 0x04	; 4
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
     232:	46 e0       	ldi	r20, 0x06	; 6
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	67 e0       	ldi	r22, 0x07	; 7
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN12LengthSensorC1Eii>
Mp3Player *mp3;
MotorizedPole pole(MOTOR_IN1, MOTOR_IN2, MOTOR_IN3, MOTOR_IN4, 1000);
     242:	c1 2c       	mov	r12, r1
     244:	d1 2c       	mov	r13, r1
     246:	8a e7       	ldi	r24, 0x7A	; 122
     248:	e8 2e       	mov	r14, r24
     24a:	84 e4       	ldi	r24, 0x44	; 68
     24c:	f8 2e       	mov	r15, r24
     24e:	03 e0       	ldi	r16, 0x03	; 3
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	29 e0       	ldi	r18, 0x09	; 9
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 e0       	ldi	r20, 0x08	; 8
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	65 e0       	ldi	r22, 0x05	; 5
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	80 ef       	ldi	r24, 0xF0	; 240
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN13MotorizedPoleC1Eiiiid>
		mp3->Play();
		delay(2000);
	}
	
	led.TurnOff();
}
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	df 90       	pop	r13
     270:	cf 90       	pop	r12
     272:	08 95       	ret

00000274 <_GLOBAL__sub_D_led>:
#define MOTOR_IN3 9
#define MOTOR_IN4 3

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	0c 94 45 01 	jmp	0x28a	; 0x28a <_ZN10LedBlinkerD1Ev>

0000027c <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
     27c:	fc 01       	movw	r30, r24
     27e:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
     280:	60 83       	st	Z, r22
     282:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0c 94 9d 08 	jmp	0x113a	; 0x113a <pinMode>

0000028a <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
     28a:	08 95       	ret

0000028c <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

00000296 <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	fc 01       	movw	r30, r24
     29a:	80 81       	ld	r24, Z
     29c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

000002a0 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
     2a6:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
     2a8:	68 83       	st	Y, r22
     2aa:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
     2ac:	5b 83       	std	Y+3, r21	; 0x03
     2ae:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
	pinMode(m_trigPin, OUTPUT);
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
     2be:	0c 94 9d 08 	jmp	0x113a	; 0x113a <pinMode>

000002c2 <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
	delayMicroseconds(10);
     2d0:	8a e0       	ldi	r24, 0x0A	; 10
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 2e 08 	call	0x105c	; 0x105c <delayMicroseconds>
	digitalWrite(m_trigPin, LOW);
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(m_trigPin, LOW);
     2e0:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

000002e4 <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
	  Ping();
     2f2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     2f6:	88 81       	ld	r24, Y
     2f8:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	29 f0       	breq	.+10     	; 0x30a <_ZN12LengthSensor7MeasureEv+0x26>
	  {
		  delayMicroseconds(1);
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 2e 08 	call	0x105c	; 0x105c <delayMicroseconds>
int LengthSensor::Measure()
{	
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     308:	f6 cf       	rjmp	.-20     	; 0x2f6 <_ZN12LengthSensor7MeasureEv+0x12>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
     30a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <micros>
     30e:	6b 01       	movw	r12, r22
     310:	7c 01       	movw	r14, r24
	  while(digitalRead(m_echoPin) != LOW) {
     312:	88 81       	ld	r24, Y
     314:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
     318:	89 2b       	or	r24, r25
     31a:	29 f0       	breq	.+10     	; 0x326 <_ZN12LengthSensor7MeasureEv+0x42>
		  delayMicroseconds(1);
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 2e 08 	call	0x105c	; 0x105c <delayMicroseconds>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
	  while(digitalRead(m_echoPin) != LOW) {
     324:	f6 cf       	rjmp	.-20     	; 0x312 <_ZN12LengthSensor7MeasureEv+0x2e>
		  delayMicroseconds(1);
	  }

	  time = micros() - time;
     326:	0e 94 cd 07 	call	0xf9a	; 0xf9a <micros>
     32a:	9b 01       	movw	r18, r22
     32c:	ac 01       	movw	r20, r24
     32e:	2c 19       	sub	r18, r12
     330:	3d 09       	sbc	r19, r13
     332:	4e 09       	sbc	r20, r14
     334:	5f 09       	sbc	r21, r15
     336:	69 01       	movw	r12, r18
     338:	7a 01       	movw	r14, r20
	  Serial.println(time);	  
     33a:	2a e0       	ldi	r18, 0x0A	; 10
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	b7 01       	movw	r22, r14
     340:	a6 01       	movw	r20, r12
     342:	86 e0       	ldi	r24, 0x06	; 6
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN5Print7printlnEmi>
	  return (time * 34) / 2000;
     34a:	a2 e2       	ldi	r26, 0x22	; 34
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	a7 01       	movw	r20, r14
     350:	96 01       	movw	r18, r12
     352:	0e 94 91 13 	call	0x2722	; 0x2722 <__muluhisi3>
     356:	20 ed       	ldi	r18, 0xD0	; 208
     358:	37 e0       	ldi	r19, 0x07	; 7
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
}
     362:	c9 01       	movw	r24, r18
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	08 95       	ret

00000372 <_ZN13MotorizedPoleC1Eiiiid>:
#include <Arduino.h>
#include <MotorizedPole.h>

#define HALFSTEP 8

MotorizedPole::MotorizedPole(int in1, int in2, int in3, int in4, double distance)
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
{
	m_in1 = in1;
     388:	79 83       	std	Y+1, r23	; 0x01
     38a:	68 83       	st	Y, r22
	m_in2 = in2;
     38c:	5b 83       	std	Y+3, r21	; 0x03
     38e:	4a 83       	std	Y+2, r20	; 0x02
	m_in3 = in3;
     390:	3d 83       	std	Y+5, r19	; 0x05
     392:	2c 83       	std	Y+4, r18	; 0x04
	m_in4 = in4;
     394:	1f 83       	std	Y+7, r17	; 0x07
     396:	0e 83       	std	Y+6, r16	; 0x06
	m_distance = distance;
     398:	c8 86       	std	Y+8, r12	; 0x08
     39a:	d9 86       	std	Y+9, r13	; 0x09
     39c:	ea 86       	std	Y+10, r14	; 0x0a
     39e:	fb 86       	std	Y+11, r15	; 0x0b
	
	m_stepper = new AccelStepper(HALFSTEP, m_in1, m_in2, m_in3, m_in4);
     3a0:	84 e4       	ldi	r24, 0x44	; 68
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 50 06 	call	0xca0	; 0xca0 <_Znwj>
     3a8:	5c 01       	movw	r10, r24
     3aa:	cc 24       	eor	r12, r12
     3ac:	c3 94       	inc	r12
     3ae:	ee 80       	ldd	r14, Y+6	; 0x06
     3b0:	0c 81       	ldd	r16, Y+4	; 0x04
     3b2:	2a 81       	ldd	r18, Y+2	; 0x02
     3b4:	48 81       	ld	r20, Y
     3b6:	68 e0       	ldi	r22, 0x08	; 8
     3b8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN12AccelStepperC1Ehhhhhb>
     3bc:	bd 86       	std	Y+13, r11	; 0x0d
     3be:	ac 86       	std	Y+12, r10	; 0x0c
	m_stepper->setMaxSpeed(1000.0);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	6a e7       	ldi	r22, 0x7A	; 122
     3c6:	74 e4       	ldi	r23, 0x44	; 68
     3c8:	c5 01       	movw	r24, r10
     3ca:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN12AccelStepper11setMaxSpeedEf>
	m_stepper->setAcceleration(100.0);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	68 ec       	ldi	r22, 0xC8	; 200
     3d4:	72 e4       	ldi	r23, 0x42	; 66
     3d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     3da:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN12AccelStepper15setAccelerationEf>
	m_stepper->setSpeed(200);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	68 e4       	ldi	r22, 0x48	; 72
     3e4:	73 e4       	ldi	r23, 0x43	; 67
     3e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3e8:	9d 85       	ldd	r25, Y+13	; 0x0d
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
	m_distance = distance;
	
	m_stepper = new AccelStepper(HALFSTEP, m_in1, m_in2, m_in3, m_in4);
	m_stepper->setMaxSpeed(1000.0);
	m_stepper->setAcceleration(100.0);
	m_stepper->setSpeed(200);
     3fe:	0c 94 84 10 	jmp	0x2108	; 0x2108 <_ZN12AccelStepper8setSpeedEf>

00000402 <_ZN9Mp3Player9VolumeMaxEv>:
}

void Mp3Player::VolumeMax()
{
	//Sets max volume
	m_mp3Player.volume(30);
     402:	6e e1       	ldi	r22, 0x1E	; 30
     404:	06 96       	adiw	r24, 0x06	; 6
     406:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_ZN19DFRobotDFPlayerMini6volumeEh>

0000040a <_ZN9Mp3PlayerC1Eii>:

#include <Arduino.h>
#include <Mp3Player.h>


Mp3Player::Mp3Player(int rxPin, int txPin)
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	8c 01       	movw	r16, r24
     41a:	0a 5f       	subi	r16, 0xFA	; 250
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8c 87       	std	Y+12, r24	; 0x0c
     428:	9d 87       	std	Y+13, r25	; 0x0d
     42a:	ae 87       	std	Y+14, r26	; 0x0e
     42c:	bf 87       	std	Y+15, r27	; 0x0f
     42e:	8a e0       	ldi	r24, 0x0A	; 10
     430:	e6 e0       	ldi	r30, 0x06	; 6
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	de 01       	movw	r26, r28
     436:	5a 96       	adiw	r26, 0x1a	; 26
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	8a 95       	dec	r24
     43e:	e1 f7       	brne	.-8      	; 0x438 <_ZN9Mp3PlayerC1Eii+0x2e>
     440:	1c a2       	std	Y+36, r1	; 0x24
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	8d a3       	std	Y+37, r24	; 0x25
     446:	1a a6       	std	Y+42, r1	; 0x2a
     448:	1b a6       	std	Y+43, r1	; 0x2b
{
	m_rxPin = rxPin;
     44a:	79 83       	std	Y+1, r23	; 0x01
     44c:	68 83       	st	Y, r22
	m_txPin = txPin;
     44e:	5b 83       	std	Y+3, r21	; 0x03
     450:	4a 83       	std	Y+2, r20	; 0x02
	m_softwareSerial = new SoftwareSerial(m_rxPin, m_txPin);
     452:	8f e1       	ldi	r24, 0x1F	; 31
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 50 06 	call	0xca0	; 0xca0 <_Znwj>
     45a:	7c 01       	movw	r14, r24
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	4a 81       	ldd	r20, Y+2	; 0x02
     460:	68 81       	ld	r22, Y
     462:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN14SoftwareSerialC1Ehhb>
     466:	fd 82       	std	Y+5, r15	; 0x05
     468:	ec 82       	std	Y+4, r14	; 0x04
	m_softwareSerial->begin(9600);
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	55 e2       	ldi	r21, 0x25	; 37
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	c7 01       	movw	r24, r14
     474:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN14SoftwareSerial5beginEl>
	if(!m_mp3Player.begin(*m_softwareSerial))
     478:	6c 81       	ldd	r22, Y+4	; 0x04
     47a:	7d 81       	ldd	r23, Y+5	; 0x05
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	c8 01       	movw	r24, r16
     480:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
     484:	81 11       	cpse	r24, r1
     486:	13 c0       	rjmp	.+38     	; 0x4ae <_ZN9Mp3PlayerC1Eii+0xa4>
	{
		#ifdef DEBUG
			Serial.println("Unable to begin:");
     488:	65 e4       	ldi	r22, 0x45	; 69
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
			Serial.println("1. Please recheck the connection!");
     494:	66 e5       	ldi	r22, 0x56	; 86
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
			Serial.println("2. Please insert SD card!");
     4a0:	68 e7       	ldi	r22, 0x78	; 120
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
     4ac:	ff cf       	rjmp	.-2      	; 0x4ac <_ZN9Mp3PlayerC1Eii+0xa2>
		//Hangs here if something goes wrong
		while(true);
	}

	#ifdef DEBUG
		Serial.println("MP3 player is online");
     4ae:	62 e9       	ldi	r22, 0x92	; 146
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN5Print7printlnEPKc>
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	c8 01       	movw	r24, r16
     4be:	0e 94 32 04 	call	0x864	; 0x864 <_ZN19DFRobotDFPlayerMini2EQEh>
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	c8 01       	movw	r24, r16
     4c6:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN19DFRobotDFPlayerMini12outputDeviceEh>

	VolumeMax();
     4ca:	ce 01       	movw	r24, r28
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
		Serial.println("MP3 player is online");
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);

	VolumeMax();
     4d8:	0c 94 01 02 	jmp	0x402	; 0x402 <_ZN9Mp3Player9VolumeMaxEv>

000004dc <_ZN9Mp3Player4PlayEv>:
	m_mp3Player.volume(30);
}

void Mp3Player::Play()
{
	m_mp3Player.playMp3Folder(2);
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	06 96       	adiw	r24, 0x06	; 6
     4e2:	0c 94 82 04 	jmp	0x904	; 0x904 <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>

000004e6 <__fixsfsi>:
     4e6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fixunssfsi>
     4ea:	68 94       	set
     4ec:	b1 11       	cpse	r27, r1
     4ee:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
     4f2:	08 95       	ret

000004f4 <__fixunssfsi>:
     4f4:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_splitA>
     4f8:	88 f0       	brcs	.+34     	; 0x51c <__fixunssfsi+0x28>
     4fa:	9f 57       	subi	r25, 0x7F	; 127
     4fc:	98 f0       	brcs	.+38     	; 0x524 <__fixunssfsi+0x30>
     4fe:	b9 2f       	mov	r27, r25
     500:	99 27       	eor	r25, r25
     502:	b7 51       	subi	r27, 0x17	; 23
     504:	b0 f0       	brcs	.+44     	; 0x532 <__fixunssfsi+0x3e>
     506:	e1 f0       	breq	.+56     	; 0x540 <__fixunssfsi+0x4c>
     508:	66 0f       	add	r22, r22
     50a:	77 1f       	adc	r23, r23
     50c:	88 1f       	adc	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	1a f0       	brmi	.+6      	; 0x518 <__fixunssfsi+0x24>
     512:	ba 95       	dec	r27
     514:	c9 f7       	brne	.-14     	; 0x508 <__fixunssfsi+0x14>
     516:	14 c0       	rjmp	.+40     	; 0x540 <__fixunssfsi+0x4c>
     518:	b1 30       	cpi	r27, 0x01	; 1
     51a:	91 f0       	breq	.+36     	; 0x540 <__fixunssfsi+0x4c>
     51c:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_zero>
     520:	b1 e0       	ldi	r27, 0x01	; 1
     522:	08 95       	ret
     524:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_zero>
     528:	67 2f       	mov	r22, r23
     52a:	78 2f       	mov	r23, r24
     52c:	88 27       	eor	r24, r24
     52e:	b8 5f       	subi	r27, 0xF8	; 248
     530:	39 f0       	breq	.+14     	; 0x540 <__fixunssfsi+0x4c>
     532:	b9 3f       	cpi	r27, 0xF9	; 249
     534:	cc f3       	brlt	.-14     	; 0x528 <__fixunssfsi+0x34>
     536:	86 95       	lsr	r24
     538:	77 95       	ror	r23
     53a:	67 95       	ror	r22
     53c:	b3 95       	inc	r27
     53e:	d9 f7       	brne	.-10     	; 0x536 <__fixunssfsi+0x42>
     540:	3e f4       	brtc	.+14     	; 0x550 <__fixunssfsi+0x5c>
     542:	90 95       	com	r25
     544:	80 95       	com	r24
     546:	70 95       	com	r23
     548:	61 95       	neg	r22
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	8f 4f       	sbci	r24, 0xFF	; 255
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	08 95       	ret

00000552 <__fp_split3>:
     552:	57 fd       	sbrc	r21, 7
     554:	90 58       	subi	r25, 0x80	; 128
     556:	44 0f       	add	r20, r20
     558:	55 1f       	adc	r21, r21
     55a:	59 f0       	breq	.+22     	; 0x572 <__fp_splitA+0x10>
     55c:	5f 3f       	cpi	r21, 0xFF	; 255
     55e:	71 f0       	breq	.+28     	; 0x57c <__fp_splitA+0x1a>
     560:	47 95       	ror	r20

00000562 <__fp_splitA>:
     562:	88 0f       	add	r24, r24
     564:	97 fb       	bst	r25, 7
     566:	99 1f       	adc	r25, r25
     568:	61 f0       	breq	.+24     	; 0x582 <__fp_splitA+0x20>
     56a:	9f 3f       	cpi	r25, 0xFF	; 255
     56c:	79 f0       	breq	.+30     	; 0x58c <__fp_splitA+0x2a>
     56e:	87 95       	ror	r24
     570:	08 95       	ret
     572:	12 16       	cp	r1, r18
     574:	13 06       	cpc	r1, r19
     576:	14 06       	cpc	r1, r20
     578:	55 1f       	adc	r21, r21
     57a:	f2 cf       	rjmp	.-28     	; 0x560 <__fp_split3+0xe>
     57c:	46 95       	lsr	r20
     57e:	f1 df       	rcall	.-30     	; 0x562 <__fp_splitA>
     580:	08 c0       	rjmp	.+16     	; 0x592 <__fp_splitA+0x30>
     582:	16 16       	cp	r1, r22
     584:	17 06       	cpc	r1, r23
     586:	18 06       	cpc	r1, r24
     588:	99 1f       	adc	r25, r25
     58a:	f1 cf       	rjmp	.-30     	; 0x56e <__fp_splitA+0xc>
     58c:	86 95       	lsr	r24
     58e:	71 05       	cpc	r23, r1
     590:	61 05       	cpc	r22, r1
     592:	08 94       	sec
     594:	08 95       	ret

00000596 <__fp_zero>:
     596:	e8 94       	clt

00000598 <__fp_szero>:
     598:	bb 27       	eor	r27, r27
     59a:	66 27       	eor	r22, r22
     59c:	77 27       	eor	r23, r23
     59e:	cb 01       	movw	r24, r22
     5a0:	97 f9       	bld	r25, 7
     5a2:	08 95       	ret

000005a4 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::enableLoopAll(){
  sendStack(0x11, 0x01);
}

void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
     5a4:	fb 01       	movw	r30, r22
     5a6:	31 96       	adiw	r30, 0x01	; 1
     5a8:	69 5f       	subi	r22, 0xF9	; 249
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	21 91       	ld	r18, Z+
     5b2:	82 0f       	add	r24, r18
     5b4:	91 1d       	adc	r25, r1
     5b6:	e6 17       	cp	r30, r22
     5b8:	f7 07       	cpc	r31, r23
     5ba:	d1 f7       	brne	.-12     	; 0x5b0 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0xc>
     5bc:	91 95       	neg	r25
     5be:	81 95       	neg	r24
     5c0:	91 09       	sbc	r25, r1
     5c2:	08 95       	ret

000005c4 <_ZN19DFRobotDFPlayerMini10parseStackEv>:
     5c4:	dc 01       	movw	r26, r24
     5c6:	1d 96       	adiw	r26, 0x0d	; 13
     5c8:	ec 91       	ld	r30, X
     5ca:	1d 97       	sbiw	r26, 0x0d	; 13
     5cc:	91 96       	adiw	r26, 0x21	; 33
     5ce:	ec 93       	st	X, r30
     5d0:	91 97       	sbiw	r26, 0x21	; 33
     5d2:	1f 96       	adiw	r26, 0x0f	; 15
     5d4:	8c 91       	ld	r24, X
     5d6:	1f 97       	sbiw	r26, 0x0f	; 15
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	98 2f       	mov	r25, r24
     5dc:	88 27       	eor	r24, r24
     5de:	50 96       	adiw	r26, 0x10	; 16
     5e0:	2c 91       	ld	r18, X
     5e2:	50 97       	sbiw	r26, 0x10	; 16
     5e4:	82 0f       	add	r24, r18
     5e6:	91 1d       	adc	r25, r1
     5e8:	93 96       	adiw	r26, 0x23	; 35
     5ea:	9c 93       	st	X, r25
     5ec:	8e 93       	st	-X, r24
     5ee:	92 97       	sbiw	r26, 0x22	; 34
     5f0:	4e 2f       	mov	r20, r30
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	fa 01       	movw	r30, r20
     5f6:	fa 97       	sbiw	r30, 0x3a	; 58
     5f8:	e6 31       	cpi	r30, 0x16	; 22
     5fa:	f1 05       	cpc	r31, r1
     5fc:	48 f5       	brcc	.+82     	; 0x650 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x8c>
     5fe:	ec 5c       	subi	r30, 0xCC	; 204
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__tablejump2__>
     606:	5e 96       	adiw	r26, 0x1e	; 30
     608:	1c 92       	st	X, r1
     60a:	5e 97       	sbiw	r26, 0x1e	; 30
     60c:	85 e0       	ldi	r24, 0x05	; 5
     60e:	19 c0       	rjmp	.+50     	; 0x642 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     610:	81 ff       	sbrs	r24, 1
     612:	2e c0       	rjmp	.+92     	; 0x670 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     614:	5e 96       	adiw	r26, 0x1e	; 30
     616:	1c 92       	st	X, r1
     618:	5e 97       	sbiw	r26, 0x1e	; 30
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	12 c0       	rjmp	.+36     	; 0x642 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     61e:	81 ff       	sbrs	r24, 1
     620:	27 c0       	rjmp	.+78     	; 0x670 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     622:	5e 96       	adiw	r26, 0x1e	; 30
     624:	1c 92       	st	X, r1
     626:	5e 97       	sbiw	r26, 0x1e	; 30
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0b c0       	rjmp	.+22     	; 0x642 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     62c:	81 ff       	sbrs	r24, 1
     62e:	20 c0       	rjmp	.+64     	; 0x670 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     630:	5e 96       	adiw	r26, 0x1e	; 30
     632:	1c 92       	st	X, r1
     634:	5e 97       	sbiw	r26, 0x1e	; 30
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	04 c0       	rjmp	.+8      	; 0x642 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     63a:	5e 96       	adiw	r26, 0x1e	; 30
     63c:	1c 92       	st	X, r1
     63e:	5e 97       	sbiw	r26, 0x1e	; 30
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	90 96       	adiw	r26, 0x20	; 32
     644:	8c 93       	st	X, r24
     646:	90 97       	sbiw	r26, 0x20	; 32
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	94 96       	adiw	r26, 0x24	; 36
     64c:	8c 93       	st	X, r24
     64e:	08 95       	ret
     650:	5e 96       	adiw	r26, 0x1e	; 30
     652:	1c 92       	st	X, r1
     654:	5e 97       	sbiw	r26, 0x1e	; 30
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 96       	adiw	r26, 0x20	; 32
     65a:	8c 93       	st	X, r24
     65c:	90 97       	sbiw	r26, 0x20	; 32
     65e:	93 96       	adiw	r26, 0x23	; 35
     660:	1c 92       	st	X, r1
     662:	1e 92       	st	-X, r1
     664:	92 97       	sbiw	r26, 0x22	; 34
     666:	94 96       	adiw	r26, 0x24	; 36
     668:	8c 93       	st	X, r24
     66a:	94 97       	sbiw	r26, 0x24	; 36
     66c:	95 96       	adiw	r26, 0x25	; 37
     66e:	1c 92       	st	X, r1
     670:	08 95       	ret

00000672 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	bc 01       	movw	r22, r24
     67a:	66 5f       	subi	r22, 0xF6	; 246
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     682:	29 89       	ldd	r18, Y+17	; 0x11
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	32 2f       	mov	r19, r18
     688:	22 27       	eor	r18, r18
     68a:	4a 89       	ldd	r20, Y+18	; 0x12
     68c:	24 0f       	add	r18, r20
     68e:	31 1d       	adc	r19, r1
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	09 f0       	breq	.+2      	; 0x69a <_ZN19DFRobotDFPlayerMini13validateStackEv+0x28>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	84 2f       	mov	r24, r20
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <_ZN19DFRobotDFPlayerMini9availableEv>:
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	88 81       	ld	r24, Y
     6b6:	99 81       	ldd	r25, Y+1	; 0x01
     6b8:	dc 01       	movw	r26, r24
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	04 80       	ldd	r0, Z+4	; 0x04
     6c0:	f5 81       	ldd	r31, Z+5	; 0x05
     6c2:	e0 2d       	mov	r30, r0
     6c4:	09 95       	icall
     6c6:	89 2b       	or	r24, r25
     6c8:	09 f4       	brne	.+2      	; 0x6cc <_ZN19DFRobotDFPlayerMini9availableEv+0x2a>
     6ca:	44 c0       	rjmp	.+136    	; 0x754 <_ZN19DFRobotDFPlayerMini9availableEv+0xb2>
     6cc:	0e 8d       	ldd	r16, Y+30	; 0x1e
     6ce:	88 81       	ld	r24, Y
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	dc 01       	movw	r26, r24
     6d4:	ed 91       	ld	r30, X+
     6d6:	fc 91       	ld	r31, X
     6d8:	06 80       	ldd	r0, Z+6	; 0x06
     6da:	f7 81       	ldd	r31, Z+7	; 0x07
     6dc:	e0 2d       	mov	r30, r0
     6de:	01 11       	cpse	r16, r1
     6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <_ZN19DFRobotDFPlayerMini9availableEv+0x4e>
     6e2:	09 95       	icall
     6e4:	8a 87       	std	Y+10, r24	; 0x0a
     6e6:	8e 37       	cpi	r24, 0x7E	; 126
     6e8:	29 f7       	brne	.-54     	; 0x6b4 <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     6ea:	1c a2       	std	Y+36, r1	; 0x24
     6ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6ee:	2f c0       	rjmp	.+94     	; 0x74e <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     6f0:	09 95       	icall
     6f2:	fe 01       	movw	r30, r28
     6f4:	e0 0f       	add	r30, r16
     6f6:	f1 1d       	adc	r31, r1
     6f8:	82 87       	std	Z+10, r24	; 0x0a
     6fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	49 f0       	breq	.+18     	; 0x712 <_ZN19DFRobotDFPlayerMini9availableEv+0x70>
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	59 f0       	breq	.+22     	; 0x71a <_ZN19DFRobotDFPlayerMini9availableEv+0x78>
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	19 f5       	brne	.+70     	; 0x74e <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     708:	9b 85       	ldd	r25, Y+11	; 0x0b
     70a:	9f 3f       	cpi	r25, 0xFF	; 255
     70c:	01 f1       	breq	.+64     	; 0x74e <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     70e:	1e 8e       	std	Y+30, r1	; 0x1e
     710:	1a c0       	rjmp	.+52     	; 0x746 <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
     712:	9c 85       	ldd	r25, Y+12	; 0x0c
     714:	96 30       	cpi	r25, 0x06	; 6
     716:	d9 f0       	breq	.+54     	; 0x74e <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     718:	03 c0       	rjmp	.+6      	; 0x720 <_ZN19DFRobotDFPlayerMini9availableEv+0x7e>
     71a:	8b 89       	ldd	r24, Y+19	; 0x13
     71c:	8f 3e       	cpi	r24, 0xEF	; 239
     71e:	11 f0       	breq	.+4      	; 0x724 <_ZN19DFRobotDFPlayerMini9availableEv+0x82>
     720:	1e 8e       	std	Y+30, r1	; 0x1e
     722:	10 c0       	rjmp	.+32     	; 0x744 <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     724:	ce 01       	movw	r24, r28
     726:	0e 94 39 03 	call	0x672	; 0x672 <_ZN19DFRobotDFPlayerMini13validateStackEv>
     72a:	1e 8e       	std	Y+30, r1	; 0x1e
     72c:	88 23       	and	r24, r24
     72e:	51 f0       	breq	.+20     	; 0x744 <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     730:	ce 01       	movw	r24, r28
     732:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN19DFRobotDFPlayerMini10parseStackEv>
     736:	1c a1       	ldd	r17, Y+36	; 0x24
     738:	11 23       	and	r17, r17
     73a:	69 f1       	breq	.+90     	; 0x796 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     73c:	88 8d       	ldd	r24, Y+24	; 0x18
     73e:	81 11       	cpse	r24, r1
     740:	2a c0       	rjmp	.+84     	; 0x796 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     742:	26 c0       	rjmp	.+76     	; 0x790 <_ZN19DFRobotDFPlayerMini9availableEv+0xee>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	88 a3       	std	Y+32, r24	; 0x20
     748:	1b a2       	std	Y+35, r1	; 0x23
     74a:	1a a2       	std	Y+34, r1	; 0x22
     74c:	20 c0       	rjmp	.+64     	; 0x78e <_ZN19DFRobotDFPlayerMini9availableEv+0xec>
     74e:	8f 5f       	subi	r24, 0xFF	; 255
     750:	8e 8f       	std	Y+30, r24	; 0x1e
     752:	b0 cf       	rjmp	.-160    	; 0x6b4 <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     754:	8d a1       	ldd	r24, Y+37	; 0x25
     756:	88 23       	and	r24, r24
     758:	e9 f0       	breq	.+58     	; 0x794 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     75a:	0e 94 c1 07 	call	0xf82	; 0xf82 <millis>
     75e:	ca 80       	ldd	r12, Y+2	; 0x02
     760:	db 80       	ldd	r13, Y+3	; 0x03
     762:	ec 80       	ldd	r14, Y+4	; 0x04
     764:	fd 80       	ldd	r15, Y+5	; 0x05
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	8c 19       	sub	r24, r12
     76c:	9d 09       	sbc	r25, r13
     76e:	ae 09       	sbc	r26, r14
     770:	bf 09       	sbc	r27, r15
     772:	ce 80       	ldd	r12, Y+6	; 0x06
     774:	df 80       	ldd	r13, Y+7	; 0x07
     776:	e8 84       	ldd	r14, Y+8	; 0x08
     778:	f9 84       	ldd	r15, Y+9	; 0x09
     77a:	8c 15       	cp	r24, r12
     77c:	9d 05       	cpc	r25, r13
     77e:	ae 05       	cpc	r26, r14
     780:	bf 05       	cpc	r27, r15
     782:	40 f0       	brcs	.+16     	; 0x794 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     784:	1e 8e       	std	Y+30, r1	; 0x1e
     786:	18 a2       	std	Y+32, r1	; 0x20
     788:	1b a2       	std	Y+35, r1	; 0x23
     78a:	1a a2       	std	Y+34, r1	; 0x22
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	8c a3       	std	Y+36, r24	; 0x24
     790:	1d a2       	std	Y+37, r1	; 0x25
     792:	01 c0       	rjmp	.+2      	; 0x796 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     794:	1c a1       	ldd	r17, Y+36	; 0x24
     796:	81 2f       	mov	r24, r17
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <_ZN19DFRobotDFPlayerMini9sendStackEv>:
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
     7b0:	88 8d       	ldd	r24, Y+24	; 0x18
     7b2:	88 23       	and	r24, r24
     7b4:	39 f0       	breq	.+14     	; 0x7c4 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1a>
     7b6:	8d a1       	ldd	r24, Y+37	; 0x25
     7b8:	88 23       	and	r24, r24
     7ba:	51 f0       	breq	.+20     	; 0x7d0 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x26>
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN19DFRobotDFPlayerMini9availableEv>
     7c2:	f9 cf       	rjmp	.-14     	; 0x7b6 <_ZN19DFRobotDFPlayerMini9sendStackEv+0xc>
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
     7d0:	88 81       	ld	r24, Y
     7d2:	99 81       	ldd	r25, Y+1	; 0x01
     7d4:	dc 01       	movw	r26, r24
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	02 80       	ldd	r0, Z+2	; 0x02
     7dc:	f3 81       	ldd	r31, Z+3	; 0x03
     7de:	e0 2d       	mov	r30, r0
     7e0:	4a e0       	ldi	r20, 0x0A	; 10
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	be 01       	movw	r22, r28
     7e6:	6c 5e       	subi	r22, 0xEC	; 236
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	09 95       	icall
     7ec:	0e 94 c1 07 	call	0xf82	; 0xf82 <millis>
     7f0:	6a 83       	std	Y+2, r22	; 0x02
     7f2:	7b 83       	std	Y+3, r23	; 0x03
     7f4:	8c 83       	std	Y+4, r24	; 0x04
     7f6:	9d 83       	std	Y+5, r25	; 0x05
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	98 8d       	ldd	r25, Y+24	; 0x18
     7fc:	91 11       	cpse	r25, r1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x58>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	8d a3       	std	Y+37, r24	; 0x25
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <_ZN19DFRobotDFPlayerMini9sendStackEhj>:
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
     810:	6f 8b       	std	Y+23, r22	; 0x17
     812:	59 8f       	std	Y+25, r21	; 0x19
     814:	4a 8f       	std	Y+26, r20	; 0x1a
     816:	bc 01       	movw	r22, r24
     818:	6c 5e       	subi	r22, 0xEC	; 236
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     820:	9b 8f       	std	Y+27, r25	; 0x1b
     822:	8c 8f       	std	Y+28, r24	; 0x1c
     824:	ce 01       	movw	r24, r28
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_ZN19DFRobotDFPlayerMini9sendStackEv>

0000082e <_ZN19DFRobotDFPlayerMini9sendStackEh>:
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0c 94 05 04 	jmp	0x80a	; 0x80a <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000836 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	8d a3       	std	Y+37, r24	; 0x25
     840:	ce 01       	movw	r24, r28
     842:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN19DFRobotDFPlayerMini9availableEv>
     846:	88 23       	and	r24, r24
     848:	d9 f3       	breq	.-10     	; 0x840 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	98 a1       	ldd	r25, Y+32	; 0x20
     84e:	91 11       	cpse	r25, r1
     850:	01 c0       	rjmp	.+2      	; 0x854 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0x1e>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <_ZN19DFRobotDFPlayerMini6volumeEh>:
     85a:	46 2f       	mov	r20, r22
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	66 e0       	ldi	r22, 0x06	; 6
     860:	0c 94 05 04 	jmp	0x80a	; 0x80a <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000864 <_ZN19DFRobotDFPlayerMini2EQEh>:
     864:	46 2f       	mov	r20, r22
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	67 e0       	ldi	r22, 0x07	; 7
     86a:	0c 94 05 04 	jmp	0x80a	; 0x80a <_ZN19DFRobotDFPlayerMini9sendStackEhj>

0000086e <_ZN19DFRobotDFPlayerMini12outputDeviceEh>:
     86e:	46 2f       	mov	r20, r22
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	69 e0       	ldi	r22, 0x09	; 9
     874:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     878:	68 ec       	ldi	r22, 0xC8	; 200
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <delay>

00000884 <_ZN19DFRobotDFPlayerMini5resetEv>:
     884:	6c e0       	ldi	r22, 0x0C	; 12
     886:	0c 94 17 04 	jmp	0x82e	; 0x82e <_ZN19DFRobotDFPlayerMini9sendStackEh>

0000088a <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	14 2f       	mov	r17, r20
     894:	44 23       	and	r20, r20
     896:	19 f0       	breq	.+6      	; 0x89e <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x14>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	88 8f       	std	Y+24, r24	; 0x18
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x16>
     89e:	18 8e       	std	Y+24, r1	; 0x18
     8a0:	79 83       	std	Y+1, r23	; 0x01
     8a2:	68 83       	st	Y, r22
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	a8 85       	ldd	r26, Y+8	; 0x08
     8aa:	b9 85       	ldd	r27, Y+9	; 0x09
     8ac:	88 54       	subi	r24, 0x48	; 72
     8ae:	94 4f       	sbci	r25, 0xF4	; 244
     8b0:	af 4f       	sbci	r26, 0xFF	; 255
     8b2:	bf 4f       	sbci	r27, 0xFF	; 255
     8b4:	8e 83       	std	Y+6, r24	; 0x06
     8b6:	9f 83       	std	Y+7, r25	; 0x07
     8b8:	a8 87       	std	Y+8, r26	; 0x08
     8ba:	b9 87       	std	Y+9, r27	; 0x09
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 42 04 	call	0x884	; 0x884 <_ZN19DFRobotDFPlayerMini5resetEv>
     8c2:	ce 01       	movw	r24, r28
     8c4:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
     8c8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ca:	9f 81       	ldd	r25, Y+7	; 0x07
     8cc:	a8 85       	ldd	r26, Y+8	; 0x08
     8ce:	b9 85       	ldd	r27, Y+9	; 0x09
     8d0:	88 5b       	subi	r24, 0xB8	; 184
     8d2:	9b 40       	sbci	r25, 0x0B	; 11
     8d4:	a1 09       	sbc	r26, r1
     8d6:	b1 09       	sbc	r27, r1
     8d8:	8e 83       	std	Y+6, r24	; 0x06
     8da:	9f 83       	std	Y+7, r25	; 0x07
     8dc:	a8 87       	std	Y+8, r26	; 0x08
     8de:	b9 87       	std	Y+9, r27	; 0x09
     8e0:	68 ec       	ldi	r22, 0xC8	; 200
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
     8ec:	1c a2       	std	Y+36, r1	; 0x24
     8ee:	88 a1       	ldd	r24, Y+32	; 0x20
     8f0:	84 30       	cpi	r24, 0x04	; 4
     8f2:	19 f0       	breq	.+6      	; 0x8fa <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x70>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	81 27       	eor	r24, r17
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x72>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	08 95       	ret

00000904 <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>:
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
     904:	ab 01       	movw	r20, r22
  sendStack(0x12, fileNumber);
     906:	62 e1       	ldi	r22, 0x12	; 18
     908:	0c 94 05 04 	jmp	0x80a	; 0x80a <_ZN19DFRobotDFPlayerMini9sendStackEhj>

0000090c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     90c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     90e:	91 8d       	ldd	r25, Z+25	; 0x19
     910:	22 8d       	ldd	r18, Z+26	; 0x1a
     912:	89 2f       	mov	r24, r25
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	80 5c       	subi	r24, 0xC0	; 192
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	82 1b       	sub	r24, r18
     91c:	91 09       	sbc	r25, r1
}
     91e:	8f 73       	andi	r24, 0x3F	; 63
     920:	99 27       	eor	r25, r25
     922:	08 95       	ret

00000924 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     924:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     926:	91 8d       	ldd	r25, Z+25	; 0x19
     928:	82 8d       	ldd	r24, Z+26	; 0x1a
     92a:	98 17       	cp	r25, r24
     92c:	31 f0       	breq	.+12     	; 0x93a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     92e:	82 8d       	ldd	r24, Z+26	; 0x1a
     930:	e8 0f       	add	r30, r24
     932:	f1 1d       	adc	r31, r1
     934:	85 8d       	ldd	r24, Z+29	; 0x1d
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     93e:	08 95       	ret

00000940 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     940:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     942:	91 8d       	ldd	r25, Z+25	; 0x19
     944:	82 8d       	ldd	r24, Z+26	; 0x1a
     946:	98 17       	cp	r25, r24
     948:	61 f0       	breq	.+24     	; 0x962 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     94a:	82 8d       	ldd	r24, Z+26	; 0x1a
     94c:	df 01       	movw	r26, r30
     94e:	a8 0f       	add	r26, r24
     950:	b1 1d       	adc	r27, r1
     952:	5d 96       	adiw	r26, 0x1d	; 29
     954:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     956:	92 8d       	ldd	r25, Z+26	; 0x1a
     958:	9f 5f       	subi	r25, 0xFF	; 255
     95a:	9f 73       	andi	r25, 0x3F	; 63
     95c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     966:	08 95       	ret

00000968 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     968:	89 e0       	ldi	r24, 0x09	; 9
     96a:	96 e0       	ldi	r25, 0x06	; 6
     96c:	89 2b       	or	r24, r25
     96e:	49 f0       	breq	.+18     	; 0x982 <_Z14serialEventRunv+0x1a>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	89 2b       	or	r24, r25
     976:	29 f0       	breq	.+10     	; 0x982 <_Z14serialEventRunv+0x1a>
     978:	0e 94 09 06 	call	0xc12	; 0xc12 <_Z17Serial0_availablev>
     97c:	81 11       	cpse	r24, r1
     97e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     982:	08 95       	ret

00000984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     984:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     986:	84 8d       	ldd	r24, Z+28	; 0x1c
     988:	df 01       	movw	r26, r30
     98a:	a8 0f       	add	r26, r24
     98c:	b1 1d       	adc	r27, r1
     98e:	a3 5a       	subi	r26, 0xA3	; 163
     990:	bf 4f       	sbci	r27, 0xFF	; 255
     992:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     994:	84 8d       	ldd	r24, Z+28	; 0x1c
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	8f 73       	andi	r24, 0x3F	; 63
     99c:	99 27       	eor	r25, r25
     99e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9a0:	a6 89       	ldd	r26, Z+22	; 0x16
     9a2:	b7 89       	ldd	r27, Z+23	; 0x17
     9a4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     9a6:	a0 89       	ldd	r26, Z+16	; 0x10
     9a8:	b1 89       	ldd	r27, Z+17	; 0x11
     9aa:	8c 91       	ld	r24, X
     9ac:	80 64       	ori	r24, 0x40	; 64
     9ae:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     9b0:	93 8d       	ldd	r25, Z+27	; 0x1b
     9b2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b4:	98 13       	cpse	r25, r24
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9b8:	02 88       	ldd	r0, Z+18	; 0x12
     9ba:	f3 89       	ldd	r31, Z+19	; 0x13
     9bc:	e0 2d       	mov	r30, r0
     9be:	80 81       	ld	r24, Z
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	80 83       	st	Z, r24
     9c4:	08 95       	ret

000009c6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
  _written = true;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9dc:	98 13       	cpse	r25, r24
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <_ZN14HardwareSerial5writeEh+0x24>
     9e0:	e8 89       	ldd	r30, Y+16	; 0x10
     9e2:	f9 89       	ldd	r31, Y+17	; 0x11
     9e4:	80 81       	ld	r24, Z
     9e6:	85 fd       	sbrc	r24, 5
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <_ZN14HardwareSerial5writeEh+0x6c>
     9ea:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9ec:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	0f 5f       	subi	r16, 0xFF	; 255
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	0f 73       	andi	r16, 0x3F	; 63
     9f6:	11 27       	eor	r17, r17
     9f8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fc:	e8 12       	cpse	r14, r24
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	07 fc       	sbrc	r0, 7
     a04:	fa cf       	rjmp	.-12     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a06:	e8 89       	ldd	r30, Y+16	; 0x10
     a08:	f9 89       	ldd	r31, Y+17	; 0x11
     a0a:	80 81       	ld	r24, Z
     a0c:	85 ff       	sbrs	r24, 5
     a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a16:	f1 cf       	rjmp	.-30     	; 0x9fa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a1a:	fe 01       	movw	r30, r28
     a1c:	e8 0f       	add	r30, r24
     a1e:	f1 1d       	adc	r31, r1
     a20:	e3 5a       	subi	r30, 0xA3	; 163
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     a26:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a28:	ea 89       	ldd	r30, Y+18	; 0x12
     a2a:	fb 89       	ldd	r31, Y+19	; 0x13
     a2c:	80 81       	ld	r24, Z
     a2e:	80 62       	ori	r24, 0x20	; 32
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a32:	ee 89       	ldd	r30, Y+22	; 0x16
     a34:	ff 89       	ldd	r31, Y+23	; 0x17
     a36:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a38:	e8 89       	ldd	r30, Y+16	; 0x10
     a3a:	f9 89       	ldd	r31, Y+17	; 0x11
     a3c:	80 81       	ld	r24, Z
     a3e:	80 64       	ori	r24, 0x40	; 64
     a40:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a5a:	88 8d       	ldd	r24, Y+24	; 0x18
     a5c:	88 23       	and	r24, r24
     a5e:	c9 f0       	breq	.+50     	; 0xa92 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a60:	ea 89       	ldd	r30, Y+18	; 0x12
     a62:	fb 89       	ldd	r31, Y+19	; 0x13
     a64:	80 81       	ld	r24, Z
     a66:	85 fd       	sbrc	r24, 5
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <_ZN14HardwareSerial5flushEv+0x20>
     a6a:	a8 89       	ldd	r26, Y+16	; 0x10
     a6c:	b9 89       	ldd	r27, Y+17	; 0x11
     a6e:	8c 91       	ld	r24, X
     a70:	86 fd       	sbrc	r24, 6
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	07 fc       	sbrc	r0, 7
     a78:	f5 cf       	rjmp	.-22     	; 0xa64 <_ZN14HardwareSerial5flushEv+0x10>
     a7a:	80 81       	ld	r24, Z
     a7c:	85 ff       	sbrs	r24, 5
     a7e:	f2 cf       	rjmp	.-28     	; 0xa64 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a80:	a8 89       	ldd	r26, Y+16	; 0x10
     a82:	b9 89       	ldd	r27, Y+17	; 0x11
     a84:	8c 91       	ld	r24, X
     a86:	85 ff       	sbrs	r24, 5
     a88:	ed cf       	rjmp	.-38     	; 0xa64 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a90:	e7 cf       	rjmp	.-50     	; 0xa60 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
     aa8:	6a 01       	movw	r12, r20
     aaa:	7b 01       	movw	r14, r22
     aac:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     aae:	e8 89       	ldd	r30, Y+16	; 0x10
     ab0:	f9 89       	ldd	r31, Y+17	; 0x11
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ab6:	41 15       	cp	r20, r1
     ab8:	51 4e       	sbci	r21, 0xE1	; 225
     aba:	61 05       	cpc	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	b1 f0       	breq	.+44     	; 0xaec <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	79 e0       	ldi	r23, 0x09	; 9
     ac4:	8d e3       	ldi	r24, 0x3D	; 61
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a7 01       	movw	r20, r14
     aca:	96 01       	movw	r18, r12
     acc:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
     ad0:	da 01       	movw	r26, r20
     ad2:	c9 01       	movw	r24, r18
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	a1 09       	sbc	r26, r1
     ad8:	b1 09       	sbc	r27, r1
     ada:	b6 95       	lsr	r27
     adc:	a7 95       	ror	r26
     ade:	97 95       	ror	r25
     ae0:	87 95       	ror	r24
     ae2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ae4:	21 15       	cp	r18, r1
     ae6:	80 e1       	ldi	r24, 0x10	; 16
     ae8:	38 07       	cpc	r19, r24
     aea:	a8 f0       	brcs	.+42     	; 0xb16 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     aec:	e8 89       	ldd	r30, Y+16	; 0x10
     aee:	f9 89       	ldd	r31, Y+17	; 0x11
     af0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     af2:	60 e8       	ldi	r22, 0x80	; 128
     af4:	74 e8       	ldi	r23, 0x84	; 132
     af6:	8e e1       	ldi	r24, 0x1E	; 30
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a7 01       	movw	r20, r14
     afc:	96 01       	movw	r18, r12
     afe:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
     b02:	da 01       	movw	r26, r20
     b04:	c9 01       	movw	r24, r18
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	a1 09       	sbc	r26, r1
     b0a:	b1 09       	sbc	r27, r1
     b0c:	b6 95       	lsr	r27
     b0e:	a7 95       	ror	r26
     b10:	97 95       	ror	r25
     b12:	87 95       	ror	r24
     b14:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b16:	ec 85       	ldd	r30, Y+12	; 0x0c
     b18:	fd 85       	ldd	r31, Y+13	; 0x0d
     b1a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b1c:	ee 85       	ldd	r30, Y+14	; 0x0e
     b1e:	ff 85       	ldd	r31, Y+15	; 0x0f
     b20:	20 83       	st	Z, r18

  _written = false;
     b22:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b24:	ec 89       	ldd	r30, Y+20	; 0x14
     b26:	fd 89       	ldd	r31, Y+21	; 0x15
     b28:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b2a:	ea 89       	ldd	r30, Y+18	; 0x12
     b2c:	fb 89       	ldd	r31, Y+19	; 0x13
     b2e:	80 81       	ld	r24, Z
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b34:	ea 89       	ldd	r30, Y+18	; 0x12
     b36:	fb 89       	ldd	r31, Y+19	; 0x13
     b38:	80 81       	ld	r24, Z
     b3a:	88 60       	ori	r24, 0x08	; 8
     b3c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b3e:	ea 89       	ldd	r30, Y+18	; 0x12
     b40:	fb 89       	ldd	r31, Y+19	; 0x13
     b42:	80 81       	ld	r24, Z
     b44:	80 68       	ori	r24, 0x80	; 128
     b46:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b48:	ea 89       	ldd	r30, Y+18	; 0x12
     b4a:	fb 89       	ldd	r31, Y+19	; 0x13
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 83       	st	Z, r24
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	08 95       	ret

00000b62 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b76:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <Serial+0x10>
     b7a:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <Serial+0x11>
     b7e:	80 81       	ld	r24, Z
     b80:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <Serial+0x16>
     b84:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <Serial+0x17>
     b88:	82 fd       	sbrc	r24, 2
     b8a:	12 c0       	rjmp	.+36     	; 0xbb0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b8c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b8e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Serial+0x19>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b96:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Serial+0x1a>
     b9a:	82 17       	cp	r24, r18
     b9c:	51 f0       	breq	.+20     	; 0xbb2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     b9e:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <Serial+0x19>
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	ea 5f       	subi	r30, 0xFA	; 250
     ba6:	fd 4f       	sbci	r31, 0xFD	; 253
     ba8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     baa:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Serial+0x19>
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bb0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     be8:	86 e0       	ldi	r24, 0x06	; 6
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN14HardwareSerial9availableEv>
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	89 2b       	or	r24, r25
     c1e:	09 f4       	brne	.+2      	; 0xc22 <_Z17Serial0_availablev+0x10>
     c20:	20 e0       	ldi	r18, 0x00	; 0
}
     c22:	82 2f       	mov	r24, r18
     c24:	08 95       	ret

00000c26 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c26:	e6 e0       	ldi	r30, 0x06	; 6
     c28:	f2 e0       	ldi	r31, 0x02	; 2
     c2a:	13 82       	std	Z+3, r1	; 0x03
     c2c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c2e:	88 ee       	ldi	r24, 0xE8	; 232
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	84 83       	std	Z+4, r24	; 0x04
     c38:	95 83       	std	Z+5, r25	; 0x05
     c3a:	a6 83       	std	Z+6, r26	; 0x06
     c3c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c3e:	8b ea       	ldi	r24, 0xAB	; 171
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	91 83       	std	Z+1, r25	; 0x01
     c44:	80 83       	st	Z, r24
     c46:	85 ec       	ldi	r24, 0xC5	; 197
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	95 87       	std	Z+13, r25	; 0x0d
     c4c:	84 87       	std	Z+12, r24	; 0x0c
     c4e:	84 ec       	ldi	r24, 0xC4	; 196
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	97 87       	std	Z+15, r25	; 0x0f
     c54:	86 87       	std	Z+14, r24	; 0x0e
     c56:	80 ec       	ldi	r24, 0xC0	; 192
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	91 8b       	std	Z+17, r25	; 0x11
     c5c:	80 8b       	std	Z+16, r24	; 0x10
     c5e:	81 ec       	ldi	r24, 0xC1	; 193
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	93 8b       	std	Z+19, r25	; 0x13
     c64:	82 8b       	std	Z+18, r24	; 0x12
     c66:	82 ec       	ldi	r24, 0xC2	; 194
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	95 8b       	std	Z+21, r25	; 0x15
     c6c:	84 8b       	std	Z+20, r24	; 0x14
     c6e:	86 ec       	ldi	r24, 0xC6	; 198
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	97 8b       	std	Z+23, r25	; 0x17
     c74:	86 8b       	std	Z+22, r24	; 0x16
     c76:	11 8e       	std	Z+25, r1	; 0x19
     c78:	12 8e       	std	Z+26, r1	; 0x1a
     c7a:	13 8e       	std	Z+27, r1	; 0x1b
     c7c:	14 8e       	std	Z+28, r1	; 0x1c
     c7e:	08 95       	ret

00000c80 <initVariant>:
     c80:	08 95       	ret

00000c82 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c82:	0e 94 39 08 	call	0x1072	; 0x1072 <init>

	initVariant();
     c86:	0e 94 40 06 	call	0xc80	; 0xc80 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c8a:	0e 94 b4 00 	call	0x168	; 0x168 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c8e:	c4 eb       	ldi	r28, 0xB4	; 180
     c90:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c92:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <loop>
		if (serialEventRun) serialEventRun();
     c96:	20 97       	sbiw	r28, 0x00	; 0
     c98:	e1 f3       	breq	.-8      	; 0xc92 <main+0x10>
     c9a:	0e 94 b4 04 	call	0x968	; 0x968 <_Z14serialEventRunv>
     c9e:	f9 cf       	rjmp	.-14     	; 0xc92 <main+0x10>

00000ca0 <_Znwj>:
     ca0:	0c 94 bf 13 	jmp	0x277e	; 0x277e <malloc>

00000ca4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	6c 01       	movw	r12, r24
     cb6:	7a 01       	movw	r14, r20
     cb8:	8b 01       	movw	r16, r22
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	d0 e0       	ldi	r29, 0x00	; 0
     cbe:	ce 15       	cp	r28, r14
     cc0:	df 05       	cpc	r29, r15
     cc2:	81 f0       	breq	.+32     	; 0xce4 <_ZN5Print5writeEPKhj+0x40>
     cc4:	d8 01       	movw	r26, r16
     cc6:	6d 91       	ld	r22, X+
     cc8:	8d 01       	movw	r16, r26
     cca:	d6 01       	movw	r26, r12
     ccc:	ed 91       	ld	r30, X+
     cce:	fc 91       	ld	r31, X
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	c6 01       	movw	r24, r12
     cd8:	09 95       	icall
     cda:	89 2b       	or	r24, r25
     cdc:	11 f0       	breq	.+4      	; 0xce2 <_ZN5Print5writeEPKhj+0x3e>
     cde:	21 96       	adiw	r28, 0x01	; 1
     ce0:	ee cf       	rjmp	.-36     	; 0xcbe <_ZN5Print5writeEPKhj+0x1a>
     ce2:	7e 01       	movw	r14, r28
     ce4:	c7 01       	movw	r24, r14
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	08 95       	ret

00000cf8 <_ZN5Print5writeEPKc>:
     cf8:	61 15       	cp	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	79 f0       	breq	.+30     	; 0xd1c <_ZN5Print5writeEPKc+0x24>
     cfe:	fb 01       	movw	r30, r22
     d00:	01 90       	ld	r0, Z+
     d02:	00 20       	and	r0, r0
     d04:	e9 f7       	brne	.-6      	; 0xd00 <_ZN5Print5writeEPKc+0x8>
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	af 01       	movw	r20, r30
     d0a:	46 1b       	sub	r20, r22
     d0c:	57 0b       	sbc	r21, r23
     d0e:	dc 01       	movw	r26, r24
     d10:	ed 91       	ld	r30, X+
     d12:	fc 91       	ld	r31, X
     d14:	02 80       	ldd	r0, Z+2	; 0x02
     d16:	f3 81       	ldd	r31, Z+3	; 0x03
     d18:	e0 2d       	mov	r30, r0
     d1a:	09 94       	ijmp
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	08 95       	ret

00000d22 <_ZN5Print5printEc>:
     d22:	dc 01       	movw	r26, r24
     d24:	ed 91       	ld	r30, X+
     d26:	fc 91       	ld	r31, X
     d28:	01 90       	ld	r0, Z+
     d2a:	f0 81       	ld	r31, Z
     d2c:	e0 2d       	mov	r30, r0
     d2e:	09 94       	ijmp

00000d30 <_ZN5Print7printlnEv>:
     d30:	67 eb       	ldi	r22, 0xB7	; 183
     d32:	71 e0       	ldi	r23, 0x01	; 1
     d34:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <_ZN5Print5writeEPKc>

00000d38 <_ZN5Print7printlnEPKc>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN5Print5writeEPKc>
     d46:	8c 01       	movw	r16, r24
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN5Print7printlnEv>
     d4e:	80 0f       	add	r24, r16
     d50:	91 1f       	adc	r25, r17
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <_ZN5Print11printNumberEmh>:
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	a1 97       	sbiw	r28, 0x21	; 33
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	7c 01       	movw	r14, r24
     d82:	fa 01       	movw	r30, r20
     d84:	cb 01       	movw	r24, r22
     d86:	19 a2       	std	Y+33, r1	; 0x21
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <_ZN5Print11printNumberEmh+0x32>
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	8e 01       	movw	r16, r28
     d90:	0f 5d       	subi	r16, 0xDF	; 223
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	82 2e       	mov	r8, r18
     d96:	91 2c       	mov	r9, r1
     d98:	a1 2c       	mov	r10, r1
     d9a:	b1 2c       	mov	r11, r1
     d9c:	bf 01       	movw	r22, r30
     d9e:	a5 01       	movw	r20, r10
     da0:	94 01       	movw	r18, r8
     da2:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
     da6:	f9 01       	movw	r30, r18
     da8:	ca 01       	movw	r24, r20
     daa:	01 50       	subi	r16, 0x01	; 1
     dac:	11 09       	sbc	r17, r1
     dae:	6a 30       	cpi	r22, 0x0A	; 10
     db0:	10 f4       	brcc	.+4      	; 0xdb6 <_ZN5Print11printNumberEmh+0x5a>
     db2:	60 5d       	subi	r22, 0xD0	; 208
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <_ZN5Print11printNumberEmh+0x5c>
     db6:	69 5c       	subi	r22, 0xC9	; 201
     db8:	d8 01       	movw	r26, r16
     dba:	6c 93       	st	X, r22
     dbc:	23 2b       	or	r18, r19
     dbe:	24 2b       	or	r18, r20
     dc0:	25 2b       	or	r18, r21
     dc2:	61 f7       	brne	.-40     	; 0xd9c <_ZN5Print11printNumberEmh+0x40>
     dc4:	b8 01       	movw	r22, r16
     dc6:	c7 01       	movw	r24, r14
     dc8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN5Print5writeEPKc>
     dcc:	a1 96       	adiw	r28, 0x21	; 33
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	08 95       	ret

00000dee <_ZN5Print5printEmi>:
     dee:	21 15       	cp	r18, r1
     df0:	31 05       	cpc	r19, r1
     df2:	41 f4       	brne	.+16     	; 0xe04 <_ZN5Print5printEmi+0x16>
     df4:	dc 01       	movw	r26, r24
     df6:	ed 91       	ld	r30, X+
     df8:	fc 91       	ld	r31, X
     dfa:	01 90       	ld	r0, Z+
     dfc:	f0 81       	ld	r31, Z
     dfe:	e0 2d       	mov	r30, r0
     e00:	64 2f       	mov	r22, r20
     e02:	09 94       	ijmp
     e04:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <_ZN5Print11printNumberEmh>

00000e08 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     e12:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN5Print5printEmi>
     e16:	8c 01       	movw	r16, r24
  n += println();
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN5Print7printlnEv>
  return n;
}
     e1e:	80 0f       	add	r24, r16
     e20:	91 1f       	adc	r25, r17
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
  if (base == 0) {
     e3c:	21 15       	cp	r18, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	81 f4       	brne	.+32     	; 0xe62 <_ZN5Print5printEli+0x36>
    return write(n);
     e42:	dc 01       	movw	r26, r24
     e44:	ed 91       	ld	r30, X+
     e46:	fc 91       	ld	r31, X
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
     e4e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     e60:	09 94       	ijmp
  } else if (base == 10) {
     e62:	2a 30       	cpi	r18, 0x0A	; 10
     e64:	31 05       	cpc	r19, r1
     e66:	01 f5       	brne	.+64     	; 0xea8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     e68:	77 ff       	sbrs	r23, 7
     e6a:	1d c0       	rjmp	.+58     	; 0xea6 <_ZN5Print5printEli+0x7a>
     e6c:	6a 01       	movw	r12, r20
     e6e:	7b 01       	movw	r14, r22
     e70:	ec 01       	movw	r28, r24
      int t = print('-');
     e72:	6d e2       	ldi	r22, 0x2D	; 45
     e74:	0e 94 91 06 	call	0xd22	; 0xd22 <_ZN5Print5printEc>
     e78:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e7a:	44 27       	eor	r20, r20
     e7c:	55 27       	eor	r21, r21
     e7e:	ba 01       	movw	r22, r20
     e80:	4c 19       	sub	r20, r12
     e82:	5d 09       	sbc	r21, r13
     e84:	6e 09       	sbc	r22, r14
     e86:	7f 09       	sbc	r23, r15
     e88:	2a e0       	ldi	r18, 0x0A	; 10
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN5Print11printNumberEmh>
     e90:	80 0f       	add	r24, r16
     e92:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     eb8:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <_ZN5Print11printNumberEmh>

00000ebc <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     ebc:	9a 01       	movw	r18, r20
  return print((long) n, base);
     ebe:	ab 01       	movw	r20, r22
     ec0:	77 0f       	add	r23, r23
     ec2:	66 0b       	sbc	r22, r22
     ec4:	77 0b       	sbc	r23, r23
     ec6:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_ZN5Print5printEli>

00000eca <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     ed4:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN5Print5printEii>
     ed8:	8c 01       	movw	r16, r24
  n += println();
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN5Print7printlnEv>
  return n;
}
     ee0:	80 0f       	add	r24, r16
     ee2:	91 1f       	adc	r25, r17
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     f04:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <timer0_millis>
     f08:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <timer0_millis+0x1>
     f0c:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <timer0_millis+0x2>
     f10:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     f14:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     f18:	23 e0       	ldi	r18, 0x03	; 3
     f1a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     f1c:	2d 37       	cpi	r18, 0x7D	; 125
     f1e:	20 f4       	brcc	.+8      	; 0xf28 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	a1 1d       	adc	r26, r1
     f24:	b1 1d       	adc	r27, r1
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     f28:	26 e8       	ldi	r18, 0x86	; 134
     f2a:	23 0f       	add	r18, r19
		m += 1;
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	a1 1d       	adc	r26, r1
     f30:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f32:	20 93 a3 02 	sts	0x02A3, r18	; 0x8002a3 <timer0_fract>
	timer0_millis = m;
     f36:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <timer0_millis>
     f3a:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <timer0_millis+0x1>
     f3e:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <timer0_millis+0x2>
     f42:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <timer0_millis+0x3>
	timer0_overflow_count++;
     f46:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <timer0_overflow_count>
     f4a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <timer0_overflow_count+0x1>
     f4e:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <timer0_overflow_count+0x2>
     f52:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <timer0_overflow_count+0x3>
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	a1 1d       	adc	r26, r1
     f5a:	b1 1d       	adc	r27, r1
     f5c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <timer0_overflow_count>
     f60:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <timer0_overflow_count+0x1>
     f64:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <timer0_overflow_count+0x2>
     f68:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <timer0_overflow_count+0x3>
}
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f82:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f84:	f8 94       	cli
	m = timer0_millis;
     f86:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <timer0_millis>
     f8a:	70 91 a5 02 	lds	r23, 0x02A5	; 0x8002a5 <timer0_millis+0x1>
     f8e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <timer0_millis+0x2>
     f92:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <timer0_millis+0x3>
	SREG = oldSREG;
     f96:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f98:	08 95       	ret

00000f9a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f9a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f9c:	f8 94       	cli
	m = timer0_overflow_count;
     f9e:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <timer0_overflow_count>
     fa2:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <timer0_overflow_count+0x1>
     fa6:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <timer0_overflow_count+0x2>
     faa:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     fae:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fb0:	a8 9b       	sbis	0x15, 0	; 21
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <micros+0x24>
     fb4:	2f 3f       	cpi	r18, 0xFF	; 255
     fb6:	19 f0       	breq	.+6      	; 0xfbe <micros+0x24>
		m++;
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	a1 1d       	adc	r26, r1
     fbc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fbe:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     fc0:	ba 2f       	mov	r27, r26
     fc2:	a9 2f       	mov	r26, r25
     fc4:	98 2f       	mov	r25, r24
     fc6:	88 27       	eor	r24, r24
     fc8:	82 0f       	add	r24, r18
     fca:	91 1d       	adc	r25, r1
     fcc:	a1 1d       	adc	r26, r1
     fce:	b1 1d       	adc	r27, r1
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	42 e0       	ldi	r20, 0x02	; 2
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	4a 95       	dec	r20
     fe0:	d1 f7       	brne	.-12     	; 0xfd6 <micros+0x3c>
}
     fe2:	08 95       	ret

00000fe4 <delay>:

void delay(unsigned long ms)
{
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     ff8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <micros>
     ffc:	4b 01       	movw	r8, r22
     ffe:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1000:	c1 14       	cp	r12, r1
    1002:	d1 04       	cpc	r13, r1
    1004:	e1 04       	cpc	r14, r1
    1006:	f1 04       	cpc	r15, r1
    1008:	01 f1       	breq	.+64     	; 0x104a <delay+0x66>
		yield();
    100a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    100e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <micros>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	88 19       	sub	r24, r8
    1018:	99 09       	sbc	r25, r9
    101a:	aa 09       	sbc	r26, r10
    101c:	bb 09       	sbc	r27, r11
    101e:	88 3e       	cpi	r24, 0xE8	; 232
    1020:	93 40       	sbci	r25, 0x03	; 3
    1022:	a1 05       	cpc	r26, r1
    1024:	b1 05       	cpc	r27, r1
    1026:	60 f3       	brcs	.-40     	; 0x1000 <delay+0x1c>
			ms--;
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	c2 1a       	sub	r12, r18
    102c:	d1 08       	sbc	r13, r1
    102e:	e1 08       	sbc	r14, r1
    1030:	f1 08       	sbc	r15, r1
			start += 1000;
    1032:	88 ee       	ldi	r24, 0xE8	; 232
    1034:	88 0e       	add	r8, r24
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	98 1e       	adc	r9, r24
    103a:	a1 1c       	adc	r10, r1
    103c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    103e:	c1 14       	cp	r12, r1
    1040:	d1 04       	cpc	r13, r1
    1042:	e1 04       	cpc	r14, r1
    1044:	f1 04       	cpc	r15, r1
    1046:	19 f7       	brne	.-58     	; 0x100e <delay+0x2a>
    1048:	db cf       	rjmp	.-74     	; 0x1000 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	91 05       	cpc	r25, r1
    1060:	38 f0       	brcs	.+14     	; 0x1070 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    106a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <delayMicroseconds+0x10>
    1070:	08 95       	ret

00001072 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1072:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1074:	84 b5       	in	r24, 0x24	; 36
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    107a:	84 b5       	in	r24, 0x24	; 36
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1080:	85 b5       	in	r24, 0x25	; 37
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1086:	85 b5       	in	r24, 0x25	; 37
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    108c:	ee e6       	ldi	r30, 0x6E	; 110
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1096:	e1 e8       	ldi	r30, 0x81	; 129
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    109c:	80 81       	ld	r24, Z
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    10a2:	80 81       	ld	r24, Z
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10a8:	e0 e8       	ldi	r30, 0x80	; 128
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10b2:	e1 eb       	ldi	r30, 0xB1	; 177
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	84 60       	ori	r24, 0x04	; 4
    10ba:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10bc:	e0 eb       	ldi	r30, 0xB0	; 176
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10c6:	ea e7       	ldi	r30, 0x7A	; 122
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	84 60       	ori	r24, 0x04	; 4
    10ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10dc:	80 81       	ld	r24, Z
    10de:	80 68       	ori	r24, 0x80	; 128
    10e0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10e2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10e6:	08 95       	ret

000010e8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	81 f0       	breq	.+32     	; 0x110c <turnOffPWM+0x24>
    10ec:	28 f4       	brcc	.+10     	; 0x10f8 <turnOffPWM+0x10>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	99 f0       	breq	.+38     	; 0x1118 <turnOffPWM+0x30>
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	a1 f0       	breq	.+40     	; 0x111e <turnOffPWM+0x36>
    10f6:	08 95       	ret
    10f8:	87 30       	cpi	r24, 0x07	; 7
    10fa:	a9 f0       	breq	.+42     	; 0x1126 <turnOffPWM+0x3e>
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	b9 f0       	breq	.+46     	; 0x112e <turnOffPWM+0x46>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	d1 f4       	brne	.+52     	; 0x1138 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1104:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    110c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1110:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1112:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1116:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1118:	84 b5       	in	r24, 0x24	; 36
    111a:	8f 77       	andi	r24, 0x7F	; 127
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    111e:	84 b5       	in	r24, 0x24	; 36
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	84 bd       	out	0x24, r24	; 36
    1124:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1126:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    112a:	8f 77       	andi	r24, 0x7F	; 127
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    112e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1132:	8f 7d       	andi	r24, 0xDF	; 223
    1134:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1138:	08 95       	ret

0000113a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	e8 53       	subi	r30, 0x38	; 56
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1148:	fc 01       	movw	r30, r24
    114a:	e4 52       	subi	r30, 0x24	; 36
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1150:	88 23       	and	r24, r24
    1152:	61 f1       	breq	.+88     	; 0x11ac <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	ec 5f       	subi	r30, 0xFC	; 252
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	c5 91       	lpm	r28, Z+
    1162:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1164:	fc 01       	movw	r30, r24
    1166:	e6 50       	subi	r30, 0x06	; 6
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	a5 91       	lpm	r26, Z+
    116c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    116e:	61 11       	cpse	r22, r1
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1172:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1174:	f8 94       	cli
		*reg &= ~bit;
    1176:	88 81       	ld	r24, Y
    1178:	20 95       	com	r18
    117a:	82 23       	and	r24, r18
    117c:	88 83       	st	Y, r24
		*out &= ~bit;
    117e:	ec 91       	ld	r30, X
    1180:	2e 23       	and	r18, r30
    1182:	0b c0       	rjmp	.+22     	; 0x119a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1184:	62 30       	cpi	r22, 0x02	; 2
    1186:	61 f4       	brne	.+24     	; 0x11a0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1188:	9f b7       	in	r25, 0x3f	; 63
                cli();
    118a:	f8 94       	cli
		*reg &= ~bit;
    118c:	88 81       	ld	r24, Y
    118e:	32 2f       	mov	r19, r18
    1190:	30 95       	com	r19
    1192:	83 23       	and	r24, r19
    1194:	88 83       	st	Y, r24
		*out |= bit;
    1196:	ec 91       	ld	r30, X
    1198:	2e 2b       	or	r18, r30
    119a:	2c 93       	st	X, r18
		SREG = oldSREG;
    119c:	9f bf       	out	0x3f, r25	; 63
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    11a0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    11a2:	f8 94       	cli
		*reg |= bit;
    11a4:	e8 81       	ld	r30, Y
    11a6:	2e 2b       	or	r18, r30
    11a8:	28 83       	st	Y, r18
		SREG = oldSREG;
    11aa:	8f bf       	out	0x3f, r24	; 63
	}
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	ec 54       	subi	r30, 0x4C	; 76
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11c4:	f9 01       	movw	r30, r18
    11c6:	e8 53       	subi	r30, 0x38	; 56
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11cc:	f9 01       	movw	r30, r18
    11ce:	e4 52       	subi	r30, 0x24	; 36
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11d4:	cc 23       	and	r28, r28
    11d6:	c1 f0       	breq	.+48     	; 0x1208 <digitalWrite+0x56>
    11d8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11da:	81 11       	cpse	r24, r1
    11dc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <turnOffPWM>

	out = portOutputRegister(port);
    11e0:	ec 2f       	mov	r30, r28
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e6 50       	subi	r30, 0x06	; 6
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	a5 91       	lpm	r26, Z+
    11ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11f0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11f2:	f8 94       	cli

	if (val == LOW) {
    11f4:	11 11       	cpse	r17, r1
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <digitalWrite+0x4e>
		*out &= ~bit;
    11f8:	8c 91       	ld	r24, X
    11fa:	d0 95       	com	r29
    11fc:	d8 23       	and	r29, r24
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1200:	ec 91       	ld	r30, X
    1202:	de 2b       	or	r29, r30
    1204:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1206:	9f bf       	out	0x3f, r25	; 63
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	08 95       	ret

00001210 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f9 01       	movw	r30, r18
    121a:	ec 54       	subi	r30, 0x4C	; 76
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1220:	f9 01       	movw	r30, r18
    1222:	e8 53       	subi	r30, 0x38	; 56
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1228:	f9 01       	movw	r30, r18
    122a:	e4 52       	subi	r30, 0x24	; 36
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1230:	cc 23       	and	r28, r28
    1232:	91 f0       	breq	.+36     	; 0x1258 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1234:	81 11       	cpse	r24, r1
    1236:	0e 94 74 08 	call	0x10e8	; 0x10e8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    123a:	ec 2f       	mov	r30, r28
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	e0 51       	subi	r30, 0x10	; 16
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	a5 91       	lpm	r26, Z+
    1248:	b4 91       	lpm	r27, Z
    124a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    124c:	ed 23       	and	r30, r29
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	21 f4       	brne	.+8      	; 0x125c <digitalRead+0x4c>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <digitalRead+0x4c>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1262:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    1266:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	b9 f4       	brne	.+46     	; 0x129e <_ZN14SoftwareSerial4readEv+0x3c>
    1270:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    1274:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1278:	98 17       	cp	r25, r24
    127a:	89 f0       	breq	.+34     	; 0x129e <_ZN14SoftwareSerial4readEv+0x3c>
    127c:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	e2 55       	subi	r30, 0x52	; 82
    1284:	fd 4f       	sbci	r31, 0xFD	; 253
    1286:	80 81       	ld	r24, Z
    1288:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	2f 73       	andi	r18, 0x3F	; 63
    1294:	33 27       	eor	r19, r19
    1296:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	08 95       	ret
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	08 95       	ret

000012a4 <_ZN14SoftwareSerial5writeEh>:
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	dc 01       	movw	r26, r24
    12ac:	5c 96       	adiw	r26, 0x1c	; 28
    12ae:	8d 91       	ld	r24, X+
    12b0:	9c 91       	ld	r25, X
    12b2:	5d 97       	sbiw	r26, 0x1d	; 29
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <_ZN14SoftwareSerial5writeEh+0x22>
    12b8:	21 e0       	ldi	r18, 0x01	; 1
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	3c 93       	st	X, r19
    12c0:	2e 93       	st	-X, r18
    12c2:	12 97       	sbiw	r26, 0x02	; 2
    12c4:	3b c0       	rjmp	.+118    	; 0x133c <_ZN14SoftwareSerial5writeEh+0x98>
    12c6:	51 96       	adiw	r26, 0x11	; 17
    12c8:	ed 91       	ld	r30, X+
    12ca:	fc 91       	ld	r31, X
    12cc:	52 97       	sbiw	r26, 0x12	; 18
    12ce:	50 96       	adiw	r26, 0x10	; 16
    12d0:	2c 91       	ld	r18, X
    12d2:	50 97       	sbiw	r26, 0x10	; 16
    12d4:	32 2f       	mov	r19, r18
    12d6:	30 95       	com	r19
    12d8:	1f b7       	in	r17, 0x3f	; 63
    12da:	5e 96       	adiw	r26, 0x1e	; 30
    12dc:	4c 91       	ld	r20, X
    12de:	5e 97       	sbiw	r26, 0x1e	; 30
    12e0:	74 2f       	mov	r23, r20
    12e2:	72 70       	andi	r23, 0x02	; 2
    12e4:	41 fd       	sbrc	r20, 1
    12e6:	60 95       	com	r22
    12e8:	f8 94       	cli
    12ea:	40 81       	ld	r20, Z
    12ec:	77 23       	and	r23, r23
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <_ZN14SoftwareSerial5writeEh+0x50>
    12f0:	42 2b       	or	r20, r18
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <_ZN14SoftwareSerial5writeEh+0x52>
    12f4:	43 23       	and	r20, r19
    12f6:	40 83       	st	Z, r20
    12f8:	ec 01       	movw	r28, r24
    12fa:	21 97       	sbiw	r28, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <_ZN14SoftwareSerial5writeEh+0x56>
    12fe:	48 e0       	ldi	r20, 0x08	; 8
    1300:	50 81       	ld	r21, Z
    1302:	60 ff       	sbrs	r22, 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <_ZN14SoftwareSerial5writeEh+0x66>
    1306:	52 2b       	or	r21, r18
    1308:	01 c0       	rjmp	.+2      	; 0x130c <_ZN14SoftwareSerial5writeEh+0x68>
    130a:	53 23       	and	r21, r19
    130c:	50 83       	st	Z, r21
    130e:	ec 01       	movw	r28, r24
    1310:	21 97       	sbiw	r28, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <_ZN14SoftwareSerial5writeEh+0x6c>
    1314:	66 95       	lsr	r22
    1316:	41 50       	subi	r20, 0x01	; 1
    1318:	99 f7       	brne	.-26     	; 0x1300 <_ZN14SoftwareSerial5writeEh+0x5c>
    131a:	80 81       	ld	r24, Z
    131c:	77 23       	and	r23, r23
    131e:	19 f0       	breq	.+6      	; 0x1326 <_ZN14SoftwareSerial5writeEh+0x82>
    1320:	83 23       	and	r24, r19
    1322:	80 83       	st	Z, r24
    1324:	02 c0       	rjmp	.+4      	; 0x132a <_ZN14SoftwareSerial5writeEh+0x86>
    1326:	28 2b       	or	r18, r24
    1328:	20 83       	st	Z, r18
    132a:	1f bf       	out	0x3f, r17	; 63
    132c:	5c 96       	adiw	r26, 0x1c	; 28
    132e:	8d 91       	ld	r24, X+
    1330:	9c 91       	ld	r25, X
    1332:	5d 97       	sbiw	r26, 0x1d	; 29
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <_ZN14SoftwareSerial5writeEh+0x90>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	08 95       	ret

00001344 <_ZN14SoftwareSerial5flushEv>:
    1344:	08 95       	ret

00001346 <_ZN14SoftwareSerial4peekEv>:
    1346:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    134a:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	71 f4       	brne	.+28     	; 0x1370 <_ZN14SoftwareSerial4peekEv+0x2a>
    1354:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    1358:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    135c:	98 17       	cp	r25, r24
    135e:	41 f0       	breq	.+16     	; 0x1370 <_ZN14SoftwareSerial4peekEv+0x2a>
    1360:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	e2 55       	subi	r30, 0x52	; 82
    1368:	fd 4f       	sbci	r31, 0xFD	; 253
    136a:	80 81       	ld	r24, Z
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	08 95       	ret
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <_ZN14SoftwareSerial9availableEv>:
    1376:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    137a:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	71 f4       	brne	.+28     	; 0x13a0 <_ZN14SoftwareSerial9availableEv+0x2a>
    1384:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1388:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	80 5c       	subi	r24, 0xC0	; 192
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	82 1b       	sub	r24, r18
    1394:	91 09       	sbc	r25, r1
    1396:	60 e4       	ldi	r22, 0x40	; 64
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	0e 94 36 13 	call	0x266c	; 0x266c <__divmodhi4>
    139e:	08 95       	ret
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	08 95       	ret

000013a6 <_ZN14SoftwareSerial13stopListeningEv>:
    13a6:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    13aa:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    13ae:	e8 17       	cp	r30, r24
    13b0:	f9 07       	cpc	r31, r25
    13b2:	69 f4       	brne	.+26     	; 0x13ce <_ZN14SoftwareSerial13stopListeningEv+0x28>
    13b4:	a3 89       	ldd	r26, Z+19	; 0x13
    13b6:	b4 89       	ldd	r27, Z+20	; 0x14
    13b8:	9c 91       	ld	r25, X
    13ba:	85 89       	ldd	r24, Z+21	; 0x15
    13bc:	80 95       	com	r24
    13be:	89 23       	and	r24, r25
    13c0:	8c 93       	st	X, r24
    13c2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    13c6:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	08 95       	ret
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <_ZN14SoftwareSerial6listenEv>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13dc:	89 2b       	or	r24, r25
    13de:	f1 f0       	breq	.+60     	; 0x141c <_ZN14SoftwareSerial6listenEv+0x4a>
    13e0:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    13e4:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    13e8:	c8 17       	cp	r28, r24
    13ea:	d9 07       	cpc	r29, r25
    13ec:	b9 f0       	breq	.+46     	; 0x141c <_ZN14SoftwareSerial6listenEv+0x4a>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <_ZN14SoftwareSerial6listenEv+0x24>
    13f2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN14SoftwareSerial13stopListeningEv>
    13f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	8e 8f       	std	Y+30, r24	; 0x1e
    13fc:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1400:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    1404:	d0 93 ef 02 	sts	0x02EF, r29	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    1408:	c0 93 ee 02 	sts	0x02EE, r28	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    140c:	eb 89       	ldd	r30, Y+19	; 0x13
    140e:	fc 89       	ldd	r31, Y+20	; 0x14
    1410:	90 81       	ld	r25, Z
    1412:	8d 89       	ldd	r24, Y+21	; 0x15
    1414:	89 2b       	or	r24, r25
    1416:	80 83       	st	Z, r24
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	01 c0       	rjmp	.+2      	; 0x141e <_ZN14SoftwareSerial6listenEv+0x4c>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <__vector_3>:
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <_ZN14SoftwareSerial13active_objectE>
    144a:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <_ZN14SoftwareSerial13active_objectE+0x1>
    144e:	30 97       	sbiw	r30, 0x00	; 0
    1450:	09 f4       	brne	.+2      	; 0x1454 <__vector_3+0x30>
    1452:	51 c0       	rjmp	.+162    	; 0x14f6 <__vector_3+0xd2>
    1454:	96 8d       	ldd	r25, Z+30	; 0x1e
    1456:	a6 85       	ldd	r26, Z+14	; 0x0e
    1458:	b7 85       	ldd	r27, Z+15	; 0x0f
    145a:	85 85       	ldd	r24, Z+13	; 0x0d
    145c:	91 ff       	sbrs	r25, 1
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <__vector_3+0x44>
    1460:	9c 91       	ld	r25, X
    1462:	89 23       	and	r24, r25
    1464:	29 f4       	brne	.+10     	; 0x1470 <__vector_3+0x4c>
    1466:	47 c0       	rjmp	.+142    	; 0x14f6 <__vector_3+0xd2>
    1468:	9c 91       	ld	r25, X
    146a:	89 23       	and	r24, r25
    146c:	09 f0       	breq	.+2      	; 0x1470 <__vector_3+0x4c>
    146e:	43 c0       	rjmp	.+134    	; 0x14f6 <__vector_3+0xd2>
    1470:	a3 89       	ldd	r26, Z+19	; 0x13
    1472:	b4 89       	ldd	r27, Z+20	; 0x14
    1474:	9c 91       	ld	r25, X
    1476:	85 89       	ldd	r24, Z+21	; 0x15
    1478:	80 95       	com	r24
    147a:	89 23       	and	r24, r25
    147c:	8c 93       	st	X, r24
    147e:	86 89       	ldd	r24, Z+22	; 0x16
    1480:	97 89       	ldd	r25, Z+23	; 0x17
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <__vector_3+0x5e>
    1486:	60 8d       	ldd	r22, Z+24	; 0x18
    1488:	71 8d       	ldd	r23, Z+25	; 0x19
    148a:	a6 85       	ldd	r26, Z+14	; 0x0e
    148c:	b7 85       	ldd	r27, Z+15	; 0x0f
    148e:	55 85       	ldd	r21, Z+13	; 0x0d
    1490:	38 e0       	ldi	r19, 0x08	; 8
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	cb 01       	movw	r24, r22
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <__vector_3+0x72>
    149a:	82 2f       	mov	r24, r18
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	95 95       	asr	r25
    14a0:	87 95       	ror	r24
    14a2:	28 2f       	mov	r18, r24
    14a4:	4c 91       	ld	r20, X
    14a6:	45 23       	and	r20, r21
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_3+0x88>
    14aa:	20 68       	ori	r18, 0x80	; 128
    14ac:	31 50       	subi	r19, 0x01	; 1
    14ae:	91 f7       	brne	.-28     	; 0x1494 <__vector_3+0x70>
    14b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b2:	81 fd       	sbrc	r24, 1
    14b4:	20 95       	com	r18
    14b6:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	8f 73       	andi	r24, 0x3F	; 63
    14c0:	99 27       	eor	r25, r25
    14c2:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <_ZN14SoftwareSerial20_receive_buffer_headE>
    14c6:	38 17       	cp	r19, r24
    14c8:	49 f0       	breq	.+18     	; 0x14dc <__vector_3+0xb8>
    14ca:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	a2 55       	subi	r26, 0x52	; 82
    14d2:	bd 4f       	sbci	r27, 0xFD	; 253
    14d4:	2c 93       	st	X, r18
    14d6:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <__vector_3+0xbe>
    14dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	86 8f       	std	Z+30, r24	; 0x1e
    14e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    14e4:	93 8d       	ldd	r25, Z+27	; 0x1b
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <__vector_3+0xc2>
    14ea:	a3 89       	ldd	r26, Z+19	; 0x13
    14ec:	b4 89       	ldd	r27, Z+20	; 0x14
    14ee:	9c 91       	ld	r25, X
    14f0:	85 89       	ldd	r24, Z+21	; 0x15
    14f2:	89 2b       	or	r24, r25
    14f4:	8c 93       	st	X, r24
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <_ZN14SoftwareSerial5setTXEh>:
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	16 2f       	mov	r17, r22
    1522:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1524:	66 95       	lsr	r22
    1526:	61 70       	andi	r22, 0x01	; 1
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	68 27       	eor	r22, r24
    152c:	81 2f       	mov	r24, r17
    152e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	81 2f       	mov	r24, r17
    1536:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    153a:	81 2f       	mov	r24, r17
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	fc 01       	movw	r30, r24
    1540:	e8 53       	subi	r30, 0x38	; 56
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	e4 91       	lpm	r30, Z
    1546:	e8 8b       	std	Y+16, r30	; 0x10
    1548:	fc 01       	movw	r30, r24
    154a:	e4 52       	subi	r30, 0x24	; 36
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	e4 91       	lpm	r30, Z
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e6 50       	subi	r30, 0x06	; 6
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	85 91       	lpm	r24, Z+
    155c:	94 91       	lpm	r25, Z
    155e:	9a 8b       	std	Y+18, r25	; 0x12
    1560:	89 8b       	std	Y+17, r24	; 0x11
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	08 95       	ret

0000156a <_ZN14SoftwareSerial5setRXEh>:
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
    1572:	16 2f       	mov	r17, r22
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	81 2f       	mov	r24, r17
    1578:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    157c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    157e:	81 fd       	sbrc	r24, 1
    1580:	04 c0       	rjmp	.+8      	; 0x158a <_ZN14SoftwareSerial5setRXEh+0x20>
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	81 2f       	mov	r24, r17
    1586:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
    158a:	1c 87       	std	Y+12, r17	; 0x0c
    158c:	81 2f       	mov	r24, r17
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	fc 01       	movw	r30, r24
    1592:	e8 53       	subi	r30, 0x38	; 56
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	e4 91       	lpm	r30, Z
    1598:	ed 87       	std	Y+13, r30	; 0x0d
    159a:	fc 01       	movw	r30, r24
    159c:	e4 52       	subi	r30, 0x24	; 36
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	e4 91       	lpm	r30, Z
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	e0 51       	subi	r30, 0x10	; 16
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	85 91       	lpm	r24, Z+
    15ae:	94 91       	lpm	r25, Z
    15b0:	9f 87       	std	Y+15, r25	; 0x0f
    15b2:	8e 87       	std	Y+14, r24	; 0x0e
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	08 95       	ret

000015bc <_ZN14SoftwareSerialC1Ehhb>:
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	ec 01       	movw	r28, r24
    15c4:	16 2f       	mov	r17, r22
    15c6:	1b 82       	std	Y+3, r1	; 0x03
    15c8:	1a 82       	std	Y+2, r1	; 0x02
    15ca:	88 ee       	ldi	r24, 0xE8	; 232
    15cc:	93 e0       	ldi	r25, 0x03	; 3
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	8c 83       	std	Y+4, r24	; 0x04
    15d4:	9d 83       	std	Y+5, r25	; 0x05
    15d6:	ae 83       	std	Y+6, r26	; 0x06
    15d8:	bf 83       	std	Y+7, r27	; 0x07
    15da:	8a ec       	ldi	r24, 0xCA	; 202
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	99 83       	std	Y+1, r25	; 0x01
    15e0:	88 83       	st	Y, r24
    15e2:	1f 8a       	std	Y+23, r1	; 0x17
    15e4:	1e 8a       	std	Y+22, r1	; 0x16
    15e6:	19 8e       	std	Y+25, r1	; 0x19
    15e8:	18 8e       	std	Y+24, r1	; 0x18
    15ea:	1b 8e       	std	Y+27, r1	; 0x1b
    15ec:	1a 8e       	std	Y+26, r1	; 0x1a
    15ee:	1d 8e       	std	Y+29, r1	; 0x1d
    15f0:	1c 8e       	std	Y+28, r1	; 0x1c
    15f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15f4:	8e 7f       	andi	r24, 0xFE	; 254
    15f6:	20 fb       	bst	r18, 0
    15f8:	81 f9       	bld	r24, 1
    15fa:	8e 8f       	std	Y+30, r24	; 0x1e
    15fc:	64 2f       	mov	r22, r20
    15fe:	ce 01       	movw	r24, r28
    1600:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14SoftwareSerial5setTXEh>
    1604:	61 2f       	mov	r22, r17
    1606:	ce 01       	movw	r24, r28
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_ZN14SoftwareSerial5setRXEh>

00001612 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	ec 01       	movw	r28, r24
    1618:	9a 01       	movw	r18, r20
    161a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    161c:	1b 8e       	std	Y+27, r1	; 0x1b
    161e:	1a 8e       	std	Y+26, r1	; 0x1a
    1620:	19 8e       	std	Y+25, r1	; 0x19
    1622:	18 8e       	std	Y+24, r1	; 0x18
    1624:	1f 8a       	std	Y+23, r1	; 0x17
    1626:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	79 e0       	ldi	r23, 0x09	; 9
    162c:	8d e3       	ldi	r24, 0x3D	; 61
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1634:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1636:	24 30       	cpi	r18, 0x04	; 4
    1638:	31 05       	cpc	r19, r1
    163a:	18 f0       	brcs	.+6      	; 0x1642 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    163c:	c9 01       	movw	r24, r18
    163e:	03 97       	sbiw	r24, 0x03	; 3
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    1646:	9d 8f       	std	Y+29, r25	; 0x1d
    1648:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    164a:	6c 85       	ldd	r22, Y+12	; 0x0c
    164c:	66 31       	cpi	r22, 0x16	; 22
    164e:	08 f0       	brcs	.+2      	; 0x1652 <_ZN14SoftwareSerial5beginEl+0x40>
    1650:	69 c0       	rjmp	.+210    	; 0x1724 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1652:	c9 01       	movw	r24, r18
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1658:	84 31       	cpi	r24, 0x14	; 20
    165a:	91 05       	cpc	r25, r1
    165c:	10 f0       	brcs	.+4      	; 0x1662 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    165e:	43 97       	sbiw	r24, 0x13	; 19
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1666:	9f 8b       	std	Y+23, r25	; 0x17
    1668:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    166a:	36 97       	sbiw	r30, 0x06	; 6
    166c:	18 f0       	brcs	.+6      	; 0x1674 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    166e:	c9 01       	movw	r24, r18
    1670:	05 97       	sbiw	r24, 0x05	; 5
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1678:	99 8f       	std	Y+25, r25	; 0x19
    167a:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    167c:	c9 01       	movw	r24, r18
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	28 0f       	add	r18, r24
    1684:	39 1f       	adc	r19, r25
    1686:	36 95       	lsr	r19
    1688:	27 95       	ror	r18
    168a:	36 95       	lsr	r19
    168c:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    168e:	2d 30       	cpi	r18, 0x0D	; 13
    1690:	31 05       	cpc	r19, r1
    1692:	18 f0       	brcs	.+6      	; 0x169a <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    1694:	2c 50       	subi	r18, 0x0C	; 12
    1696:	31 09       	sbc	r19, r1
    1698:	02 c0       	rjmp	.+4      	; 0x169e <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    169e:	3b 8f       	std	Y+27, r19	; 0x1b
    16a0:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    16a2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    16a6:	68 30       	cpi	r22, 0x08	; 8
    16a8:	50 f0       	brcs	.+20     	; 0x16be <_ZN14SoftwareSerial5beginEl+0xac>
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	6e 30       	cpi	r22, 0x0E	; 14
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <_ZN14SoftwareSerial5beginEl+0xa0>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <_ZN14SoftwareSerial5beginEl+0xa6>
    16b6:	88 0f       	add	r24, r24
    16b8:	2a 95       	dec	r18
    16ba:	ea f7       	brpl	.-6      	; 0x16b6 <_ZN14SoftwareSerial5beginEl+0xa4>
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <_ZN14SoftwareSerial5beginEl+0xae>
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	89 2b       	or	r24, r25
    16c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    16c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c8:	98 30       	cpi	r25, 0x08	; 8
    16ca:	38 f0       	brcs	.+14     	; 0x16da <_ZN14SoftwareSerial5beginEl+0xc8>
    16cc:	9e 30       	cpi	r25, 0x0E	; 14
    16ce:	40 f0       	brcs	.+16     	; 0x16e0 <_ZN14SoftwareSerial5beginEl+0xce>
    16d0:	96 31       	cpi	r25, 0x16	; 22
    16d2:	48 f0       	brcs	.+18     	; 0x16e6 <_ZN14SoftwareSerial5beginEl+0xd4>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	08 c0       	rjmp	.+16     	; 0x16ea <_ZN14SoftwareSerial5beginEl+0xd8>
    16da:	2d e6       	ldi	r18, 0x6D	; 109
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <_ZN14SoftwareSerial5beginEl+0xd8>
    16e0:	2b e6       	ldi	r18, 0x6B	; 107
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <_ZN14SoftwareSerial5beginEl+0xd8>
    16e6:	2c e6       	ldi	r18, 0x6C	; 108
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3c 8b       	std	Y+20, r19	; 0x14
    16ec:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    16ee:	98 30       	cpi	r25, 0x08	; 8
    16f0:	30 f4       	brcc	.+12     	; 0x16fe <_ZN14SoftwareSerial5beginEl+0xec>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <_ZN14SoftwareSerial5beginEl+0xe6>
    16f6:	88 0f       	add	r24, r24
    16f8:	9a 95       	dec	r25
    16fa:	ea f7       	brpl	.-6      	; 0x16f6 <_ZN14SoftwareSerial5beginEl+0xe4>
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <_ZN14SoftwareSerial5beginEl+0x108>
    16fe:	29 2f       	mov	r18, r25
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	9e 30       	cpi	r25, 0x0E	; 14
    1704:	18 f4       	brcc	.+6      	; 0x170c <_ZN14SoftwareSerial5beginEl+0xfa>
    1706:	28 50       	subi	r18, 0x08	; 8
    1708:	31 09       	sbc	r19, r1
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <_ZN14SoftwareSerial5beginEl+0xfe>
    170c:	2e 50       	subi	r18, 0x0E	; 14
    170e:	31 09       	sbc	r19, r1
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <_ZN14SoftwareSerial5beginEl+0x104>
    1714:	88 0f       	add	r24, r24
    1716:	2a 95       	dec	r18
    1718:	ea f7       	brpl	.-6      	; 0x1714 <_ZN14SoftwareSerial5beginEl+0x102>
    171a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    171c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    171e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1724:	ce 01       	movw	r24, r28
}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    172a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <_ZN14SoftwareSerial6listenEv>

0000172e <_ZN12AccelStepper4stepEl>:
}

float   AccelStepper::maxSpeed()
{
    return _maxSpeed;
}
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	dc 01       	movw	r26, r24
    1734:	13 96       	adiw	r26, 0x03	; 3
    1736:	ec 91       	ld	r30, X
    1738:	0e 2f       	mov	r16, r30
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	09 30       	cpi	r16, 0x09	; 9
    173e:	11 05       	cpc	r17, r1
    1740:	c0 f5       	brcc	.+112    	; 0x17b2 <_ZN12AccelStepper4stepEl+0x84>
    1742:	f8 01       	movw	r30, r16
    1744:	e6 5b       	subi	r30, 0xB6	; 182
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__tablejump2__>
    174c:	dc 01       	movw	r26, r24
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	00 84       	ldd	r0, Z+8	; 0x08
    1754:	f1 85       	ldd	r31, Z+9	; 0x09
    1756:	e0 2d       	mov	r30, r0
    1758:	29 c0       	rjmp	.+82     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    175a:	dc 01       	movw	r26, r24
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	02 84       	ldd	r0, Z+10	; 0x0a
    1762:	f3 85       	ldd	r31, Z+11	; 0x0b
    1764:	e0 2d       	mov	r30, r0
    1766:	22 c0       	rjmp	.+68     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    1768:	dc 01       	movw	r26, r24
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	04 84       	ldd	r0, Z+12	; 0x0c
    1770:	f5 85       	ldd	r31, Z+13	; 0x0d
    1772:	e0 2d       	mov	r30, r0
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    1776:	dc 01       	movw	r26, r24
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	06 84       	ldd	r0, Z+14	; 0x0e
    177e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1780:	e0 2d       	mov	r30, r0
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    1784:	dc 01       	movw	r26, r24
    1786:	ed 91       	ld	r30, X+
    1788:	fc 91       	ld	r31, X
    178a:	00 88       	ldd	r0, Z+16	; 0x10
    178c:	f1 89       	ldd	r31, Z+17	; 0x11
    178e:	e0 2d       	mov	r30, r0
    1790:	0d c0       	rjmp	.+26     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    1792:	dc 01       	movw	r26, r24
    1794:	ed 91       	ld	r30, X+
    1796:	fc 91       	ld	r31, X
    1798:	02 88       	ldd	r0, Z+18	; 0x12
    179a:	f3 89       	ldd	r31, Z+19	; 0x13
    179c:	e0 2d       	mov	r30, r0
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <_ZN12AccelStepper4stepEl+0x7e>
    17a0:	dc 01       	movw	r26, r24
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	04 88       	ldd	r0, Z+20	; 0x14
    17a8:	f5 89       	ldd	r31, Z+21	; 0x15
    17aa:	e0 2d       	mov	r30, r0
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	09 94       	ijmp
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <_ZN12AccelStepper5step6El>:
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	ec 01       	movw	r28, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	ba 01       	movw	r22, r20
    17c2:	26 e0       	ldi	r18, 0x06	; 6
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    17ce:	62 30       	cpi	r22, 0x02	; 2
    17d0:	71 05       	cpc	r23, r1
    17d2:	81 05       	cpc	r24, r1
    17d4:	91 05       	cpc	r25, r1
    17d6:	59 f1       	breq	.+86     	; 0x182e <_ZN12AccelStepper5step6El+0x76>
    17d8:	8c f4       	brge	.+34     	; 0x17fc <_ZN12AccelStepper5step6El+0x44>
    17da:	61 15       	cp	r22, r1
    17dc:	71 05       	cpc	r23, r1
    17de:	81 05       	cpc	r24, r1
    17e0:	91 05       	cpc	r25, r1
    17e2:	f1 f0       	breq	.+60     	; 0x1820 <_ZN12AccelStepper5step6El+0x68>
    17e4:	61 30       	cpi	r22, 0x01	; 1
    17e6:	71 05       	cpc	r23, r1
    17e8:	81 05       	cpc	r24, r1
    17ea:	91 05       	cpc	r25, r1
    17ec:	c1 f5       	brne	.+112    	; 0x185e <_ZN12AccelStepper5step6El+0xa6>
    17ee:	e8 81       	ld	r30, Y
    17f0:	f9 81       	ldd	r31, Y+1	; 0x01
    17f2:	04 80       	ldd	r0, Z+4	; 0x04
    17f4:	f5 81       	ldd	r31, Z+5	; 0x05
    17f6:	e0 2d       	mov	r30, r0
    17f8:	65 e0       	ldi	r22, 0x05	; 5
    17fa:	2d c0       	rjmp	.+90     	; 0x1856 <_ZN12AccelStepper5step6El+0x9e>
    17fc:	64 30       	cpi	r22, 0x04	; 4
    17fe:	71 05       	cpc	r23, r1
    1800:	81 05       	cpc	r24, r1
    1802:	91 05       	cpc	r25, r1
    1804:	11 f1       	breq	.+68     	; 0x184a <_ZN12AccelStepper5step6El+0x92>
    1806:	d4 f0       	brlt	.+52     	; 0x183c <_ZN12AccelStepper5step6El+0x84>
    1808:	65 30       	cpi	r22, 0x05	; 5
    180a:	71 05       	cpc	r23, r1
    180c:	81 05       	cpc	r24, r1
    180e:	91 05       	cpc	r25, r1
    1810:	31 f5       	brne	.+76     	; 0x185e <_ZN12AccelStepper5step6El+0xa6>
    1812:	e8 81       	ld	r30, Y
    1814:	f9 81       	ldd	r31, Y+1	; 0x01
    1816:	04 80       	ldd	r0, Z+4	; 0x04
    1818:	f5 81       	ldd	r31, Z+5	; 0x05
    181a:	e0 2d       	mov	r30, r0
    181c:	66 e0       	ldi	r22, 0x06	; 6
    181e:	1b c0       	rjmp	.+54     	; 0x1856 <_ZN12AccelStepper5step6El+0x9e>
    1820:	e8 81       	ld	r30, Y
    1822:	f9 81       	ldd	r31, Y+1	; 0x01
    1824:	04 80       	ldd	r0, Z+4	; 0x04
    1826:	f5 81       	ldd	r31, Z+5	; 0x05
    1828:	e0 2d       	mov	r30, r0
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <_ZN12AccelStepper5step6El+0x9e>
    182e:	e8 81       	ld	r30, Y
    1830:	f9 81       	ldd	r31, Y+1	; 0x01
    1832:	04 80       	ldd	r0, Z+4	; 0x04
    1834:	f5 81       	ldd	r31, Z+5	; 0x05
    1836:	e0 2d       	mov	r30, r0
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <_ZN12AccelStepper5step6El+0x9e>
    183c:	e8 81       	ld	r30, Y
    183e:	f9 81       	ldd	r31, Y+1	; 0x01
    1840:	04 80       	ldd	r0, Z+4	; 0x04
    1842:	f5 81       	ldd	r31, Z+5	; 0x05
    1844:	e0 2d       	mov	r30, r0
    1846:	63 e0       	ldi	r22, 0x03	; 3
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <_ZN12AccelStepper5step6El+0x9e>
    184a:	e8 81       	ld	r30, Y
    184c:	f9 81       	ldd	r31, Y+1	; 0x01
    184e:	04 80       	ldd	r0, Z+4	; 0x04
    1850:	f5 81       	ldd	r31, Z+5	; 0x05
    1852:	e0 2d       	mov	r30, r0
    1854:	62 e0       	ldi	r22, 0x02	; 2
    1856:	ce 01       	movw	r24, r28
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	09 94       	ijmp
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <_ZN12AccelStepper5step8El>:
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	47 70       	andi	r20, 0x07	; 7
    186a:	55 27       	eor	r21, r21
    186c:	66 27       	eor	r22, r22
    186e:	77 27       	eor	r23, r23
    1870:	fa 01       	movw	r30, r20
    1872:	31 97       	sbiw	r30, 0x01	; 1
    1874:	ec 01       	movw	r28, r24
    1876:	a8 81       	ld	r26, Y
    1878:	b9 81       	ldd	r27, Y+1	; 0x01
    187a:	e7 30       	cpi	r30, 0x07	; 7
    187c:	f1 05       	cpc	r31, r1
    187e:	20 f4       	brcc	.+8      	; 0x1888 <_ZN12AccelStepper5step8El+0x24>
    1880:	ed 5a       	subi	r30, 0xAD	; 173
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__tablejump2__>
    1888:	14 96       	adiw	r26, 0x04	; 4
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	15 97       	sbiw	r26, 0x05	; 5
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	29 c0       	rjmp	.+82     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    1894:	14 96       	adiw	r26, 0x04	; 4
    1896:	ed 91       	ld	r30, X+
    1898:	fc 91       	ld	r31, X
    189a:	15 97       	sbiw	r26, 0x05	; 5
    189c:	65 e0       	ldi	r22, 0x05	; 5
    189e:	23 c0       	rjmp	.+70     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18a0:	14 96       	adiw	r26, 0x04	; 4
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	15 97       	sbiw	r26, 0x05	; 5
    18a8:	64 e0       	ldi	r22, 0x04	; 4
    18aa:	1d c0       	rjmp	.+58     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	15 97       	sbiw	r26, 0x05	; 5
    18b4:	66 e0       	ldi	r22, 0x06	; 6
    18b6:	17 c0       	rjmp	.+46     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18b8:	14 96       	adiw	r26, 0x04	; 4
    18ba:	ed 91       	ld	r30, X+
    18bc:	fc 91       	ld	r31, X
    18be:	15 97       	sbiw	r26, 0x05	; 5
    18c0:	62 e0       	ldi	r22, 0x02	; 2
    18c2:	11 c0       	rjmp	.+34     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18c4:	14 96       	adiw	r26, 0x04	; 4
    18c6:	ed 91       	ld	r30, X+
    18c8:	fc 91       	ld	r31, X
    18ca:	15 97       	sbiw	r26, 0x05	; 5
    18cc:	6a e0       	ldi	r22, 0x0A	; 10
    18ce:	0b c0       	rjmp	.+22     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18d0:	14 96       	adiw	r26, 0x04	; 4
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	15 97       	sbiw	r26, 0x05	; 5
    18d8:	68 e0       	ldi	r22, 0x08	; 8
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <_ZN12AccelStepper5step8El+0x82>
    18dc:	14 96       	adiw	r26, 0x04	; 4
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	15 97       	sbiw	r26, 0x05	; 5
    18e4:	69 e0       	ldi	r22, 0x09	; 9
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	09 94       	ijmp

000018ec <_ZN12AccelStepper13setOutputPinsEh>:
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	94 30       	cpi	r25, 0x04	; 4
    1902:	41 f0       	breq	.+16     	; 0x1914 <_ZN12AccelStepper13setOutputPinsEh+0x28>
    1904:	98 30       	cpi	r25, 0x08	; 8
    1906:	31 f0       	breq	.+12     	; 0x1914 <_ZN12AccelStepper13setOutputPinsEh+0x28>
    1908:	93 30       	cpi	r25, 0x03	; 3
    190a:	31 f0       	breq	.+12     	; 0x1918 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    190c:	96 30       	cpi	r25, 0x06	; 6
    190e:	21 f0       	breq	.+8      	; 0x1918 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    1910:	12 e0       	ldi	r17, 0x02	; 2
    1912:	03 c0       	rjmp	.+6      	; 0x191a <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    1914:	14 e0       	ldi	r17, 0x04	; 4
    1916:	01 c0       	rjmp	.+2      	; 0x191a <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    1918:	13 e0       	ldi	r17, 0x03	; 3
    191a:	24 96       	adiw	r28, 0x04	; 4
    191c:	e1 2c       	mov	r14, r1
    191e:	f1 2c       	mov	r15, r1
    1920:	c6 2e       	mov	r12, r22
    1922:	d1 2c       	mov	r13, r1
    1924:	01 e0       	ldi	r16, 0x01	; 1
    1926:	c6 01       	movw	r24, r12
    1928:	0e 2c       	mov	r0, r14
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <_ZN12AccelStepper13setOutputPinsEh+0x44>
    192c:	95 95       	asr	r25
    192e:	87 95       	ror	r24
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <_ZN12AccelStepper13setOutputPinsEh+0x40>
    1934:	6c 81       	ldd	r22, Y+4	; 0x04
    1936:	80 fd       	sbrc	r24, 0
    1938:	60 27       	eor	r22, r16
    193a:	89 91       	ld	r24, Y+
    193c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	e8 1a       	sub	r14, r24
    1944:	f8 0a       	sbc	r15, r24
    1946:	e1 16       	cp	r14, r17
    1948:	70 f3       	brcs	.-36     	; 0x1926 <_ZN12AccelStepper13setOutputPinsEh+0x3a>
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	08 95       	ret

0000195c <_ZN12AccelStepper5step1El>:
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	ec 01       	movw	r28, r24
    1962:	e8 81       	ld	r30, Y
    1964:	f9 81       	ldd	r31, Y+1	; 0x01
    1966:	04 80       	ldd	r0, Z+4	; 0x04
    1968:	f5 81       	ldd	r31, Z+5	; 0x05
    196a:	e0 2d       	mov	r30, r0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	81 11       	cpse	r24, r1
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <_ZN12AccelStepper5step1El+0x1a>
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <_ZN12AccelStepper5step1El+0x1c>
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	ce 01       	movw	r24, r28
    197a:	09 95       	icall
    197c:	e8 81       	ld	r30, Y
    197e:	f9 81       	ldd	r31, Y+1	; 0x01
    1980:	04 80       	ldd	r0, Z+4	; 0x04
    1982:	f5 81       	ldd	r31, Z+5	; 0x05
    1984:	e0 2d       	mov	r30, r0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	81 11       	cpse	r24, r1
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <_ZN12AccelStepper5step1El+0x34>
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <_ZN12AccelStepper5step1El+0x36>
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	ce 01       	movw	r24, r28
    1994:	09 95       	icall
    1996:	8c a5       	ldd	r24, Y+44	; 0x2c
    1998:	9d a5       	ldd	r25, Y+45	; 0x2d
    199a:	0e 94 2e 08 	call	0x105c	; 0x105c <delayMicroseconds>
    199e:	e8 81       	ld	r30, Y
    19a0:	f9 81       	ldd	r31, Y+1	; 0x01
    19a2:	04 80       	ldd	r0, Z+4	; 0x04
    19a4:	f5 81       	ldd	r31, Z+5	; 0x05
    19a6:	e0 2d       	mov	r30, r0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	81 11       	cpse	r24, r1
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <_ZN12AccelStepper5step1El+0x56>
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <_ZN12AccelStepper5step1El+0x58>
    19b2:	62 e0       	ldi	r22, 0x02	; 2
    19b4:	ce 01       	movw	r24, r28
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	09 94       	ijmp

000019bc <_ZN12AccelStepper13enableOutputsEv>:
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	fc 01       	movw	r30, r24
    19c2:	23 81       	ldd	r18, Z+3	; 0x03
    19c4:	22 23       	and	r18, r18
    19c6:	59 f1       	breq	.+86     	; 0x1a1e <_ZN12AccelStepper13enableOutputsEv+0x62>
    19c8:	ec 01       	movw	r28, r24
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	84 81       	ldd	r24, Z+4	; 0x04
    19ce:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	84 30       	cpi	r24, 0x04	; 4
    19de:	11 f0       	breq	.+4      	; 0x19e4 <_ZN12AccelStepper13enableOutputsEv+0x28>
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	39 f4       	brne	.+14     	; 0x19f2 <_ZN12AccelStepper13enableOutputsEv+0x36>
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <_ZN12AccelStepper13enableOutputsEv+0x42>
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	11 f0       	breq	.+4      	; 0x19fa <_ZN12AccelStepper13enableOutputsEv+0x3e>
    19f6:	86 30       	cpi	r24, 0x06	; 6
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <_ZN12AccelStepper13enableOutputsEv+0x46>
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    1a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a04:	8f 3f       	cpi	r24, 0xFF	; 255
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <_ZN12AccelStepper13enableOutputsEv+0x62>
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    1a0e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	68 27       	eor	r22, r24
    1a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <_ZN12AccelStepper14disableOutputsEv>:
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	fc 01       	movw	r30, r24
    1a2a:	23 81       	ldd	r18, Z+3	; 0x03
    1a2c:	22 23       	and	r18, r18
    1a2e:	a9 f0       	breq	.+42     	; 0x1a5a <_ZN12AccelStepper14disableOutputsEv+0x36>
    1a30:	ec 01       	movw	r28, r24
    1a32:	01 90       	ld	r0, Z+
    1a34:	f0 81       	ld	r31, Z
    1a36:	e0 2d       	mov	r30, r0
    1a38:	04 80       	ldd	r0, Z+4	; 0x04
    1a3a:	f5 81       	ldd	r31, Z+5	; 0x05
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	09 95       	icall
    1a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a44:	8f 3f       	cpi	r24, 0xFF	; 255
    1a46:	49 f0       	breq	.+18     	; 0x1a5a <_ZN12AccelStepper14disableOutputsEv+0x36>
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
    1a4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <_ZN12AccelStepper5step4El>:
    1a60:	43 70       	andi	r20, 0x03	; 3
    1a62:	55 27       	eor	r21, r21
    1a64:	66 27       	eor	r22, r22
    1a66:	77 27       	eor	r23, r23
    1a68:	dc 01       	movw	r26, r24
    1a6a:	ed 91       	ld	r30, X+
    1a6c:	fc 91       	ld	r31, X
    1a6e:	04 80       	ldd	r0, Z+4	; 0x04
    1a70:	f5 81       	ldd	r31, Z+5	; 0x05
    1a72:	e0 2d       	mov	r30, r0
    1a74:	42 30       	cpi	r20, 0x02	; 2
    1a76:	51 05       	cpc	r21, r1
    1a78:	61 05       	cpc	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <_ZN12AccelStepper5step4El+0x3a>
    1a7e:	43 30       	cpi	r20, 0x03	; 3
    1a80:	51 05       	cpc	r21, r1
    1a82:	61 05       	cpc	r22, r1
    1a84:	71 05       	cpc	r23, r1
    1a86:	59 f0       	breq	.+22     	; 0x1a9e <_ZN12AccelStepper5step4El+0x3e>
    1a88:	41 30       	cpi	r20, 0x01	; 1
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	61 05       	cpc	r22, r1
    1a8e:	71 05       	cpc	r23, r1
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <_ZN12AccelStepper5step4El+0x36>
    1a92:	65 e0       	ldi	r22, 0x05	; 5
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <_ZN12AccelStepper5step4El+0x40>
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <_ZN12AccelStepper5step4El+0x40>
    1a9a:	6a e0       	ldi	r22, 0x0A	; 10
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <_ZN12AccelStepper5step4El+0x40>
    1a9e:	69 e0       	ldi	r22, 0x09	; 9
    1aa0:	09 94       	ijmp

00001aa2 <_ZN12AccelStepper5step3El>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	ba 01       	movw	r22, r20
    1aac:	23 e0       	ldi	r18, 0x03	; 3
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodsi4>
    1ab8:	61 30       	cpi	r22, 0x01	; 1
    1aba:	71 05       	cpc	r23, r1
    1abc:	81 05       	cpc	r24, r1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <_ZN12AccelStepper5step3El+0x40>
    1ac2:	62 30       	cpi	r22, 0x02	; 2
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	81 05       	cpc	r24, r1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	91 f0       	breq	.+36     	; 0x1af0 <_ZN12AccelStepper5step3El+0x4e>
    1acc:	67 2b       	or	r22, r23
    1ace:	68 2b       	or	r22, r24
    1ad0:	69 2b       	or	r22, r25
    1ad2:	c1 f4       	brne	.+48     	; 0x1b04 <_ZN12AccelStepper5step3El+0x62>
    1ad4:	e8 81       	ld	r30, Y
    1ad6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad8:	04 80       	ldd	r0, Z+4	; 0x04
    1ada:	f5 81       	ldd	r31, Z+5	; 0x05
    1adc:	e0 2d       	mov	r30, r0
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	0d c0       	rjmp	.+26     	; 0x1afc <_ZN12AccelStepper5step3El+0x5a>
    1ae2:	e8 81       	ld	r30, Y
    1ae4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae6:	04 80       	ldd	r0, Z+4	; 0x04
    1ae8:	f5 81       	ldd	r31, Z+5	; 0x05
    1aea:	e0 2d       	mov	r30, r0
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_ZN12AccelStepper5step3El+0x5a>
    1af0:	e8 81       	ld	r30, Y
    1af2:	f9 81       	ldd	r31, Y+1	; 0x01
    1af4:	04 80       	ldd	r0, Z+4	; 0x04
    1af6:	f5 81       	ldd	r31, Z+5	; 0x05
    1af8:	e0 2d       	mov	r30, r0
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	ce 01       	movw	r24, r28
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	09 94       	ijmp
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <_ZN12AccelStepper5step2El>:
    1b0a:	43 70       	andi	r20, 0x03	; 3
    1b0c:	55 27       	eor	r21, r21
    1b0e:	66 27       	eor	r22, r22
    1b10:	77 27       	eor	r23, r23
    1b12:	dc 01       	movw	r26, r24
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	04 80       	ldd	r0, Z+4	; 0x04
    1b1a:	f5 81       	ldd	r31, Z+5	; 0x05
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	42 30       	cpi	r20, 0x02	; 2
    1b20:	51 05       	cpc	r21, r1
    1b22:	61 05       	cpc	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <_ZN12AccelStepper5step2El+0x3a>
    1b28:	43 30       	cpi	r20, 0x03	; 3
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	61 05       	cpc	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <_ZN12AccelStepper5step2El+0x3e>
    1b32:	41 30       	cpi	r20, 0x01	; 1
    1b34:	51 05       	cpc	r21, r1
    1b36:	61 05       	cpc	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <_ZN12AccelStepper5step2El+0x36>
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <_ZN12AccelStepper5step2El+0x40>
    1b40:	63 e0       	ldi	r22, 0x03	; 3
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <_ZN12AccelStepper5step2El+0x40>
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <_ZN12AccelStepper5step2El+0x40>
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	09 94       	ijmp

00001b4c <_ZN12AccelStepper5step0El>:
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	ec 01       	movw	r28, r24
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	6c 89       	ldd	r22, Y+20	; 0x14
    1b5a:	7d 89       	ldd	r23, Y+21	; 0x15
    1b5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b5e:	9f 89       	ldd	r25, Y+23	; 0x17
    1b60:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__gesf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	1c f4       	brge	.+6      	; 0x1b6e <_ZN12AccelStepper5step0El+0x22>
    1b68:	e8 a9       	ldd	r30, Y+48	; 0x30
    1b6a:	f9 a9       	ldd	r31, Y+49	; 0x31
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <_ZN12AccelStepper5step0El+0x26>
    1b6e:	ea a9       	ldd	r30, Y+50	; 0x32
    1b70:	fb a9       	ldd	r31, Y+51	; 0x33
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	09 94       	ijmp

00001b78 <_ZN12AccelStepper15computeNewSpeedEv>:
    1b78:	4f 92       	push	r4
    1b7a:	5f 92       	push	r5
    1b7c:	6f 92       	push	r6
    1b7e:	7f 92       	push	r7
    1b80:	8f 92       	push	r8
    1b82:	9f 92       	push	r9
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	c8 88       	ldd	r12, Y+16	; 0x10
    1b9c:	d9 88       	ldd	r13, Y+17	; 0x11
    1b9e:	ea 88       	ldd	r14, Y+18	; 0x12
    1ba0:	fb 88       	ldd	r15, Y+19	; 0x13
    1ba2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ba4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ba6:	ae 85       	ldd	r26, Y+14	; 0x0e
    1ba8:	bf 85       	ldd	r27, Y+15	; 0x0f
    1baa:	c8 1a       	sub	r12, r24
    1bac:	d9 0a       	sbc	r13, r25
    1bae:	ea 0a       	sbc	r14, r26
    1bb0:	fb 0a       	sbc	r15, r27
    1bb2:	6c 89       	ldd	r22, Y+20	; 0x14
    1bb4:	7d 89       	ldd	r23, Y+21	; 0x15
    1bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bb8:	9f 89       	ldd	r25, Y+23	; 0x17
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    1bc2:	4b 01       	movw	r8, r22
    1bc4:	5c 01       	movw	r10, r24
    1bc6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1bc8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bce:	9b 01       	movw	r18, r22
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	c5 01       	movw	r24, r10
    1bdc:	b4 01       	movw	r22, r8
    1bde:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    1be2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
    1be6:	c1 14       	cp	r12, r1
    1be8:	d1 04       	cpc	r13, r1
    1bea:	e1 04       	cpc	r14, r1
    1bec:	f1 04       	cpc	r15, r1
    1bee:	99 f4       	brne	.+38     	; 0x1c16 <_ZN12AccelStepper15computeNewSpeedEv+0x9e>
    1bf0:	62 30       	cpi	r22, 0x02	; 2
    1bf2:	71 05       	cpc	r23, r1
    1bf4:	81 05       	cpc	r24, r1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	0c f0       	brlt	.+2      	; 0x1bfc <_ZN12AccelStepper15computeNewSpeedEv+0x84>
    1bfa:	76 c0       	rjmp	.+236    	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1bfc:	1c a2       	std	Y+36, r1	; 0x24
    1bfe:	1d a2       	std	Y+37, r1	; 0x25
    1c00:	1e a2       	std	Y+38, r1	; 0x26
    1c02:	1f a2       	std	Y+39, r1	; 0x27
    1c04:	1c 8a       	std	Y+20, r1	; 0x14
    1c06:	1d 8a       	std	Y+21, r1	; 0x15
    1c08:	1e 8a       	std	Y+22, r1	; 0x16
    1c0a:	1f 8a       	std	Y+23, r1	; 0x17
    1c0c:	1c aa       	std	Y+52, r1	; 0x34
    1c0e:	1d aa       	std	Y+53, r1	; 0x35
    1c10:	1e aa       	std	Y+54, r1	; 0x36
    1c12:	1f aa       	std	Y+55, r1	; 0x37
    1c14:	ed c0       	rjmp	.+474    	; 0x1df0 <_ZN12AccelStepper15computeNewSpeedEv+0x278>
    1c16:	0c a9       	ldd	r16, Y+52	; 0x34
    1c18:	1d a9       	ldd	r17, Y+53	; 0x35
    1c1a:	2e a9       	ldd	r18, Y+54	; 0x36
    1c1c:	3f a9       	ldd	r19, Y+55	; 0x37
    1c1e:	1c 14       	cp	r1, r12
    1c20:	1d 04       	cpc	r1, r13
    1c22:	1e 04       	cpc	r1, r14
    1c24:	1f 04       	cpc	r1, r15
    1c26:	fc f4       	brge	.+62     	; 0x1c66 <_ZN12AccelStepper15computeNewSpeedEv+0xee>
    1c28:	10 16       	cp	r1, r16
    1c2a:	11 06       	cpc	r1, r17
    1c2c:	12 06       	cpc	r1, r18
    1c2e:	13 06       	cpc	r1, r19
    1c30:	4c f4       	brge	.+18     	; 0x1c44 <_ZN12AccelStepper15computeNewSpeedEv+0xcc>
    1c32:	6c 15       	cp	r22, r12
    1c34:	7d 05       	cpc	r23, r13
    1c36:	8e 05       	cpc	r24, r14
    1c38:	9f 05       	cpc	r25, r15
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    1c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3e:	21 11       	cpse	r18, r1
    1c40:	53 c0       	rjmp	.+166    	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1c42:	25 c0       	rjmp	.+74     	; 0x1c8e <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    1c44:	01 15       	cp	r16, r1
    1c46:	11 05       	cpc	r17, r1
    1c48:	21 05       	cpc	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <_ZN12AccelStepper15computeNewSpeedEv+0xd8>
    1c4e:	4c c0       	rjmp	.+152    	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1c50:	6c 15       	cp	r22, r12
    1c52:	7d 05       	cpc	r23, r13
    1c54:	8e 05       	cpc	r24, r14
    1c56:	9f 05       	cpc	r25, r15
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <_ZN12AccelStepper15computeNewSpeedEv+0xe4>
    1c5a:	46 c0       	rjmp	.+140    	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <_ZN12AccelStepper15computeNewSpeedEv+0xec>
    1c62:	42 c0       	rjmp	.+132    	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1c64:	36 c0       	rjmp	.+108    	; 0x1cd2 <_ZN12AccelStepper15computeNewSpeedEv+0x15a>
    1c66:	10 16       	cp	r1, r16
    1c68:	11 06       	cpc	r1, r17
    1c6a:	12 06       	cpc	r1, r18
    1c6c:	13 06       	cpc	r1, r19
    1c6e:	ec f4       	brge	.+58     	; 0x1caa <_ZN12AccelStepper15computeNewSpeedEv+0x132>
    1c70:	00 27       	eor	r16, r16
    1c72:	11 27       	eor	r17, r17
    1c74:	98 01       	movw	r18, r16
    1c76:	0c 19       	sub	r16, r12
    1c78:	1d 09       	sbc	r17, r13
    1c7a:	2e 09       	sbc	r18, r14
    1c7c:	3f 09       	sbc	r19, r15
    1c7e:	60 17       	cp	r22, r16
    1c80:	71 07       	cpc	r23, r17
    1c82:	82 07       	cpc	r24, r18
    1c84:	93 07       	cpc	r25, r19
    1c86:	1c f4       	brge	.+6      	; 0x1c8e <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    1c88:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8a:	22 23       	and	r18, r18
    1c8c:	69 f1       	breq	.+90     	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1c8e:	9b 01       	movw	r18, r22
    1c90:	ac 01       	movw	r20, r24
    1c92:	88 27       	eor	r24, r24
    1c94:	99 27       	eor	r25, r25
    1c96:	dc 01       	movw	r26, r24
    1c98:	82 1b       	sub	r24, r18
    1c9a:	93 0b       	sbc	r25, r19
    1c9c:	a4 0b       	sbc	r26, r20
    1c9e:	b5 0b       	sbc	r27, r21
    1ca0:	8c ab       	std	Y+52, r24	; 0x34
    1ca2:	9d ab       	std	Y+53, r25	; 0x35
    1ca4:	ae ab       	std	Y+54, r26	; 0x36
    1ca6:	bf ab       	std	Y+55, r27	; 0x37
    1ca8:	1f c0       	rjmp	.+62     	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1caa:	01 15       	cp	r16, r1
    1cac:	11 05       	cpc	r17, r1
    1cae:	21 05       	cpc	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	d1 f0       	breq	.+52     	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1cb4:	88 24       	eor	r8, r8
    1cb6:	99 24       	eor	r9, r9
    1cb8:	54 01       	movw	r10, r8
    1cba:	8c 18       	sub	r8, r12
    1cbc:	9d 08       	sbc	r9, r13
    1cbe:	ae 08       	sbc	r10, r14
    1cc0:	bf 08       	sbc	r11, r15
    1cc2:	68 15       	cp	r22, r8
    1cc4:	79 05       	cpc	r23, r9
    1cc6:	8a 05       	cpc	r24, r10
    1cc8:	9b 05       	cpc	r25, r11
    1cca:	74 f4       	brge	.+28     	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	81 11       	cpse	r24, r1
    1cd0:	0b c0       	rjmp	.+22     	; 0x1ce8 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1cd2:	30 95       	com	r19
    1cd4:	20 95       	com	r18
    1cd6:	10 95       	com	r17
    1cd8:	01 95       	neg	r16
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	2f 4f       	sbci	r18, 0xFF	; 255
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	0c ab       	std	Y+52, r16	; 0x34
    1ce2:	1d ab       	std	Y+53, r17	; 0x35
    1ce4:	2e ab       	std	Y+54, r18	; 0x36
    1ce6:	3f ab       	std	Y+55, r19	; 0x37
    1ce8:	8c a8       	ldd	r8, Y+52	; 0x34
    1cea:	9d a8       	ldd	r9, Y+53	; 0x35
    1cec:	ae a8       	ldd	r10, Y+54	; 0x36
    1cee:	bf a8       	ldd	r11, Y+55	; 0x37
    1cf0:	81 14       	cp	r8, r1
    1cf2:	91 04       	cpc	r9, r1
    1cf4:	a1 04       	cpc	r10, r1
    1cf6:	b1 04       	cpc	r11, r1
    1cf8:	89 f4       	brne	.+34     	; 0x1d1c <_ZN12AccelStepper15computeNewSpeedEv+0x1a4>
    1cfa:	88 ad       	ldd	r24, Y+56	; 0x38
    1cfc:	99 ad       	ldd	r25, Y+57	; 0x39
    1cfe:	aa ad       	ldd	r26, Y+58	; 0x3a
    1d00:	bb ad       	ldd	r27, Y+59	; 0x3b
    1d02:	8c af       	std	Y+60, r24	; 0x3c
    1d04:	9d af       	std	Y+61, r25	; 0x3d
    1d06:	ae af       	std	Y+62, r26	; 0x3e
    1d08:	bf af       	std	Y+63, r27	; 0x3f
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	1c 14       	cp	r1, r12
    1d0e:	1d 04       	cpc	r1, r13
    1d10:	1e 04       	cpc	r1, r14
    1d12:	1f 04       	cpc	r1, r15
    1d14:	0c f0       	brlt	.+2      	; 0x1d18 <_ZN12AccelStepper15computeNewSpeedEv+0x1a0>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	8a 83       	std	Y+2, r24	; 0x02
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <_ZN12AccelStepper15computeNewSpeedEv+0x222>
    1d1c:	cc ac       	ldd	r12, Y+60	; 0x3c
    1d1e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1d20:	ee ac       	ldd	r14, Y+62	; 0x3e
    1d22:	ff ac       	ldd	r15, Y+63	; 0x3f
    1d24:	a7 01       	movw	r20, r14
    1d26:	96 01       	movw	r18, r12
    1d28:	c7 01       	movw	r24, r14
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1d30:	2b 01       	movw	r4, r22
    1d32:	3c 01       	movw	r6, r24
    1d34:	c5 01       	movw	r24, r10
    1d36:	b4 01       	movw	r22, r8
    1d38:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	50 e4       	ldi	r21, 0x40	; 64
    1d44:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    1d54:	9b 01       	movw	r18, r22
    1d56:	ac 01       	movw	r20, r24
    1d58:	c3 01       	movw	r24, r6
    1d5a:	b2 01       	movw	r22, r4
    1d5c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	c7 01       	movw	r24, r14
    1d66:	b6 01       	movw	r22, r12
    1d68:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    1d6c:	3b 01       	movw	r6, r22
    1d6e:	6c 01       	movw	r12, r24
    1d70:	fe 01       	movw	r30, r28
    1d72:	e0 5c       	subi	r30, 0xC0	; 192
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	e0 80       	ld	r14, Z
    1d78:	f1 80       	ldd	r15, Z+1	; 0x01
    1d7a:	02 81       	ldd	r16, Z+2	; 0x02
    1d7c:	13 81       	ldd	r17, Z+3	; 0x03
    1d7e:	97 01       	movw	r18, r14
    1d80:	a8 01       	movw	r20, r16
    1d82:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__gesf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	14 f4       	brge	.+4      	; 0x1d8e <_ZN12AccelStepper15computeNewSpeedEv+0x216>
    1d8a:	73 01       	movw	r14, r6
    1d8c:	86 01       	movw	r16, r12
    1d8e:	c7 01       	movw	r24, r14
    1d90:	d8 01       	movw	r26, r16
    1d92:	8c af       	std	Y+60, r24	; 0x3c
    1d94:	9d af       	std	Y+61, r25	; 0x3d
    1d96:	ae af       	std	Y+62, r26	; 0x3e
    1d98:	bf af       	std	Y+63, r27	; 0x3f
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	83 1a       	sub	r8, r19
    1d9e:	93 0a       	sbc	r9, r19
    1da0:	a3 0a       	sbc	r10, r19
    1da2:	b3 0a       	sbc	r11, r19
    1da4:	8c aa       	std	Y+52, r8	; 0x34
    1da6:	9d aa       	std	Y+53, r9	; 0x35
    1da8:	ae aa       	std	Y+54, r10	; 0x36
    1daa:	bf aa       	std	Y+55, r11	; 0x37
    1dac:	cc ac       	ldd	r12, Y+60	; 0x3c
    1dae:	dd ac       	ldd	r13, Y+61	; 0x3d
    1db0:	ee ac       	ldd	r14, Y+62	; 0x3e
    1db2:	ff ac       	ldd	r15, Y+63	; 0x3f
    1db4:	c7 01       	movw	r24, r14
    1db6:	b6 01       	movw	r22, r12
    1db8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fixunssfsi>
    1dbc:	6c a3       	std	Y+36, r22	; 0x24
    1dbe:	7d a3       	std	Y+37, r23	; 0x25
    1dc0:	8e a3       	std	Y+38, r24	; 0x26
    1dc2:	9f a3       	std	Y+39, r25	; 0x27
    1dc4:	a7 01       	movw	r20, r14
    1dc6:	96 01       	movw	r18, r12
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	74 e2       	ldi	r23, 0x24	; 36
    1dcc:	84 e7       	ldi	r24, 0x74	; 116
    1dce:	99 e4       	ldi	r25, 0x49	; 73
    1dd0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    1dd4:	6c 8b       	std	Y+20, r22	; 0x14
    1dd6:	7d 8b       	std	Y+21, r23	; 0x15
    1dd8:	8e 8b       	std	Y+22, r24	; 0x16
    1dda:	9f 8b       	std	Y+23, r25	; 0x17
    1ddc:	2a 81       	ldd	r18, Y+2	; 0x02
    1dde:	21 11       	cpse	r18, r1
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <_ZN12AccelStepper15computeNewSpeedEv+0x278>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	b0 58       	subi	r27, 0x80	; 128
    1de8:	8c 8b       	std	Y+20, r24	; 0x14
    1dea:	9d 8b       	std	Y+21, r25	; 0x15
    1dec:	ae 8b       	std	Y+22, r26	; 0x16
    1dee:	bf 8b       	std	Y+23, r27	; 0x17
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
    1e10:	08 95       	ret

00001e12 <_ZN12AccelStepper15setAccelerationEf.part.8>:
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ec 01       	movw	r28, r24
    1e30:	6a 01       	movw	r12, r20
    1e32:	7b 01       	movw	r14, r22
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    1e42:	87 ff       	sbrs	r24, 7
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <_ZN12AccelStepper15setAccelerationEf.part.8+0x3c>
    1e46:	f7 fa       	bst	r15, 7
    1e48:	f0 94       	com	r15
    1e4a:	f7 f8       	bld	r15, 7
    1e4c:	f0 94       	com	r15
    1e4e:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1e50:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1e52:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1e54:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1e56:	a7 01       	movw	r20, r14
    1e58:	96 01       	movw	r18, r12
    1e5a:	c5 01       	movw	r24, r10
    1e5c:	b4 01       	movw	r22, r8
    1e5e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <_ZN12AccelStepper15setAccelerationEf.part.8+0x56>
    1e66:	49 c0       	rjmp	.+146    	; 0x1efa <_ZN12AccelStepper15setAccelerationEf.part.8+0xe8>
    1e68:	6c a9       	ldd	r22, Y+52	; 0x34
    1e6a:	7d a9       	ldd	r23, Y+53	; 0x35
    1e6c:	8e a9       	ldd	r24, Y+54	; 0x36
    1e6e:	9f a9       	ldd	r25, Y+55	; 0x37
    1e70:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
    1e74:	2b 01       	movw	r4, r22
    1e76:	3c 01       	movw	r6, r24
    1e78:	a7 01       	movw	r20, r14
    1e7a:	96 01       	movw	r18, r12
    1e7c:	c5 01       	movw	r24, r10
    1e7e:	b4 01       	movw	r22, r8
    1e80:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    1e84:	9b 01       	movw	r18, r22
    1e86:	ac 01       	movw	r20, r24
    1e88:	c3 01       	movw	r24, r6
    1e8a:	b2 01       	movw	r22, r4
    1e8c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    1e90:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
    1e94:	6c ab       	std	Y+52, r22	; 0x34
    1e96:	7d ab       	std	Y+53, r23	; 0x35
    1e98:	8e ab       	std	Y+54, r24	; 0x36
    1e9a:	9f ab       	std	Y+55, r25	; 0x37
    1e9c:	a7 01       	movw	r20, r14
    1e9e:	96 01       	movw	r18, r12
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e4       	ldi	r25, 0x40	; 64
    1ea8:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    1eac:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <sqrt>
    1eb0:	26 e5       	ldi	r18, 0x56	; 86
    1eb2:	3e e0       	ldi	r19, 0x0E	; 14
    1eb4:	4d e2       	ldi	r20, 0x2D	; 45
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	34 e2       	ldi	r19, 0x24	; 36
    1ec0:	44 e7       	ldi	r20, 0x74	; 116
    1ec2:	59 e4       	ldi	r21, 0x49	; 73
    1ec4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    1ec8:	68 af       	std	Y+56, r22	; 0x38
    1eca:	79 af       	std	Y+57, r23	; 0x39
    1ecc:	8a af       	std	Y+58, r24	; 0x3a
    1ece:	9b af       	std	Y+59, r25	; 0x3b
    1ed0:	cc 8e       	std	Y+28, r12	; 0x1c
    1ed2:	dd 8e       	std	Y+29, r13	; 0x1d
    1ed4:	ee 8e       	std	Y+30, r14	; 0x1e
    1ed6:	ff 8e       	std	Y+31, r15	; 0x1f
    1ed8:	ce 01       	movw	r24, r28
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	bf 90       	pop	r11
    1ee8:	af 90       	pop	r10
    1eea:	9f 90       	pop	r9
    1eec:	8f 90       	pop	r8
    1eee:	7f 90       	pop	r7
    1ef0:	6f 90       	pop	r6
    1ef2:	5f 90       	pop	r5
    1ef4:	4f 90       	pop	r4
    1ef6:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <_ZN12AccelStepper15computeNewSpeedEv>
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	9f 90       	pop	r9
    1f0c:	8f 90       	pop	r8
    1f0e:	7f 90       	pop	r7
    1f10:	6f 90       	pop	r6
    1f12:	5f 90       	pop	r5
    1f14:	4f 90       	pop	r4
    1f16:	08 95       	ret

00001f18 <_ZN12AccelStepperC1Ehhhhhb>:
    1f18:	cf 92       	push	r12
    1f1a:	ef 92       	push	r14
    1f1c:	0f 93       	push	r16
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
    1f24:	8a ed       	ldi	r24, 0xDA	; 218
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	99 83       	std	Y+1, r25	; 0x01
    1f2a:	88 83       	st	Y, r24
    1f2c:	6b 83       	std	Y+3, r22	; 0x03
    1f2e:	1c 86       	std	Y+12, r1	; 0x0c
    1f30:	1d 86       	std	Y+13, r1	; 0x0d
    1f32:	1e 86       	std	Y+14, r1	; 0x0e
    1f34:	1f 86       	std	Y+15, r1	; 0x0f
    1f36:	18 8a       	std	Y+16, r1	; 0x10
    1f38:	19 8a       	std	Y+17, r1	; 0x11
    1f3a:	1a 8a       	std	Y+18, r1	; 0x12
    1f3c:	1b 8a       	std	Y+19, r1	; 0x13
    1f3e:	1c 8a       	std	Y+20, r1	; 0x14
    1f40:	1d 8a       	std	Y+21, r1	; 0x15
    1f42:	1e 8a       	std	Y+22, r1	; 0x16
    1f44:	1f 8a       	std	Y+23, r1	; 0x17
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e8       	ldi	r26, 0x80	; 128
    1f4c:	bf e3       	ldi	r27, 0x3F	; 63
    1f4e:	88 8f       	std	Y+24, r24	; 0x18
    1f50:	99 8f       	std	Y+25, r25	; 0x19
    1f52:	aa 8f       	std	Y+26, r26	; 0x1a
    1f54:	bb 8f       	std	Y+27, r27	; 0x1b
    1f56:	1c 8e       	std	Y+28, r1	; 0x1c
    1f58:	1d 8e       	std	Y+29, r1	; 0x1d
    1f5a:	1e 8e       	std	Y+30, r1	; 0x1e
    1f5c:	1f 8e       	std	Y+31, r1	; 0x1f
    1f5e:	88 a3       	std	Y+32, r24	; 0x20
    1f60:	99 a3       	std	Y+33, r25	; 0x21
    1f62:	aa a3       	std	Y+34, r26	; 0x22
    1f64:	bb a3       	std	Y+35, r27	; 0x23
    1f66:	1c a2       	std	Y+36, r1	; 0x24
    1f68:	1d a2       	std	Y+37, r1	; 0x25
    1f6a:	1e a2       	std	Y+38, r1	; 0x26
    1f6c:	1f a2       	std	Y+39, r1	; 0x27
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	7d a7       	std	Y+45, r23	; 0x2d
    1f74:	6c a7       	std	Y+44, r22	; 0x2c
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	3f a7       	std	Y+47, r19	; 0x2f
    1f7a:	18 a6       	std	Y+40, r1	; 0x28
    1f7c:	19 a6       	std	Y+41, r1	; 0x29
    1f7e:	1a a6       	std	Y+42, r1	; 0x2a
    1f80:	1b a6       	std	Y+43, r1	; 0x2b
    1f82:	4c 83       	std	Y+4, r20	; 0x04
    1f84:	2d 83       	std	Y+5, r18	; 0x05
    1f86:	0e 83       	std	Y+6, r16	; 0x06
    1f88:	ef 82       	std	Y+7, r14	; 0x07
    1f8a:	1c aa       	std	Y+52, r1	; 0x34
    1f8c:	1d aa       	std	Y+53, r1	; 0x35
    1f8e:	1e aa       	std	Y+54, r1	; 0x36
    1f90:	1f aa       	std	Y+55, r1	; 0x37
    1f92:	18 ae       	std	Y+56, r1	; 0x38
    1f94:	19 ae       	std	Y+57, r1	; 0x39
    1f96:	1a ae       	std	Y+58, r1	; 0x3a
    1f98:	1b ae       	std	Y+59, r1	; 0x3b
    1f9a:	1c ae       	std	Y+60, r1	; 0x3c
    1f9c:	1d ae       	std	Y+61, r1	; 0x3d
    1f9e:	1e ae       	std	Y+62, r1	; 0x3e
    1fa0:	1f ae       	std	Y+63, r1	; 0x3f
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e0 5c       	subi	r30, 0xC0	; 192
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	a2 83       	std	Z+2, r26	; 0x02
    1fae:	b3 83       	std	Z+3, r27	; 0x03
    1fb0:	1a 82       	std	Y+2, r1	; 0x02
    1fb2:	18 86       	std	Y+8, r1	; 0x08
    1fb4:	19 86       	std	Y+9, r1	; 0x09
    1fb6:	1a 86       	std	Y+10, r1	; 0x0a
    1fb8:	1b 86       	std	Y+11, r1	; 0x0b
    1fba:	cc 20       	and	r12, r12
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <_ZN12AccelStepperC1Ehhhhhb+0xac>
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN12AccelStepper13enableOutputsEv>
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	60 e8       	ldi	r22, 0x80	; 128
    1fca:	7f e3       	ldi	r23, 0x3F	; 63
    1fcc:	ce 01       	movw	r24, r28
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	0f 91       	pop	r16
    1fd4:	ef 90       	pop	r14
    1fd6:	cf 90       	pop	r12
    1fd8:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <_ZN12AccelStepper15setAccelerationEf.part.8>

00001fdc <_ZN12AccelStepper11setMaxSpeedEf>:
    1fdc:	cf 92       	push	r12
    1fde:	df 92       	push	r13
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	ec 01       	movw	r28, r24
    1fee:	6a 01       	movw	r12, r20
    1ff0:	7b 01       	movw	r14, r22
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	a9 01       	movw	r20, r18
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	b6 01       	movw	r22, r12
    1ffc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    2000:	87 ff       	sbrs	r24, 7
    2002:	04 c0       	rjmp	.+8      	; 0x200c <_ZN12AccelStepper11setMaxSpeedEf+0x30>
    2004:	f7 fa       	bst	r15, 7
    2006:	f0 94       	com	r15
    2008:	f7 f8       	bld	r15, 7
    200a:	f0 94       	com	r15
    200c:	28 8d       	ldd	r18, Y+24	; 0x18
    200e:	39 8d       	ldd	r19, Y+25	; 0x19
    2010:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2012:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2014:	c7 01       	movw	r24, r14
    2016:	b6 01       	movw	r22, r12
    2018:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <_ZN12AccelStepper11setMaxSpeedEf+0x46>
    2020:	46 c0       	rjmp	.+140    	; 0x20ae <_ZN12AccelStepper11setMaxSpeedEf+0xd2>
    2022:	c8 8e       	std	Y+24, r12	; 0x18
    2024:	d9 8e       	std	Y+25, r13	; 0x19
    2026:	ea 8e       	std	Y+26, r14	; 0x1a
    2028:	fb 8e       	std	Y+27, r15	; 0x1b
    202a:	8e 01       	movw	r16, r28
    202c:	00 5c       	subi	r16, 0xC0	; 192
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	a7 01       	movw	r20, r14
    2032:	96 01       	movw	r18, r12
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	74 e2       	ldi	r23, 0x24	; 36
    2038:	84 e7       	ldi	r24, 0x74	; 116
    203a:	99 e4       	ldi	r25, 0x49	; 73
    203c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    2040:	f8 01       	movw	r30, r16
    2042:	60 83       	st	Z, r22
    2044:	71 83       	std	Z+1, r23	; 0x01
    2046:	82 83       	std	Z+2, r24	; 0x02
    2048:	93 83       	std	Z+3, r25	; 0x03
    204a:	8c a9       	ldd	r24, Y+52	; 0x34
    204c:	9d a9       	ldd	r25, Y+53	; 0x35
    204e:	ae a9       	ldd	r26, Y+54	; 0x36
    2050:	bf a9       	ldd	r27, Y+55	; 0x37
    2052:	18 16       	cp	r1, r24
    2054:	19 06       	cpc	r1, r25
    2056:	1a 06       	cpc	r1, r26
    2058:	1b 06       	cpc	r1, r27
    205a:	4c f5       	brge	.+82     	; 0x20ae <_ZN12AccelStepper11setMaxSpeedEf+0xd2>
    205c:	6c 89       	ldd	r22, Y+20	; 0x14
    205e:	7d 89       	ldd	r23, Y+21	; 0x15
    2060:	8e 89       	ldd	r24, Y+22	; 0x16
    2062:	9f 89       	ldd	r25, Y+23	; 0x17
    2064:	9b 01       	movw	r18, r22
    2066:	ac 01       	movw	r20, r24
    2068:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
    206c:	6b 01       	movw	r12, r22
    206e:	7c 01       	movw	r14, r24
    2070:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2072:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2074:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2076:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	c7 01       	movw	r24, r14
    2086:	b6 01       	movw	r22, r12
    2088:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    208c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixsfsi>
    2090:	6c ab       	std	Y+52, r22	; 0x34
    2092:	7d ab       	std	Y+53, r23	; 0x35
    2094:	8e ab       	std	Y+54, r24	; 0x36
    2096:	9f ab       	std	Y+55, r25	; 0x37
    2098:	ce 01       	movw	r24, r28
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <_ZN12AccelStepper15computeNewSpeedEv>
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	08 95       	ret

000020c0 <_ZN12AccelStepper15setAccelerationEf>:

void AccelStepper::setAcceleration(float acceleration)
{
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	ec 01       	movw	r28, r24
    20ce:	6a 01       	movw	r12, r20
    20d0:	7b 01       	movw	r14, r22
    if (acceleration == 0.0)
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	c7 01       	movw	r24, r14
    20da:	b6 01       	movw	r22, r12
    20dc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	59 f0       	breq	.+22     	; 0x20fa <_ZN12AccelStepper15setAccelerationEf+0x3a>
    20e4:	b7 01       	movw	r22, r14
    20e6:	a6 01       	movw	r20, r12
    20e8:	ce 01       	movw	r24, r28
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
	_acceleration = acceleration;
	computeNewSpeed();
    }
}
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	cf 90       	pop	r12
    20f6:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <_ZN12AccelStepper15setAccelerationEf.part.8>
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	08 95       	ret

00002108 <_ZN12AccelStepper8setSpeedEf>:

void AccelStepper::setSpeed(float speed)
{
    2108:	4f 92       	push	r4
    210a:	5f 92       	push	r5
    210c:	6f 92       	push	r6
    210e:	7f 92       	push	r7
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    2126:	5a 01       	movw	r10, r20
    2128:	8b 01       	movw	r16, r22
    if (speed == _speed)
    212a:	9a 01       	movw	r18, r20
    212c:	ab 01       	movw	r20, r22
    212e:	6c 89       	ldd	r22, Y+20	; 0x14
    2130:	7d 89       	ldd	r23, Y+21	; 0x15
    2132:	8e 89       	ldd	r24, Y+22	; 0x16
    2134:	9f 89       	ldd	r25, Y+23	; 0x17
    2136:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <_ZN12AccelStepper8setSpeedEf+0x38>
    213e:	4c c0       	rjmp	.+152    	; 0x21d8 <_ZN12AccelStepper8setSpeedEf+0xd0>
        return;
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
    2140:	c8 8c       	ldd	r12, Y+24	; 0x18
    2142:	d9 8c       	ldd	r13, Y+25	; 0x19
    2144:	ea 8c       	ldd	r14, Y+26	; 0x1a
    2146:	fb 8c       	ldd	r15, Y+27	; 0x1b
    2148:	26 01       	movw	r4, r12
    214a:	37 01       	movw	r6, r14
    214c:	77 fa       	bst	r7, 7
    214e:	70 94       	com	r7
    2150:	77 f8       	bld	r7, 7
    2152:	70 94       	com	r7
    2154:	a3 01       	movw	r20, r6
    2156:	92 01       	movw	r18, r4
    2158:	b5 01       	movw	r22, r10
    215a:	c8 01       	movw	r24, r16
    215c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    2160:	87 fd       	sbrc	r24, 7
    2162:	0b c0       	rjmp	.+22     	; 0x217a <_ZN12AccelStepper8setSpeedEf+0x72>
    2164:	a7 01       	movw	r20, r14
    2166:	96 01       	movw	r18, r12
    2168:	b5 01       	movw	r22, r10
    216a:	c8 01       	movw	r24, r16
    216c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__gesf2>
    2170:	18 16       	cp	r1, r24
    2172:	2c f0       	brlt	.+10     	; 0x217e <_ZN12AccelStepper8setSpeedEf+0x76>
    2174:	65 01       	movw	r12, r10
    2176:	78 01       	movw	r14, r16
    2178:	02 c0       	rjmp	.+4      	; 0x217e <_ZN12AccelStepper8setSpeedEf+0x76>
    217a:	73 01       	movw	r14, r6
    217c:	62 01       	movw	r12, r4
    if (speed == 0.0)
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	a9 01       	movw	r20, r18
    2184:	c7 01       	movw	r24, r14
    2186:	b6 01       	movw	r22, r12
    2188:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__cmpsf2>
    218c:	81 11       	cpse	r24, r1
    218e:	05 c0       	rjmp	.+10     	; 0x219a <_ZN12AccelStepper8setSpeedEf+0x92>
	_stepInterval = 0;
    2190:	1c a2       	std	Y+36, r1	; 0x24
    2192:	1d a2       	std	Y+37, r1	; 0x25
    2194:	1e a2       	std	Y+38, r1	; 0x26
    2196:	1f a2       	std	Y+39, r1	; 0x27
    2198:	1b c0       	rjmp	.+54     	; 0x21d0 <_ZN12AccelStepper8setSpeedEf+0xc8>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
    219a:	a7 01       	movw	r20, r14
    219c:	96 01       	movw	r18, r12
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	74 e2       	ldi	r23, 0x24	; 36
    21a2:	84 e7       	ldi	r24, 0x74	; 116
    21a4:	99 e4       	ldi	r25, 0x49	; 73
    21a6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__divsf3>
    21aa:	9f 77       	andi	r25, 0x7F	; 127
    21ac:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fixunssfsi>
    21b0:	6c a3       	std	Y+36, r22	; 0x24
    21b2:	7d a3       	std	Y+37, r23	; 0x25
    21b4:	8e a3       	std	Y+38, r24	; 0x26
    21b6:	9f a3       	std	Y+39, r25	; 0x27
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
    21b8:	11 e0       	ldi	r17, 0x01	; 1
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	c7 01       	movw	r24, r14
    21c2:	b6 01       	movw	r22, r12
    21c4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__gesf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	0c f0       	brlt	.+2      	; 0x21ce <_ZN12AccelStepper8setSpeedEf+0xc6>
    21cc:	10 e0       	ldi	r17, 0x00	; 0
    21ce:	1a 83       	std	Y+2, r17	; 0x02
    }
    _speed = speed;
    21d0:	cc 8a       	std	Y+20, r12	; 0x14
    21d2:	dd 8a       	std	Y+21, r13	; 0x15
    21d4:	ee 8a       	std	Y+22, r14	; 0x16
    21d6:	ff 8a       	std	Y+23, r15	; 0x17
}
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	5f 90       	pop	r5
    21f2:	4f 90       	pop	r4
    21f4:	08 95       	ret

000021f6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21f6:	08 95       	ret

000021f8 <__subsf3>:
    21f8:	50 58       	subi	r21, 0x80	; 128

000021fa <__addsf3>:
    21fa:	bb 27       	eor	r27, r27
    21fc:	aa 27       	eor	r26, r26
    21fe:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    2202:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__fp_round>
    2206:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_pscA>
    220a:	38 f0       	brcs	.+14     	; 0x221a <__addsf3+0x20>
    220c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__fp_pscB>
    2210:	20 f0       	brcs	.+8      	; 0x221a <__addsf3+0x20>
    2212:	39 f4       	brne	.+14     	; 0x2222 <__addsf3+0x28>
    2214:	9f 3f       	cpi	r25, 0xFF	; 255
    2216:	19 f4       	brne	.+6      	; 0x221e <__addsf3+0x24>
    2218:	26 f4       	brtc	.+8      	; 0x2222 <__addsf3+0x28>
    221a:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_nan>
    221e:	0e f4       	brtc	.+2      	; 0x2222 <__addsf3+0x28>
    2220:	e0 95       	com	r30
    2222:	e7 fb       	bst	r30, 7
    2224:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__fp_inf>

00002228 <__addsf3x>:
    2228:	e9 2f       	mov	r30, r25
    222a:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
    222e:	58 f3       	brcs	.-42     	; 0x2206 <__addsf3+0xc>
    2230:	ba 17       	cp	r27, r26
    2232:	62 07       	cpc	r22, r18
    2234:	73 07       	cpc	r23, r19
    2236:	84 07       	cpc	r24, r20
    2238:	95 07       	cpc	r25, r21
    223a:	20 f0       	brcs	.+8      	; 0x2244 <__addsf3x+0x1c>
    223c:	79 f4       	brne	.+30     	; 0x225c <__addsf3x+0x34>
    223e:	a6 f5       	brtc	.+104    	; 0x22a8 <__addsf3x+0x80>
    2240:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_zero>
    2244:	0e f4       	brtc	.+2      	; 0x2248 <__addsf3x+0x20>
    2246:	e0 95       	com	r30
    2248:	0b 2e       	mov	r0, r27
    224a:	ba 2f       	mov	r27, r26
    224c:	a0 2d       	mov	r26, r0
    224e:	0b 01       	movw	r0, r22
    2250:	b9 01       	movw	r22, r18
    2252:	90 01       	movw	r18, r0
    2254:	0c 01       	movw	r0, r24
    2256:	ca 01       	movw	r24, r20
    2258:	a0 01       	movw	r20, r0
    225a:	11 24       	eor	r1, r1
    225c:	ff 27       	eor	r31, r31
    225e:	59 1b       	sub	r21, r25
    2260:	99 f0       	breq	.+38     	; 0x2288 <__addsf3x+0x60>
    2262:	59 3f       	cpi	r21, 0xF9	; 249
    2264:	50 f4       	brcc	.+20     	; 0x227a <__addsf3x+0x52>
    2266:	50 3e       	cpi	r21, 0xE0	; 224
    2268:	68 f1       	brcs	.+90     	; 0x22c4 <__addsf3x+0x9c>
    226a:	1a 16       	cp	r1, r26
    226c:	f0 40       	sbci	r31, 0x00	; 0
    226e:	a2 2f       	mov	r26, r18
    2270:	23 2f       	mov	r18, r19
    2272:	34 2f       	mov	r19, r20
    2274:	44 27       	eor	r20, r20
    2276:	58 5f       	subi	r21, 0xF8	; 248
    2278:	f3 cf       	rjmp	.-26     	; 0x2260 <__addsf3x+0x38>
    227a:	46 95       	lsr	r20
    227c:	37 95       	ror	r19
    227e:	27 95       	ror	r18
    2280:	a7 95       	ror	r26
    2282:	f0 40       	sbci	r31, 0x00	; 0
    2284:	53 95       	inc	r21
    2286:	c9 f7       	brne	.-14     	; 0x227a <__addsf3x+0x52>
    2288:	7e f4       	brtc	.+30     	; 0x22a8 <__addsf3x+0x80>
    228a:	1f 16       	cp	r1, r31
    228c:	ba 0b       	sbc	r27, r26
    228e:	62 0b       	sbc	r22, r18
    2290:	73 0b       	sbc	r23, r19
    2292:	84 0b       	sbc	r24, r20
    2294:	ba f0       	brmi	.+46     	; 0x22c4 <__addsf3x+0x9c>
    2296:	91 50       	subi	r25, 0x01	; 1
    2298:	a1 f0       	breq	.+40     	; 0x22c2 <__addsf3x+0x9a>
    229a:	ff 0f       	add	r31, r31
    229c:	bb 1f       	adc	r27, r27
    229e:	66 1f       	adc	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	c2 f7       	brpl	.-16     	; 0x2296 <__addsf3x+0x6e>
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <__addsf3x+0x9c>
    22a8:	ba 0f       	add	r27, r26
    22aa:	62 1f       	adc	r22, r18
    22ac:	73 1f       	adc	r23, r19
    22ae:	84 1f       	adc	r24, r20
    22b0:	48 f4       	brcc	.+18     	; 0x22c4 <__addsf3x+0x9c>
    22b2:	87 95       	ror	r24
    22b4:	77 95       	ror	r23
    22b6:	67 95       	ror	r22
    22b8:	b7 95       	ror	r27
    22ba:	f7 95       	ror	r31
    22bc:	9e 3f       	cpi	r25, 0xFE	; 254
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <__addsf3x+0x9a>
    22c0:	b0 cf       	rjmp	.-160    	; 0x2222 <__addsf3+0x28>
    22c2:	93 95       	inc	r25
    22c4:	88 0f       	add	r24, r24
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <__addsf3x+0xa2>
    22c8:	99 27       	eor	r25, r25
    22ca:	ee 0f       	add	r30, r30
    22cc:	97 95       	ror	r25
    22ce:	87 95       	ror	r24
    22d0:	08 95       	ret

000022d2 <__cmpsf2>:
    22d2:	0e 94 1d 12 	call	0x243a	; 0x243a <__fp_cmp>
    22d6:	08 f4       	brcc	.+2      	; 0x22da <__cmpsf2+0x8>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	08 95       	ret

000022dc <__divsf3>:
    22dc:	0e 94 82 11 	call	0x2304	; 0x2304 <__divsf3x>
    22e0:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__fp_round>
    22e4:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__fp_pscB>
    22e8:	58 f0       	brcs	.+22     	; 0x2300 <__divsf3+0x24>
    22ea:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_pscA>
    22ee:	40 f0       	brcs	.+16     	; 0x2300 <__divsf3+0x24>
    22f0:	29 f4       	brne	.+10     	; 0x22fc <__divsf3+0x20>
    22f2:	5f 3f       	cpi	r21, 0xFF	; 255
    22f4:	29 f0       	breq	.+10     	; 0x2300 <__divsf3+0x24>
    22f6:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__fp_inf>
    22fa:	51 11       	cpse	r21, r1
    22fc:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
    2300:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_nan>

00002304 <__divsf3x>:
    2304:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
    2308:	68 f3       	brcs	.-38     	; 0x22e4 <__divsf3+0x8>

0000230a <__divsf3_pse>:
    230a:	99 23       	and	r25, r25
    230c:	b1 f3       	breq	.-20     	; 0x22fa <__divsf3+0x1e>
    230e:	55 23       	and	r21, r21
    2310:	91 f3       	breq	.-28     	; 0x22f6 <__divsf3+0x1a>
    2312:	95 1b       	sub	r25, r21
    2314:	55 0b       	sbc	r21, r21
    2316:	bb 27       	eor	r27, r27
    2318:	aa 27       	eor	r26, r26
    231a:	62 17       	cp	r22, r18
    231c:	73 07       	cpc	r23, r19
    231e:	84 07       	cpc	r24, r20
    2320:	38 f0       	brcs	.+14     	; 0x2330 <__divsf3_pse+0x26>
    2322:	9f 5f       	subi	r25, 0xFF	; 255
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	44 1f       	adc	r20, r20
    232c:	aa 1f       	adc	r26, r26
    232e:	a9 f3       	breq	.-22     	; 0x231a <__divsf3_pse+0x10>
    2330:	35 d0       	rcall	.+106    	; 0x239c <__divsf3_pse+0x92>
    2332:	0e 2e       	mov	r0, r30
    2334:	3a f0       	brmi	.+14     	; 0x2344 <__divsf3_pse+0x3a>
    2336:	e0 e8       	ldi	r30, 0x80	; 128
    2338:	32 d0       	rcall	.+100    	; 0x239e <__divsf3_pse+0x94>
    233a:	91 50       	subi	r25, 0x01	; 1
    233c:	50 40       	sbci	r21, 0x00	; 0
    233e:	e6 95       	lsr	r30
    2340:	00 1c       	adc	r0, r0
    2342:	ca f7       	brpl	.-14     	; 0x2336 <__divsf3_pse+0x2c>
    2344:	2b d0       	rcall	.+86     	; 0x239c <__divsf3_pse+0x92>
    2346:	fe 2f       	mov	r31, r30
    2348:	29 d0       	rcall	.+82     	; 0x239c <__divsf3_pse+0x92>
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	bb 1f       	adc	r27, r27
    2352:	26 17       	cp	r18, r22
    2354:	37 07       	cpc	r19, r23
    2356:	48 07       	cpc	r20, r24
    2358:	ab 07       	cpc	r26, r27
    235a:	b0 e8       	ldi	r27, 0x80	; 128
    235c:	09 f0       	breq	.+2      	; 0x2360 <__divsf3_pse+0x56>
    235e:	bb 0b       	sbc	r27, r27
    2360:	80 2d       	mov	r24, r0
    2362:	bf 01       	movw	r22, r30
    2364:	ff 27       	eor	r31, r31
    2366:	93 58       	subi	r25, 0x83	; 131
    2368:	5f 4f       	sbci	r21, 0xFF	; 255
    236a:	3a f0       	brmi	.+14     	; 0x237a <__divsf3_pse+0x70>
    236c:	9e 3f       	cpi	r25, 0xFE	; 254
    236e:	51 05       	cpc	r21, r1
    2370:	78 f0       	brcs	.+30     	; 0x2390 <__divsf3_pse+0x86>
    2372:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__fp_inf>
    2376:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
    237a:	5f 3f       	cpi	r21, 0xFF	; 255
    237c:	e4 f3       	brlt	.-8      	; 0x2376 <__divsf3_pse+0x6c>
    237e:	98 3e       	cpi	r25, 0xE8	; 232
    2380:	d4 f3       	brlt	.-12     	; 0x2376 <__divsf3_pse+0x6c>
    2382:	86 95       	lsr	r24
    2384:	77 95       	ror	r23
    2386:	67 95       	ror	r22
    2388:	b7 95       	ror	r27
    238a:	f7 95       	ror	r31
    238c:	9f 5f       	subi	r25, 0xFF	; 255
    238e:	c9 f7       	brne	.-14     	; 0x2382 <__divsf3_pse+0x78>
    2390:	88 0f       	add	r24, r24
    2392:	91 1d       	adc	r25, r1
    2394:	96 95       	lsr	r25
    2396:	87 95       	ror	r24
    2398:	97 f9       	bld	r25, 7
    239a:	08 95       	ret
    239c:	e1 e0       	ldi	r30, 0x01	; 1
    239e:	66 0f       	add	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 1f       	adc	r24, r24
    23a4:	bb 1f       	adc	r27, r27
    23a6:	62 17       	cp	r22, r18
    23a8:	73 07       	cpc	r23, r19
    23aa:	84 07       	cpc	r24, r20
    23ac:	ba 07       	cpc	r27, r26
    23ae:	20 f0       	brcs	.+8      	; 0x23b8 <__divsf3_pse+0xae>
    23b0:	62 1b       	sub	r22, r18
    23b2:	73 0b       	sbc	r23, r19
    23b4:	84 0b       	sbc	r24, r20
    23b6:	ba 0b       	sbc	r27, r26
    23b8:	ee 1f       	adc	r30, r30
    23ba:	88 f7       	brcc	.-30     	; 0x239e <__divsf3_pse+0x94>
    23bc:	e0 95       	com	r30
    23be:	08 95       	ret

000023c0 <__floatunsisf>:
    23c0:	e8 94       	clt
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <__floatsisf+0x12>

000023c4 <__floatsisf>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	3e f4       	brtc	.+14     	; 0x23d6 <__floatsisf+0x12>
    23c8:	90 95       	com	r25
    23ca:	80 95       	com	r24
    23cc:	70 95       	com	r23
    23ce:	61 95       	neg	r22
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	99 23       	and	r25, r25
    23d8:	a9 f0       	breq	.+42     	; 0x2404 <__floatsisf+0x40>
    23da:	f9 2f       	mov	r31, r25
    23dc:	96 e9       	ldi	r25, 0x96	; 150
    23de:	bb 27       	eor	r27, r27
    23e0:	93 95       	inc	r25
    23e2:	f6 95       	lsr	r31
    23e4:	87 95       	ror	r24
    23e6:	77 95       	ror	r23
    23e8:	67 95       	ror	r22
    23ea:	b7 95       	ror	r27
    23ec:	f1 11       	cpse	r31, r1
    23ee:	f8 cf       	rjmp	.-16     	; 0x23e0 <__floatsisf+0x1c>
    23f0:	fa f4       	brpl	.+62     	; 0x2430 <__floatsisf+0x6c>
    23f2:	bb 0f       	add	r27, r27
    23f4:	11 f4       	brne	.+4      	; 0x23fa <__floatsisf+0x36>
    23f6:	60 ff       	sbrs	r22, 0
    23f8:	1b c0       	rjmp	.+54     	; 0x2430 <__floatsisf+0x6c>
    23fa:	6f 5f       	subi	r22, 0xFF	; 255
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <__floatsisf+0x6c>
    2404:	88 23       	and	r24, r24
    2406:	11 f0       	breq	.+4      	; 0x240c <__floatsisf+0x48>
    2408:	96 e9       	ldi	r25, 0x96	; 150
    240a:	11 c0       	rjmp	.+34     	; 0x242e <__floatsisf+0x6a>
    240c:	77 23       	and	r23, r23
    240e:	21 f0       	breq	.+8      	; 0x2418 <__floatsisf+0x54>
    2410:	9e e8       	ldi	r25, 0x8E	; 142
    2412:	87 2f       	mov	r24, r23
    2414:	76 2f       	mov	r23, r22
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <__floatsisf+0x5e>
    2418:	66 23       	and	r22, r22
    241a:	71 f0       	breq	.+28     	; 0x2438 <__floatsisf+0x74>
    241c:	96 e8       	ldi	r25, 0x86	; 134
    241e:	86 2f       	mov	r24, r22
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	2a f0       	brmi	.+10     	; 0x2430 <__floatsisf+0x6c>
    2426:	9a 95       	dec	r25
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	da f7       	brpl	.-10     	; 0x2426 <__floatsisf+0x62>
    2430:	88 0f       	add	r24, r24
    2432:	96 95       	lsr	r25
    2434:	87 95       	ror	r24
    2436:	97 f9       	bld	r25, 7
    2438:	08 95       	ret

0000243a <__fp_cmp>:
    243a:	99 0f       	add	r25, r25
    243c:	00 08       	sbc	r0, r0
    243e:	55 0f       	add	r21, r21
    2440:	aa 0b       	sbc	r26, r26
    2442:	e0 e8       	ldi	r30, 0x80	; 128
    2444:	fe ef       	ldi	r31, 0xFE	; 254
    2446:	16 16       	cp	r1, r22
    2448:	17 06       	cpc	r1, r23
    244a:	e8 07       	cpc	r30, r24
    244c:	f9 07       	cpc	r31, r25
    244e:	c0 f0       	brcs	.+48     	; 0x2480 <__fp_cmp+0x46>
    2450:	12 16       	cp	r1, r18
    2452:	13 06       	cpc	r1, r19
    2454:	e4 07       	cpc	r30, r20
    2456:	f5 07       	cpc	r31, r21
    2458:	98 f0       	brcs	.+38     	; 0x2480 <__fp_cmp+0x46>
    245a:	62 1b       	sub	r22, r18
    245c:	73 0b       	sbc	r23, r19
    245e:	84 0b       	sbc	r24, r20
    2460:	95 0b       	sbc	r25, r21
    2462:	39 f4       	brne	.+14     	; 0x2472 <__fp_cmp+0x38>
    2464:	0a 26       	eor	r0, r26
    2466:	61 f0       	breq	.+24     	; 0x2480 <__fp_cmp+0x46>
    2468:	23 2b       	or	r18, r19
    246a:	24 2b       	or	r18, r20
    246c:	25 2b       	or	r18, r21
    246e:	21 f4       	brne	.+8      	; 0x2478 <__fp_cmp+0x3e>
    2470:	08 95       	ret
    2472:	0a 26       	eor	r0, r26
    2474:	09 f4       	brne	.+2      	; 0x2478 <__fp_cmp+0x3e>
    2476:	a1 40       	sbci	r26, 0x01	; 1
    2478:	a6 95       	lsr	r26
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	81 1d       	adc	r24, r1
    247e:	81 1d       	adc	r24, r1
    2480:	08 95       	ret

00002482 <__fp_inf>:
    2482:	97 f9       	bld	r25, 7
    2484:	9f 67       	ori	r25, 0x7F	; 127
    2486:	80 e8       	ldi	r24, 0x80	; 128
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	08 95       	ret

0000248e <__fp_nan>:
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	08 95       	ret

00002494 <__fp_pscA>:
    2494:	00 24       	eor	r0, r0
    2496:	0a 94       	dec	r0
    2498:	16 16       	cp	r1, r22
    249a:	17 06       	cpc	r1, r23
    249c:	18 06       	cpc	r1, r24
    249e:	09 06       	cpc	r0, r25
    24a0:	08 95       	ret

000024a2 <__fp_pscB>:
    24a2:	00 24       	eor	r0, r0
    24a4:	0a 94       	dec	r0
    24a6:	12 16       	cp	r1, r18
    24a8:	13 06       	cpc	r1, r19
    24aa:	14 06       	cpc	r1, r20
    24ac:	05 06       	cpc	r0, r21
    24ae:	08 95       	ret

000024b0 <__fp_round>:
    24b0:	09 2e       	mov	r0, r25
    24b2:	03 94       	inc	r0
    24b4:	00 0c       	add	r0, r0
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0xc>
    24b8:	88 23       	and	r24, r24
    24ba:	52 f0       	brmi	.+20     	; 0x24d0 <__fp_round+0x20>
    24bc:	bb 0f       	add	r27, r27
    24be:	40 f4       	brcc	.+16     	; 0x24d0 <__fp_round+0x20>
    24c0:	bf 2b       	or	r27, r31
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <__fp_round+0x18>
    24c4:	60 ff       	sbrs	r22, 0
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <__fp_round+0x20>
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	08 95       	ret

000024d2 <__gesf2>:
    24d2:	0e 94 1d 12 	call	0x243a	; 0x243a <__fp_cmp>
    24d6:	08 f4       	brcc	.+2      	; 0x24da <__gesf2+0x8>
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__mulsf3>:
    24dc:	0e 94 81 12 	call	0x2502	; 0x2502 <__mulsf3x>
    24e0:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__fp_round>
    24e4:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_pscA>
    24e8:	38 f0       	brcs	.+14     	; 0x24f8 <__mulsf3+0x1c>
    24ea:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__fp_pscB>
    24ee:	20 f0       	brcs	.+8      	; 0x24f8 <__mulsf3+0x1c>
    24f0:	95 23       	and	r25, r21
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <__mulsf3+0x1c>
    24f4:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__fp_inf>
    24f8:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_nan>
    24fc:	11 24       	eor	r1, r1
    24fe:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>

00002502 <__mulsf3x>:
    2502:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_split3>
    2506:	70 f3       	brcs	.-36     	; 0x24e4 <__mulsf3+0x8>

00002508 <__mulsf3_pse>:
    2508:	95 9f       	mul	r25, r21
    250a:	c1 f3       	breq	.-16     	; 0x24fc <__mulsf3+0x20>
    250c:	95 0f       	add	r25, r21
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	55 1f       	adc	r21, r21
    2512:	62 9f       	mul	r22, r18
    2514:	f0 01       	movw	r30, r0
    2516:	72 9f       	mul	r23, r18
    2518:	bb 27       	eor	r27, r27
    251a:	f0 0d       	add	r31, r0
    251c:	b1 1d       	adc	r27, r1
    251e:	63 9f       	mul	r22, r19
    2520:	aa 27       	eor	r26, r26
    2522:	f0 0d       	add	r31, r0
    2524:	b1 1d       	adc	r27, r1
    2526:	aa 1f       	adc	r26, r26
    2528:	64 9f       	mul	r22, r20
    252a:	66 27       	eor	r22, r22
    252c:	b0 0d       	add	r27, r0
    252e:	a1 1d       	adc	r26, r1
    2530:	66 1f       	adc	r22, r22
    2532:	82 9f       	mul	r24, r18
    2534:	22 27       	eor	r18, r18
    2536:	b0 0d       	add	r27, r0
    2538:	a1 1d       	adc	r26, r1
    253a:	62 1f       	adc	r22, r18
    253c:	73 9f       	mul	r23, r19
    253e:	b0 0d       	add	r27, r0
    2540:	a1 1d       	adc	r26, r1
    2542:	62 1f       	adc	r22, r18
    2544:	83 9f       	mul	r24, r19
    2546:	a0 0d       	add	r26, r0
    2548:	61 1d       	adc	r22, r1
    254a:	22 1f       	adc	r18, r18
    254c:	74 9f       	mul	r23, r20
    254e:	33 27       	eor	r19, r19
    2550:	a0 0d       	add	r26, r0
    2552:	61 1d       	adc	r22, r1
    2554:	23 1f       	adc	r18, r19
    2556:	84 9f       	mul	r24, r20
    2558:	60 0d       	add	r22, r0
    255a:	21 1d       	adc	r18, r1
    255c:	82 2f       	mov	r24, r18
    255e:	76 2f       	mov	r23, r22
    2560:	6a 2f       	mov	r22, r26
    2562:	11 24       	eor	r1, r1
    2564:	9f 57       	subi	r25, 0x7F	; 127
    2566:	50 40       	sbci	r21, 0x00	; 0
    2568:	9a f0       	brmi	.+38     	; 0x2590 <__mulsf3_pse+0x88>
    256a:	f1 f0       	breq	.+60     	; 0x25a8 <__mulsf3_pse+0xa0>
    256c:	88 23       	and	r24, r24
    256e:	4a f0       	brmi	.+18     	; 0x2582 <__mulsf3_pse+0x7a>
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	bb 1f       	adc	r27, r27
    2576:	66 1f       	adc	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	91 50       	subi	r25, 0x01	; 1
    257e:	50 40       	sbci	r21, 0x00	; 0
    2580:	a9 f7       	brne	.-22     	; 0x256c <__mulsf3_pse+0x64>
    2582:	9e 3f       	cpi	r25, 0xFE	; 254
    2584:	51 05       	cpc	r21, r1
    2586:	80 f0       	brcs	.+32     	; 0x25a8 <__mulsf3_pse+0xa0>
    2588:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__fp_inf>
    258c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_szero>
    2590:	5f 3f       	cpi	r21, 0xFF	; 255
    2592:	e4 f3       	brlt	.-8      	; 0x258c <__mulsf3_pse+0x84>
    2594:	98 3e       	cpi	r25, 0xE8	; 232
    2596:	d4 f3       	brlt	.-12     	; 0x258c <__mulsf3_pse+0x84>
    2598:	86 95       	lsr	r24
    259a:	77 95       	ror	r23
    259c:	67 95       	ror	r22
    259e:	b7 95       	ror	r27
    25a0:	f7 95       	ror	r31
    25a2:	e7 95       	ror	r30
    25a4:	9f 5f       	subi	r25, 0xFF	; 255
    25a6:	c1 f7       	brne	.-16     	; 0x2598 <__mulsf3_pse+0x90>
    25a8:	fe 2b       	or	r31, r30
    25aa:	88 0f       	add	r24, r24
    25ac:	91 1d       	adc	r25, r1
    25ae:	96 95       	lsr	r25
    25b0:	87 95       	ror	r24
    25b2:	97 f9       	bld	r25, 7
    25b4:	08 95       	ret
    25b6:	19 f4       	brne	.+6      	; 0x25be <__mulsf3_pse+0xb6>
    25b8:	16 f4       	brtc	.+4      	; 0x25be <__mulsf3_pse+0xb6>
    25ba:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_nan>
    25be:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__fp_mpack>

000025c2 <sqrt>:
    25c2:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_splitA>
    25c6:	b8 f3       	brcs	.-18     	; 0x25b6 <__mulsf3_pse+0xae>
    25c8:	99 23       	and	r25, r25
    25ca:	c9 f3       	breq	.-14     	; 0x25be <__mulsf3_pse+0xb6>
    25cc:	b6 f3       	brts	.-20     	; 0x25ba <__mulsf3_pse+0xb2>
    25ce:	9f 57       	subi	r25, 0x7F	; 127
    25d0:	55 0b       	sbc	r21, r21
    25d2:	87 ff       	sbrs	r24, 7
    25d4:	0e 94 2f 13 	call	0x265e	; 0x265e <__fp_norm2>
    25d8:	00 24       	eor	r0, r0
    25da:	a0 e6       	ldi	r26, 0x60	; 96
    25dc:	40 ea       	ldi	r20, 0xA0	; 160
    25de:	90 01       	movw	r18, r0
    25e0:	80 58       	subi	r24, 0x80	; 128
    25e2:	56 95       	lsr	r21
    25e4:	97 95       	ror	r25
    25e6:	28 f4       	brcc	.+10     	; 0x25f2 <sqrt+0x30>
    25e8:	80 5c       	subi	r24, 0xC0	; 192
    25ea:	66 0f       	add	r22, r22
    25ec:	77 1f       	adc	r23, r23
    25ee:	88 1f       	adc	r24, r24
    25f0:	20 f0       	brcs	.+8      	; 0x25fa <sqrt+0x38>
    25f2:	26 17       	cp	r18, r22
    25f4:	37 07       	cpc	r19, r23
    25f6:	48 07       	cpc	r20, r24
    25f8:	30 f4       	brcc	.+12     	; 0x2606 <sqrt+0x44>
    25fa:	62 1b       	sub	r22, r18
    25fc:	73 0b       	sbc	r23, r19
    25fe:	84 0b       	sbc	r24, r20
    2600:	20 29       	or	r18, r0
    2602:	31 29       	or	r19, r1
    2604:	4a 2b       	or	r20, r26
    2606:	a6 95       	lsr	r26
    2608:	17 94       	ror	r1
    260a:	07 94       	ror	r0
    260c:	20 25       	eor	r18, r0
    260e:	31 25       	eor	r19, r1
    2610:	4a 27       	eor	r20, r26
    2612:	58 f7       	brcc	.-42     	; 0x25ea <sqrt+0x28>
    2614:	66 0f       	add	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	88 1f       	adc	r24, r24
    261a:	20 f0       	brcs	.+8      	; 0x2624 <sqrt+0x62>
    261c:	26 17       	cp	r18, r22
    261e:	37 07       	cpc	r19, r23
    2620:	48 07       	cpc	r20, r24
    2622:	30 f4       	brcc	.+12     	; 0x2630 <sqrt+0x6e>
    2624:	62 0b       	sbc	r22, r18
    2626:	73 0b       	sbc	r23, r19
    2628:	84 0b       	sbc	r24, r20
    262a:	20 0d       	add	r18, r0
    262c:	31 1d       	adc	r19, r1
    262e:	41 1d       	adc	r20, r1
    2630:	a0 95       	com	r26
    2632:	81 f7       	brne	.-32     	; 0x2614 <sqrt+0x52>
    2634:	b9 01       	movw	r22, r18
    2636:	84 2f       	mov	r24, r20
    2638:	91 58       	subi	r25, 0x81	; 129
    263a:	88 0f       	add	r24, r24
    263c:	96 95       	lsr	r25
    263e:	87 95       	ror	r24
    2640:	08 95       	ret

00002642 <__fp_mpack>:
    2642:	9f 3f       	cpi	r25, 0xFF	; 255
    2644:	31 f0       	breq	.+12     	; 0x2652 <__fp_mpack_finite+0xc>

00002646 <__fp_mpack_finite>:
    2646:	91 50       	subi	r25, 0x01	; 1
    2648:	20 f4       	brcc	.+8      	; 0x2652 <__fp_mpack_finite+0xc>
    264a:	87 95       	ror	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	b7 95       	ror	r27
    2652:	88 0f       	add	r24, r24
    2654:	91 1d       	adc	r25, r1
    2656:	96 95       	lsr	r25
    2658:	87 95       	ror	r24
    265a:	97 f9       	bld	r25, 7
    265c:	08 95       	ret

0000265e <__fp_norm2>:
    265e:	91 50       	subi	r25, 0x01	; 1
    2660:	50 40       	sbci	r21, 0x00	; 0
    2662:	66 0f       	add	r22, r22
    2664:	77 1f       	adc	r23, r23
    2666:	88 1f       	adc	r24, r24
    2668:	d2 f7       	brpl	.-12     	; 0x265e <__fp_norm2>
    266a:	08 95       	ret

0000266c <__divmodhi4>:
    266c:	97 fb       	bst	r25, 7
    266e:	07 2e       	mov	r0, r23
    2670:	16 f4       	brtc	.+4      	; 0x2676 <__divmodhi4+0xa>
    2672:	00 94       	com	r0
    2674:	07 d0       	rcall	.+14     	; 0x2684 <__divmodhi4_neg1>
    2676:	77 fd       	sbrc	r23, 7
    2678:	09 d0       	rcall	.+18     	; 0x268c <__divmodhi4_neg2>
    267a:	0e 94 9c 13 	call	0x2738	; 0x2738 <__udivmodhi4>
    267e:	07 fc       	sbrc	r0, 7
    2680:	05 d0       	rcall	.+10     	; 0x268c <__divmodhi4_neg2>
    2682:	3e f4       	brtc	.+14     	; 0x2692 <__divmodhi4_exit>

00002684 <__divmodhi4_neg1>:
    2684:	90 95       	com	r25
    2686:	81 95       	neg	r24
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	08 95       	ret

0000268c <__divmodhi4_neg2>:
    268c:	70 95       	com	r23
    268e:	61 95       	neg	r22
    2690:	7f 4f       	sbci	r23, 0xFF	; 255

00002692 <__divmodhi4_exit>:
    2692:	08 95       	ret

00002694 <__udivmodsi4>:
    2694:	a1 e2       	ldi	r26, 0x21	; 33
    2696:	1a 2e       	mov	r1, r26
    2698:	aa 1b       	sub	r26, r26
    269a:	bb 1b       	sub	r27, r27
    269c:	fd 01       	movw	r30, r26
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <__udivmodsi4_ep>

000026a0 <__udivmodsi4_loop>:
    26a0:	aa 1f       	adc	r26, r26
    26a2:	bb 1f       	adc	r27, r27
    26a4:	ee 1f       	adc	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	a2 17       	cp	r26, r18
    26aa:	b3 07       	cpc	r27, r19
    26ac:	e4 07       	cpc	r30, r20
    26ae:	f5 07       	cpc	r31, r21
    26b0:	20 f0       	brcs	.+8      	; 0x26ba <__udivmodsi4_ep>
    26b2:	a2 1b       	sub	r26, r18
    26b4:	b3 0b       	sbc	r27, r19
    26b6:	e4 0b       	sbc	r30, r20
    26b8:	f5 0b       	sbc	r31, r21

000026ba <__udivmodsi4_ep>:
    26ba:	66 1f       	adc	r22, r22
    26bc:	77 1f       	adc	r23, r23
    26be:	88 1f       	adc	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	1a 94       	dec	r1
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <__udivmodsi4_loop>
    26c6:	60 95       	com	r22
    26c8:	70 95       	com	r23
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	9b 01       	movw	r18, r22
    26d0:	ac 01       	movw	r20, r24
    26d2:	bd 01       	movw	r22, r26
    26d4:	cf 01       	movw	r24, r30
    26d6:	08 95       	ret

000026d8 <__divmodsi4>:
    26d8:	05 2e       	mov	r0, r21
    26da:	97 fb       	bst	r25, 7
    26dc:	1e f4       	brtc	.+6      	; 0x26e4 <__divmodsi4+0xc>
    26de:	00 94       	com	r0
    26e0:	0e 94 83 13 	call	0x2706	; 0x2706 <__negsi2>
    26e4:	57 fd       	sbrc	r21, 7
    26e6:	07 d0       	rcall	.+14     	; 0x26f6 <__divmodsi4_neg2>
    26e8:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
    26ec:	07 fc       	sbrc	r0, 7
    26ee:	03 d0       	rcall	.+6      	; 0x26f6 <__divmodsi4_neg2>
    26f0:	4e f4       	brtc	.+18     	; 0x2704 <__divmodsi4_exit>
    26f2:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__negsi2>

000026f6 <__divmodsi4_neg2>:
    26f6:	50 95       	com	r21
    26f8:	40 95       	com	r20
    26fa:	30 95       	com	r19
    26fc:	21 95       	neg	r18
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	4f 4f       	sbci	r20, 0xFF	; 255
    2702:	5f 4f       	sbci	r21, 0xFF	; 255

00002704 <__divmodsi4_exit>:
    2704:	08 95       	ret

00002706 <__negsi2>:
    2706:	90 95       	com	r25
    2708:	80 95       	com	r24
    270a:	70 95       	com	r23
    270c:	61 95       	neg	r22
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	08 95       	ret

00002716 <__tablejump2__>:
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	05 90       	lpm	r0, Z+
    271c:	f4 91       	lpm	r31, Z
    271e:	e0 2d       	mov	r30, r0
    2720:	09 94       	ijmp

00002722 <__muluhisi3>:
    2722:	0e 94 b0 13 	call	0x2760	; 0x2760 <__umulhisi3>
    2726:	a5 9f       	mul	r26, r21
    2728:	90 0d       	add	r25, r0
    272a:	b4 9f       	mul	r27, r20
    272c:	90 0d       	add	r25, r0
    272e:	a4 9f       	mul	r26, r20
    2730:	80 0d       	add	r24, r0
    2732:	91 1d       	adc	r25, r1
    2734:	11 24       	eor	r1, r1
    2736:	08 95       	ret

00002738 <__udivmodhi4>:
    2738:	aa 1b       	sub	r26, r26
    273a:	bb 1b       	sub	r27, r27
    273c:	51 e1       	ldi	r21, 0x11	; 17
    273e:	07 c0       	rjmp	.+14     	; 0x274e <__udivmodhi4_ep>

00002740 <__udivmodhi4_loop>:
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	a6 17       	cp	r26, r22
    2746:	b7 07       	cpc	r27, r23
    2748:	10 f0       	brcs	.+4      	; 0x274e <__udivmodhi4_ep>
    274a:	a6 1b       	sub	r26, r22
    274c:	b7 0b       	sbc	r27, r23

0000274e <__udivmodhi4_ep>:
    274e:	88 1f       	adc	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	5a 95       	dec	r21
    2754:	a9 f7       	brne	.-22     	; 0x2740 <__udivmodhi4_loop>
    2756:	80 95       	com	r24
    2758:	90 95       	com	r25
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	08 95       	ret

00002760 <__umulhisi3>:
    2760:	a2 9f       	mul	r26, r18
    2762:	b0 01       	movw	r22, r0
    2764:	b3 9f       	mul	r27, r19
    2766:	c0 01       	movw	r24, r0
    2768:	a3 9f       	mul	r26, r19
    276a:	70 0d       	add	r23, r0
    276c:	81 1d       	adc	r24, r1
    276e:	11 24       	eor	r1, r1
    2770:	91 1d       	adc	r25, r1
    2772:	b2 9f       	mul	r27, r18
    2774:	70 0d       	add	r23, r0
    2776:	81 1d       	adc	r24, r1
    2778:	11 24       	eor	r1, r1
    277a:	91 1d       	adc	r25, r1
    277c:	08 95       	ret

0000277e <malloc>:
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	91 05       	cpc	r25, r1
    278a:	10 f4       	brcc	.+4      	; 0x2790 <malloc+0x12>
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <__flp>
    2794:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <__flp+0x1>
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	30 97       	sbiw	r30, 0x00	; 0
    27a2:	19 f1       	breq	.+70     	; 0x27ea <malloc+0x6c>
    27a4:	40 81       	ld	r20, Z
    27a6:	51 81       	ldd	r21, Z+1	; 0x01
    27a8:	02 81       	ldd	r16, Z+2	; 0x02
    27aa:	13 81       	ldd	r17, Z+3	; 0x03
    27ac:	48 17       	cp	r20, r24
    27ae:	59 07       	cpc	r21, r25
    27b0:	c8 f0       	brcs	.+50     	; 0x27e4 <malloc+0x66>
    27b2:	84 17       	cp	r24, r20
    27b4:	95 07       	cpc	r25, r21
    27b6:	69 f4       	brne	.+26     	; 0x27d2 <malloc+0x54>
    27b8:	10 97       	sbiw	r26, 0x00	; 0
    27ba:	31 f0       	breq	.+12     	; 0x27c8 <malloc+0x4a>
    27bc:	12 96       	adiw	r26, 0x02	; 2
    27be:	0c 93       	st	X, r16
    27c0:	12 97       	sbiw	r26, 0x02	; 2
    27c2:	13 96       	adiw	r26, 0x03	; 3
    27c4:	1c 93       	st	X, r17
    27c6:	27 c0       	rjmp	.+78     	; 0x2816 <malloc+0x98>
    27c8:	00 93 f2 02 	sts	0x02F2, r16	; 0x8002f2 <__flp>
    27cc:	10 93 f3 02 	sts	0x02F3, r17	; 0x8002f3 <__flp+0x1>
    27d0:	22 c0       	rjmp	.+68     	; 0x2816 <malloc+0x98>
    27d2:	21 15       	cp	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	19 f0       	breq	.+6      	; 0x27de <malloc+0x60>
    27d8:	42 17       	cp	r20, r18
    27da:	53 07       	cpc	r21, r19
    27dc:	18 f4       	brcc	.+6      	; 0x27e4 <malloc+0x66>
    27de:	9a 01       	movw	r18, r20
    27e0:	bd 01       	movw	r22, r26
    27e2:	ef 01       	movw	r28, r30
    27e4:	df 01       	movw	r26, r30
    27e6:	f8 01       	movw	r30, r16
    27e8:	db cf       	rjmp	.-74     	; 0x27a0 <malloc+0x22>
    27ea:	21 15       	cp	r18, r1
    27ec:	31 05       	cpc	r19, r1
    27ee:	f9 f0       	breq	.+62     	; 0x282e <malloc+0xb0>
    27f0:	28 1b       	sub	r18, r24
    27f2:	39 0b       	sbc	r19, r25
    27f4:	24 30       	cpi	r18, 0x04	; 4
    27f6:	31 05       	cpc	r19, r1
    27f8:	80 f4       	brcc	.+32     	; 0x281a <malloc+0x9c>
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	61 15       	cp	r22, r1
    2800:	71 05       	cpc	r23, r1
    2802:	21 f0       	breq	.+8      	; 0x280c <malloc+0x8e>
    2804:	fb 01       	movw	r30, r22
    2806:	93 83       	std	Z+3, r25	; 0x03
    2808:	82 83       	std	Z+2, r24	; 0x02
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <malloc+0x96>
    280c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <__flp+0x1>
    2810:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <__flp>
    2814:	fe 01       	movw	r30, r28
    2816:	32 96       	adiw	r30, 0x02	; 2
    2818:	44 c0       	rjmp	.+136    	; 0x28a2 <malloc+0x124>
    281a:	fe 01       	movw	r30, r28
    281c:	e2 0f       	add	r30, r18
    281e:	f3 1f       	adc	r31, r19
    2820:	81 93       	st	Z+, r24
    2822:	91 93       	st	Z+, r25
    2824:	22 50       	subi	r18, 0x02	; 2
    2826:	31 09       	sbc	r19, r1
    2828:	39 83       	std	Y+1, r19	; 0x01
    282a:	28 83       	st	Y, r18
    282c:	3a c0       	rjmp	.+116    	; 0x28a2 <malloc+0x124>
    282e:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <__brkval>
    2832:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <__brkval+0x1>
    2836:	23 2b       	or	r18, r19
    2838:	41 f4       	brne	.+16     	; 0x284a <malloc+0xcc>
    283a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    283e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2842:	30 93 f1 02 	sts	0x02F1, r19	; 0x8002f1 <__brkval+0x1>
    2846:	20 93 f0 02 	sts	0x02F0, r18	; 0x8002f0 <__brkval>
    284a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    284e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2852:	21 15       	cp	r18, r1
    2854:	31 05       	cpc	r19, r1
    2856:	41 f4       	brne	.+16     	; 0x2868 <malloc+0xea>
    2858:	2d b7       	in	r18, 0x3d	; 61
    285a:	3e b7       	in	r19, 0x3e	; 62
    285c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2860:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2864:	24 1b       	sub	r18, r20
    2866:	35 0b       	sbc	r19, r21
    2868:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <__brkval>
    286c:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <__brkval+0x1>
    2870:	e2 17       	cp	r30, r18
    2872:	f3 07       	cpc	r31, r19
    2874:	a0 f4       	brcc	.+40     	; 0x289e <malloc+0x120>
    2876:	2e 1b       	sub	r18, r30
    2878:	3f 0b       	sbc	r19, r31
    287a:	28 17       	cp	r18, r24
    287c:	39 07       	cpc	r19, r25
    287e:	78 f0       	brcs	.+30     	; 0x289e <malloc+0x120>
    2880:	ac 01       	movw	r20, r24
    2882:	4e 5f       	subi	r20, 0xFE	; 254
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	24 17       	cp	r18, r20
    2888:	35 07       	cpc	r19, r21
    288a:	48 f0       	brcs	.+18     	; 0x289e <malloc+0x120>
    288c:	4e 0f       	add	r20, r30
    288e:	5f 1f       	adc	r21, r31
    2890:	50 93 f1 02 	sts	0x02F1, r21	; 0x8002f1 <__brkval+0x1>
    2894:	40 93 f0 02 	sts	0x02F0, r20	; 0x8002f0 <__brkval>
    2898:	81 93       	st	Z+, r24
    289a:	91 93       	st	Z+, r25
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <malloc+0x124>
    289e:	e0 e0       	ldi	r30, 0x00	; 0
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	cf 01       	movw	r24, r30
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	08 95       	ret

000028ae <free>:
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <free+0xa>
    28b6:	81 c0       	rjmp	.+258    	; 0x29ba <free+0x10c>
    28b8:	fc 01       	movw	r30, r24
    28ba:	32 97       	sbiw	r30, 0x02	; 2
    28bc:	13 82       	std	Z+3, r1	; 0x03
    28be:	12 82       	std	Z+2, r1	; 0x02
    28c0:	a0 91 f2 02 	lds	r26, 0x02F2	; 0x8002f2 <__flp>
    28c4:	b0 91 f3 02 	lds	r27, 0x02F3	; 0x8002f3 <__flp+0x1>
    28c8:	10 97       	sbiw	r26, 0x00	; 0
    28ca:	81 f4       	brne	.+32     	; 0x28ec <free+0x3e>
    28cc:	20 81       	ld	r18, Z
    28ce:	31 81       	ldd	r19, Z+1	; 0x01
    28d0:	82 0f       	add	r24, r18
    28d2:	93 1f       	adc	r25, r19
    28d4:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <__brkval>
    28d8:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <__brkval+0x1>
    28dc:	28 17       	cp	r18, r24
    28de:	39 07       	cpc	r19, r25
    28e0:	51 f5       	brne	.+84     	; 0x2936 <free+0x88>
    28e2:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__brkval+0x1>
    28e6:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__brkval>
    28ea:	67 c0       	rjmp	.+206    	; 0x29ba <free+0x10c>
    28ec:	ed 01       	movw	r28, r26
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	ce 17       	cp	r28, r30
    28f4:	df 07       	cpc	r29, r31
    28f6:	40 f4       	brcc	.+16     	; 0x2908 <free+0x5a>
    28f8:	4a 81       	ldd	r20, Y+2	; 0x02
    28fa:	5b 81       	ldd	r21, Y+3	; 0x03
    28fc:	9e 01       	movw	r18, r28
    28fe:	41 15       	cp	r20, r1
    2900:	51 05       	cpc	r21, r1
    2902:	f1 f0       	breq	.+60     	; 0x2940 <free+0x92>
    2904:	ea 01       	movw	r28, r20
    2906:	f5 cf       	rjmp	.-22     	; 0x28f2 <free+0x44>
    2908:	d3 83       	std	Z+3, r29	; 0x03
    290a:	c2 83       	std	Z+2, r28	; 0x02
    290c:	40 81       	ld	r20, Z
    290e:	51 81       	ldd	r21, Z+1	; 0x01
    2910:	84 0f       	add	r24, r20
    2912:	95 1f       	adc	r25, r21
    2914:	c8 17       	cp	r28, r24
    2916:	d9 07       	cpc	r29, r25
    2918:	59 f4       	brne	.+22     	; 0x2930 <free+0x82>
    291a:	88 81       	ld	r24, Y
    291c:	99 81       	ldd	r25, Y+1	; 0x01
    291e:	84 0f       	add	r24, r20
    2920:	95 1f       	adc	r25, r21
    2922:	02 96       	adiw	r24, 0x02	; 2
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	93 83       	std	Z+3, r25	; 0x03
    292e:	82 83       	std	Z+2, r24	; 0x02
    2930:	21 15       	cp	r18, r1
    2932:	31 05       	cpc	r19, r1
    2934:	29 f4       	brne	.+10     	; 0x2940 <free+0x92>
    2936:	f0 93 f3 02 	sts	0x02F3, r31	; 0x8002f3 <__flp+0x1>
    293a:	e0 93 f2 02 	sts	0x02F2, r30	; 0x8002f2 <__flp>
    293e:	3d c0       	rjmp	.+122    	; 0x29ba <free+0x10c>
    2940:	e9 01       	movw	r28, r18
    2942:	fb 83       	std	Y+3, r31	; 0x03
    2944:	ea 83       	std	Y+2, r30	; 0x02
    2946:	49 91       	ld	r20, Y+
    2948:	59 91       	ld	r21, Y+
    294a:	c4 0f       	add	r28, r20
    294c:	d5 1f       	adc	r29, r21
    294e:	ec 17       	cp	r30, r28
    2950:	fd 07       	cpc	r31, r29
    2952:	61 f4       	brne	.+24     	; 0x296c <free+0xbe>
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	84 0f       	add	r24, r20
    295a:	95 1f       	adc	r25, r21
    295c:	02 96       	adiw	r24, 0x02	; 2
    295e:	e9 01       	movw	r28, r18
    2960:	99 83       	std	Y+1, r25	; 0x01
    2962:	88 83       	st	Y, r24
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	9b 83       	std	Y+3, r25	; 0x03
    296a:	8a 83       	std	Y+2, r24	; 0x02
    296c:	e0 e0       	ldi	r30, 0x00	; 0
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	12 96       	adiw	r26, 0x02	; 2
    2972:	8d 91       	ld	r24, X+
    2974:	9c 91       	ld	r25, X
    2976:	13 97       	sbiw	r26, 0x03	; 3
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	19 f0       	breq	.+6      	; 0x2982 <free+0xd4>
    297c:	fd 01       	movw	r30, r26
    297e:	dc 01       	movw	r26, r24
    2980:	f7 cf       	rjmp	.-18     	; 0x2970 <free+0xc2>
    2982:	8d 91       	ld	r24, X+
    2984:	9c 91       	ld	r25, X
    2986:	11 97       	sbiw	r26, 0x01	; 1
    2988:	9d 01       	movw	r18, r26
    298a:	2e 5f       	subi	r18, 0xFE	; 254
    298c:	3f 4f       	sbci	r19, 0xFF	; 255
    298e:	82 0f       	add	r24, r18
    2990:	93 1f       	adc	r25, r19
    2992:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <__brkval>
    2996:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <__brkval+0x1>
    299a:	28 17       	cp	r18, r24
    299c:	39 07       	cpc	r19, r25
    299e:	69 f4       	brne	.+26     	; 0x29ba <free+0x10c>
    29a0:	30 97       	sbiw	r30, 0x00	; 0
    29a2:	29 f4       	brne	.+10     	; 0x29ae <free+0x100>
    29a4:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <__flp+0x1>
    29a8:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <__flp>
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <free+0x104>
    29ae:	13 82       	std	Z+3, r1	; 0x03
    29b0:	12 82       	std	Z+2, r1	; 0x02
    29b2:	b0 93 f1 02 	sts	0x02F1, r27	; 0x8002f1 <__brkval+0x1>
    29b6:	a0 93 f0 02 	sts	0x02F0, r26	; 0x8002f0 <__brkval>
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <__do_global_dtors>:
    29c0:	10 e0       	ldi	r17, 0x00	; 0
    29c2:	c9 e8       	ldi	r28, 0x89	; 137
    29c4:	d0 e0       	ldi	r29, 0x00	; 0
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <__do_global_dtors+0x10>
    29c8:	fe 01       	movw	r30, r28
    29ca:	0e 94 8b 13 	call	0x2716	; 0x2716 <__tablejump2__>
    29ce:	21 96       	adiw	r28, 0x01	; 1
    29d0:	ca 38       	cpi	r28, 0x8A	; 138
    29d2:	d1 07       	cpc	r29, r17
    29d4:	c9 f7       	brne	.-14     	; 0x29c8 <__do_global_dtors+0x8>
    29d6:	f8 94       	cli

000029d8 <__stop_program>:
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <__stop_program>
