
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800100  00800100  00000782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004523  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f5  00000000  00000000  00004f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000148d  00000000  00000000  00006414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  000078a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ea9  00000000  00000000  00007d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001786  00000000  00000000  00009bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000b357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_3>
  10:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_3>
  14:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_3>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	a6 00       	.word	0x00a6	; ????

000000c4 <__ctors_end>:
  c4:	b4 00       	.word	0x00b4	; ????

000000c6 <__dtors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	ee e0       	ldi	r30, 0x0E	; 14
  da:	f7 e0       	ldi	r31, 0x07	; 7
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a0 30       	cpi	r26, 0x00	; 0
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a3 35       	cpi	r26, 0x53	; 83
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c2 e6       	ldi	r28, 0x62	; 98
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	fe 01       	movw	r30, r28
 104:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__tablejump2__>
 108:	c1 36       	cpi	r28, 0x61	; 97
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
 10e:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
 112:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__do_global_dtors>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
	#endif
	// put your setup code here, to run once:

	led.TurnOff();
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_ZN10LedBlinker7TurnOffEv>

00000122 <loop>:
void loop() {
	#ifdef DEBUG
		Serial.println("Distance detector on");
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN12LengthSensor7MeasureEv>
	
	#ifdef DEBUG
		Serial.println(distance);
	#endif
		
	if(distance > 0)
 12a:	18 16       	cp	r1, r24
 12c:	19 06       	cpc	r1, r25
 12e:	54 f4       	brge	.+20     	; 0x144 <loop+0x22>
	{
		led.TurnOn();
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN10LedBlinker6TurnOnEv>
		delay(2000);
 138:	60 ed       	ldi	r22, 0xD0	; 208
 13a:	77 e0       	ldi	r23, 0x07	; 7
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 9d 01 	call	0x33a	; 0x33a <delay>
	}
	
	led.TurnOff();
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_ZN10LedBlinker7TurnOffEv>

0000014c <_GLOBAL__sub_I_led>:
#define TRIG_PIN 8
#define ECHO_PIN 9

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 14c:	65 e0       	ldi	r22, 0x05	; 5
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
 158:	48 e0       	ldi	r20, 0x08	; 8
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	69 e0       	ldi	r22, 0x09	; 9
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0c 94 ca 00 	jmp	0x194	; 0x194 <_ZN12LengthSensorC1Eii>

00000168 <_GLOBAL__sub_D_led>:
#define TRIG_PIN 8
#define ECHO_PIN 9

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_ZN10LedBlinkerD1Ev>

00000170 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
 170:	fc 01       	movw	r30, r24
 172:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
 174:	60 83       	st	Z, r22
 176:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <pinMode>

0000017e <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
 17e:	08 95       	ret

00000180 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <digitalWrite>

0000018a <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <digitalWrite>

00000194 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
 19c:	68 83       	st	Y, r22
 19e:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
 1a0:	5b 83       	std	Y+3, r21	; 0x03
 1a2:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 3d 02 	call	0x47a	; 0x47a <pinMode>
	pinMode(m_trigPin, OUTPUT);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
 1b2:	0c 94 3d 02 	jmp	0x47a	; 0x47a <pinMode>

000001b6 <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <digitalWrite>
	delay(10);
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 9d 01 	call	0x33a	; 0x33a <delay>
	digitalWrite(m_echoPin, LOW);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	88 81       	ld	r24, Y
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delay(10);
	digitalWrite(m_echoPin, LOW);
 1d8:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <digitalWrite>

000001dc <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	8c 01       	movw	r16, r24
	  Ping();
 1e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  if(digitalRead(m_echoPin) != HIGH)
 1ea:	f8 01       	movw	r30, r16
 1ec:	80 81       	ld	r24, Z
 1ee:	0e 94 a8 02 	call	0x550	; 0x550 <digitalRead>
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	e1 f4       	brne	.+56     	; 0x22e <_ZN12LengthSensor7MeasureEv+0x52>
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
	  {
		  return -1;
	  }
	  
	  int time = 0;
	  while(digitalRead(m_echoPin) != LOW) {
 1fa:	f8 01       	movw	r30, r16
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 a8 02 	call	0x550	; 0x550 <digitalRead>
 202:	89 2b       	or	r24, r25
 204:	41 f0       	breq	.+16     	; 0x216 <_ZN12LengthSensor7MeasureEv+0x3a>
		  time++;
 206:	21 96       	adiw	r28, 0x01	; 1
		  delay(1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 9d 01 	call	0x33a	; 0x33a <delay>
	  {
		  return -1;
	  }
	  
	  int time = 0;
	  while(digitalRead(m_echoPin) != LOW) {
 214:	f2 cf       	rjmp	.-28     	; 0x1fa <_ZN12LengthSensor7MeasureEv+0x1e>
		  time++;
		  delay(1);
	  }
	  
	  return (time * 34) / 2000;
 216:	22 e2       	ldi	r18, 0x22	; 34
 218:	2c 9f       	mul	r18, r28
 21a:	c0 01       	movw	r24, r0
 21c:	2d 9f       	mul	r18, r29
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	60 ed       	ldi	r22, 0xD0	; 208
 224:	77 e0       	ldi	r23, 0x07	; 7
 226:	0e 94 4c 03 	call	0x698	; 0x698 <__divmodhi4>
 22a:	cb 01       	movw	r24, r22
 22c:	02 c0       	rjmp	.+4      	; 0x232 <_ZN12LengthSensor7MeasureEv+0x56>
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  if(digitalRead(m_echoPin) != HIGH)
	  {
		  return -1;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	9f ef       	ldi	r25, 0xFF	; 255
		  time++;
		  delay(1);
	  }
	  
	  return (time * 34) / 2000;
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <initVariant>:
 23c:	08 95       	ret

0000023e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 23e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <init>

	initVariant();
 242:	0e 94 1e 01 	call	0x23c	; 0x23c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 246:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 24e:	0e 94 91 00 	call	0x122	; 0x122 <loop>
		if (serialEventRun) serialEventRun();
 252:	20 97       	sbiw	r28, 0x00	; 0
 254:	e1 f3       	breq	.-8      	; 0x24e <main+0x10>
 256:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 25a:	f9 cf       	rjmp	.-14     	; 0x24e <main+0x10>

0000025c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 276:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 27a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 27e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 282:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <timer0_fract>
 286:	23 e0       	ldi	r18, 0x03	; 3
 288:	23 0f       	add	r18, r19
 28a:	2d 37       	cpi	r18, 0x7D	; 125
 28c:	20 f4       	brcc	.+8      	; 0x296 <__vector_16+0x3a>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	a1 1d       	adc	r26, r1
 292:	b1 1d       	adc	r27, r1
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_16+0x44>
 296:	26 e8       	ldi	r18, 0x86	; 134
 298:	23 0f       	add	r18, r19
 29a:	02 96       	adiw	r24, 0x02	; 2
 29c:	a1 1d       	adc	r26, r1
 29e:	b1 1d       	adc	r27, r1
 2a0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <timer0_fract>
 2a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 2a8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 2ac:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 2b0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 2b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 2b8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 2bc:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 2c0:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	a1 1d       	adc	r26, r1
 2c8:	b1 1d       	adc	r27, r1
 2ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer0_overflow_count>
 2ce:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timer0_overflow_count+0x1>
 2d2:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <timer0_overflow_count+0x2>
 2d6:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <timer0_overflow_count+0x3>
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <micros>:
 2f0:	3f b7       	in	r19, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer0_overflow_count>
 2f8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer0_overflow_count+0x1>
 2fc:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <timer0_overflow_count+0x2>
 300:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <timer0_overflow_count+0x3>
 304:	26 b5       	in	r18, 0x26	; 38
 306:	a8 9b       	sbis	0x15, 0	; 21
 308:	05 c0       	rjmp	.+10     	; 0x314 <micros+0x24>
 30a:	2f 3f       	cpi	r18, 0xFF	; 255
 30c:	19 f0       	breq	.+6      	; 0x314 <micros+0x24>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	a1 1d       	adc	r26, r1
 312:	b1 1d       	adc	r27, r1
 314:	3f bf       	out	0x3f, r19	; 63
 316:	ba 2f       	mov	r27, r26
 318:	a9 2f       	mov	r26, r25
 31a:	98 2f       	mov	r25, r24
 31c:	88 27       	eor	r24, r24
 31e:	82 0f       	add	r24, r18
 320:	91 1d       	adc	r25, r1
 322:	a1 1d       	adc	r26, r1
 324:	b1 1d       	adc	r27, r1
 326:	bc 01       	movw	r22, r24
 328:	cd 01       	movw	r24, r26
 32a:	42 e0       	ldi	r20, 0x02	; 2
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	4a 95       	dec	r20
 336:	d1 f7       	brne	.-12     	; 0x32c <micros+0x3c>
 338:	08 95       	ret

0000033a <delay>:
 33a:	8f 92       	push	r8
 33c:	9f 92       	push	r9
 33e:	af 92       	push	r10
 340:	bf 92       	push	r11
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
 34e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <micros>
 352:	4b 01       	movw	r8, r22
 354:	5c 01       	movw	r10, r24
 356:	c1 14       	cp	r12, r1
 358:	d1 04       	cpc	r13, r1
 35a:	e1 04       	cpc	r14, r1
 35c:	f1 04       	cpc	r15, r1
 35e:	01 f1       	breq	.+64     	; 0x3a0 <delay+0x66>
 360:	0e 94 4b 03 	call	0x696	; 0x696 <yield>
 364:	0e 94 78 01 	call	0x2f0	; 0x2f0 <micros>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	88 19       	sub	r24, r8
 36e:	99 09       	sbc	r25, r9
 370:	aa 09       	sbc	r26, r10
 372:	bb 09       	sbc	r27, r11
 374:	88 3e       	cpi	r24, 0xE8	; 232
 376:	93 40       	sbci	r25, 0x03	; 3
 378:	a1 05       	cpc	r26, r1
 37a:	b1 05       	cpc	r27, r1
 37c:	60 f3       	brcs	.-40     	; 0x356 <delay+0x1c>
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	c2 1a       	sub	r12, r18
 382:	d1 08       	sbc	r13, r1
 384:	e1 08       	sbc	r14, r1
 386:	f1 08       	sbc	r15, r1
 388:	88 ee       	ldi	r24, 0xE8	; 232
 38a:	88 0e       	add	r8, r24
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	98 1e       	adc	r9, r24
 390:	a1 1c       	adc	r10, r1
 392:	b1 1c       	adc	r11, r1
 394:	c1 14       	cp	r12, r1
 396:	d1 04       	cpc	r13, r1
 398:	e1 04       	cpc	r14, r1
 39a:	f1 04       	cpc	r15, r1
 39c:	19 f7       	brne	.-58     	; 0x364 <delay+0x2a>
 39e:	db cf       	rjmp	.-74     	; 0x356 <delay+0x1c>
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	9f 90       	pop	r9
 3ae:	8f 90       	pop	r8
 3b0:	08 95       	ret

000003b2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3b2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3b4:	84 b5       	in	r24, 0x24	; 36
 3b6:	82 60       	ori	r24, 0x02	; 2
 3b8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3ba:	84 b5       	in	r24, 0x24	; 36
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3c0:	85 b5       	in	r24, 0x25	; 37
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3c6:	85 b5       	in	r24, 0x25	; 37
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3cc:	ee e6       	ldi	r30, 0x6E	; 110
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3d6:	e1 e8       	ldi	r30, 0x81	; 129
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3e2:	80 81       	ld	r24, Z
 3e4:	81 60       	ori	r24, 0x01	; 1
 3e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3f2:	e1 eb       	ldi	r30, 0xB1	; 177
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	84 60       	ori	r24, 0x04	; 4
 3fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3fc:	e0 eb       	ldi	r30, 0xB0	; 176
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	81 60       	ori	r24, 0x01	; 1
 404:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 406:	ea e7       	ldi	r30, 0x7A	; 122
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 410:	80 81       	ld	r24, Z
 412:	82 60       	ori	r24, 0x02	; 2
 414:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 416:	80 81       	ld	r24, Z
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 41c:	80 81       	ld	r24, Z
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 422:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 426:	08 95       	ret

00000428 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	81 f0       	breq	.+32     	; 0x44c <turnOffPWM+0x24>
 42c:	28 f4       	brcc	.+10     	; 0x438 <turnOffPWM+0x10>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	99 f0       	breq	.+38     	; 0x458 <turnOffPWM+0x30>
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	a1 f0       	breq	.+40     	; 0x45e <turnOffPWM+0x36>
 436:	08 95       	ret
 438:	87 30       	cpi	r24, 0x07	; 7
 43a:	a9 f0       	breq	.+42     	; 0x466 <turnOffPWM+0x3e>
 43c:	88 30       	cpi	r24, 0x08	; 8
 43e:	b9 f0       	breq	.+46     	; 0x46e <turnOffPWM+0x46>
 440:	84 30       	cpi	r24, 0x04	; 4
 442:	d1 f4       	brne	.+52     	; 0x478 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 444:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 448:	8f 7d       	andi	r24, 0xDF	; 223
 44a:	03 c0       	rjmp	.+6      	; 0x452 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 44c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 450:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 452:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 456:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 458:	84 b5       	in	r24, 0x24	; 36
 45a:	8f 77       	andi	r24, 0x7F	; 127
 45c:	02 c0       	rjmp	.+4      	; 0x462 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 45e:	84 b5       	in	r24, 0x24	; 36
 460:	8f 7d       	andi	r24, 0xDF	; 223
 462:	84 bd       	out	0x24, r24	; 36
 464:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 466:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 46a:	8f 77       	andi	r24, 0x7F	; 127
 46c:	03 c0       	rjmp	.+6      	; 0x474 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 46e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 472:	8f 7d       	andi	r24, 0xDF	; 223
 474:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 478:	08 95       	ret

0000047a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	e4 58       	subi	r30, 0x84	; 132
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 488:	fc 01       	movw	r30, r24
 48a:	e0 57       	subi	r30, 0x70	; 112
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 490:	88 23       	and	r24, r24
 492:	61 f1       	breq	.+88     	; 0x4ec <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	fc 01       	movw	r30, r24
 49c:	e8 54       	subi	r30, 0x48	; 72
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	c5 91       	lpm	r28, Z+
 4a2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 4a4:	fc 01       	movw	r30, r24
 4a6:	e2 55       	subi	r30, 0x52	; 82
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	a5 91       	lpm	r26, Z+
 4ac:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 4ae:	61 11       	cpse	r22, r1
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 4b2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4b4:	f8 94       	cli
		*reg &= ~bit;
 4b6:	88 81       	ld	r24, Y
 4b8:	20 95       	com	r18
 4ba:	82 23       	and	r24, r18
 4bc:	88 83       	st	Y, r24
		*out &= ~bit;
 4be:	ec 91       	ld	r30, X
 4c0:	2e 23       	and	r18, r30
 4c2:	0b c0       	rjmp	.+22     	; 0x4da <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 4c4:	62 30       	cpi	r22, 0x02	; 2
 4c6:	61 f4       	brne	.+24     	; 0x4e0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 4c8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4ca:	f8 94       	cli
		*reg &= ~bit;
 4cc:	88 81       	ld	r24, Y
 4ce:	32 2f       	mov	r19, r18
 4d0:	30 95       	com	r19
 4d2:	83 23       	and	r24, r19
 4d4:	88 83       	st	Y, r24
		*out |= bit;
 4d6:	ec 91       	ld	r30, X
 4d8:	2e 2b       	or	r18, r30
 4da:	2c 93       	st	X, r18
		SREG = oldSREG;
 4dc:	9f bf       	out	0x3f, r25	; 63
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 4e0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 4e2:	f8 94       	cli
		*reg |= bit;
 4e4:	e8 81       	ld	r30, Y
 4e6:	2e 2b       	or	r18, r30
 4e8:	28 83       	st	Y, r18
		SREG = oldSREG;
 4ea:	8f bf       	out	0x3f, r24	; 63
	}
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	e8 59       	subi	r30, 0x98	; 152
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 504:	f9 01       	movw	r30, r18
 506:	e4 58       	subi	r30, 0x84	; 132
 508:	ff 4f       	sbci	r31, 0xFF	; 255
 50a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 50c:	f9 01       	movw	r30, r18
 50e:	e0 57       	subi	r30, 0x70	; 112
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 514:	cc 23       	and	r28, r28
 516:	c1 f0       	breq	.+48     	; 0x548 <digitalWrite+0x56>
 518:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 51a:	81 11       	cpse	r24, r1
 51c:	0e 94 14 02 	call	0x428	; 0x428 <turnOffPWM>

	out = portOutputRegister(port);
 520:	ec 2f       	mov	r30, r28
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	e2 55       	subi	r30, 0x52	; 82
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	a5 91       	lpm	r26, Z+
 52e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 530:	9f b7       	in	r25, 0x3f	; 63
	cli();
 532:	f8 94       	cli

	if (val == LOW) {
 534:	11 11       	cpse	r17, r1
 536:	04 c0       	rjmp	.+8      	; 0x540 <digitalWrite+0x4e>
		*out &= ~bit;
 538:	8c 91       	ld	r24, X
 53a:	d0 95       	com	r29
 53c:	d8 23       	and	r29, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <digitalWrite+0x52>
	} else {
		*out |= bit;
 540:	ec 91       	ld	r30, X
 542:	de 2b       	or	r29, r30
 544:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 546:	9f bf       	out	0x3f, r25	; 63
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	08 95       	ret

00000550 <digitalRead>:

int digitalRead(uint8_t pin)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	f9 01       	movw	r30, r18
 55a:	e8 59       	subi	r30, 0x98	; 152
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 560:	f9 01       	movw	r30, r18
 562:	e4 58       	subi	r30, 0x84	; 132
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 568:	f9 01       	movw	r30, r18
 56a:	e0 57       	subi	r30, 0x70	; 112
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 570:	cc 23       	and	r28, r28
 572:	91 f0       	breq	.+36     	; 0x598 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 574:	81 11       	cpse	r24, r1
 576:	0e 94 14 02 	call	0x428	; 0x428 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 57a:	ec 2f       	mov	r30, r28
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ec 55       	subi	r30, 0x5C	; 92
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	a5 91       	lpm	r26, Z+
 588:	b4 91       	lpm	r27, Z
 58a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 58c:	ed 23       	and	r30, r29
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	21 f4       	brne	.+8      	; 0x59c <digitalRead+0x4c>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <digitalRead+0x4c>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 5c4:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZN14SoftwareSerial13active_objectE>
 5c8:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <_ZN14SoftwareSerial13active_objectE+0x1>
 5cc:	30 97       	sbiw	r30, 0x00	; 0
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__vector_3+0x30>
 5d0:	51 c0       	rjmp	.+162    	; 0x674 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 5d2:	96 8d       	ldd	r25, Z+30	; 0x1e
 5d4:	a6 85       	ldd	r26, Z+14	; 0x0e
 5d6:	b7 85       	ldd	r27, Z+15	; 0x0f
 5d8:	85 85       	ldd	r24, Z+13	; 0x0d
 5da:	91 ff       	sbrs	r25, 1
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 5de:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 5e0:	89 23       	and	r24, r25
 5e2:	29 f4       	brne	.+10     	; 0x5ee <__vector_3+0x4c>
 5e4:	47 c0       	rjmp	.+142    	; 0x674 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 5e6:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 5e8:	89 23       	and	r24, r25
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_3+0x4c>
 5ec:	43 c0       	rjmp	.+134    	; 0x674 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 5ee:	a3 89       	ldd	r26, Z+19	; 0x13
 5f0:	b4 89       	ldd	r27, Z+20	; 0x14
 5f2:	9c 91       	ld	r25, X
 5f4:	85 89       	ldd	r24, Z+21	; 0x15
 5f6:	80 95       	com	r24
 5f8:	89 23       	and	r24, r25
 5fa:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 5fc:	86 89       	ldd	r24, Z+22	; 0x16
 5fe:	97 89       	ldd	r25, Z+23	; 0x17
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 604:	60 8d       	ldd	r22, Z+24	; 0x18
 606:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 608:	a6 85       	ldd	r26, Z+14	; 0x0e
 60a:	b7 85       	ldd	r27, Z+15	; 0x0f
 60c:	55 85       	ldd	r21, Z+13	; 0x0d
 60e:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	cb 01       	movw	r24, r22
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 618:	82 2f       	mov	r24, r18
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	95 95       	asr	r25
 61e:	87 95       	ror	r24
 620:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 622:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 624:	45 23       	and	r20, r21
 626:	09 f0       	breq	.+2      	; 0x62a <__vector_3+0x88>
        d |= 0x80;
 628:	20 68       	ori	r18, 0x80	; 128
 62a:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 62c:	91 f7       	brne	.-28     	; 0x612 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 62e:	86 8d       	ldd	r24, Z+30	; 0x1e
 630:	81 fd       	sbrc	r24, 1
      d = ~d;
 632:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 634:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	8f 73       	andi	r24, 0x3F	; 63
 63e:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
 640:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <_ZN14SoftwareSerial20_receive_buffer_headE>
 644:	38 17       	cp	r19, r24
 646:	49 f0       	breq	.+18     	; 0x65a <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 648:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	af 5e       	subi	r26, 0xEF	; 239
 650:	be 4f       	sbci	r27, 0xFE	; 254
 652:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
 654:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 658:	03 c0       	rjmp	.+6      	; 0x660 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 65a:	86 8d       	ldd	r24, Z+30	; 0x1e
 65c:	81 60       	ori	r24, 0x01	; 1
 65e:	86 8f       	std	Z+30, r24	; 0x1e
 660:	82 8d       	ldd	r24, Z+26	; 0x1a
 662:	93 8d       	ldd	r25, Z+27	; 0x1b
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 668:	a3 89       	ldd	r26, Z+19	; 0x13
 66a:	b4 89       	ldd	r27, Z+20	; 0x14
 66c:	9c 91       	ld	r25, X
 66e:	85 89       	ldd	r24, Z+21	; 0x15
 670:	89 2b       	or	r24, r25
 672:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 696:	08 95       	ret

00000698 <__divmodhi4>:
 698:	97 fb       	bst	r25, 7
 69a:	07 2e       	mov	r0, r23
 69c:	16 f4       	brtc	.+4      	; 0x6a2 <__divmodhi4+0xa>
 69e:	00 94       	com	r0
 6a0:	07 d0       	rcall	.+14     	; 0x6b0 <__divmodhi4_neg1>
 6a2:	77 fd       	sbrc	r23, 7
 6a4:	09 d0       	rcall	.+18     	; 0x6b8 <__divmodhi4_neg2>
 6a6:	0e 94 66 03 	call	0x6cc	; 0x6cc <__udivmodhi4>
 6aa:	07 fc       	sbrc	r0, 7
 6ac:	05 d0       	rcall	.+10     	; 0x6b8 <__divmodhi4_neg2>
 6ae:	3e f4       	brtc	.+14     	; 0x6be <__divmodhi4_exit>

000006b0 <__divmodhi4_neg1>:
 6b0:	90 95       	com	r25
 6b2:	81 95       	neg	r24
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__divmodhi4_neg2>:
 6b8:	70 95       	com	r23
 6ba:	61 95       	neg	r22
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255

000006be <__divmodhi4_exit>:
 6be:	08 95       	ret

000006c0 <__tablejump2__>:
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	05 90       	lpm	r0, Z+
 6c6:	f4 91       	lpm	r31, Z
 6c8:	e0 2d       	mov	r30, r0
 6ca:	09 94       	ijmp

000006cc <__udivmodhi4>:
 6cc:	aa 1b       	sub	r26, r26
 6ce:	bb 1b       	sub	r27, r27
 6d0:	51 e1       	ldi	r21, 0x11	; 17
 6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <__udivmodhi4_ep>

000006d4 <__udivmodhi4_loop>:
 6d4:	aa 1f       	adc	r26, r26
 6d6:	bb 1f       	adc	r27, r27
 6d8:	a6 17       	cp	r26, r22
 6da:	b7 07       	cpc	r27, r23
 6dc:	10 f0       	brcs	.+4      	; 0x6e2 <__udivmodhi4_ep>
 6de:	a6 1b       	sub	r26, r22
 6e0:	b7 0b       	sbc	r27, r23

000006e2 <__udivmodhi4_ep>:
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	5a 95       	dec	r21
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__udivmodhi4_loop>
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	bc 01       	movw	r22, r24
 6f0:	cd 01       	movw	r24, r26
 6f2:	08 95       	ret

000006f4 <__do_global_dtors>:
 6f4:	10 e0       	ldi	r17, 0x00	; 0
 6f6:	c2 e6       	ldi	r28, 0x62	; 98
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__do_global_dtors+0x10>
 6fc:	fe 01       	movw	r30, r28
 6fe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__tablejump2__>
 702:	21 96       	adiw	r28, 0x01	; 1
 704:	c3 36       	cpi	r28, 0x63	; 99
 706:	d1 07       	cpc	r29, r17
 708:	c9 f7       	brne	.-14     	; 0x6fc <__do_global_dtors+0x8>
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
