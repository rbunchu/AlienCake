
AlienCake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  00001c74  00001d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  008001f4  008001f4  00001dfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b0  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013a11  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003303  00000000  00000000  00015f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000394c  00000000  00000000  00019230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010e4  00000000  00000000  0001cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000384f  00000000  00000000  0001dc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b54  00000000  00000000  000214af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  00027003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__dtors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_3>
      10:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_3>
      14:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_3>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_16>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__vector_18>
      4c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_19>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      68:	98 03       	fmulsu	r17, r16
      6a:	9f 03       	fmulsu	r17, r23
      6c:	ad 03       	fmulsu	r18, r21
      6e:	8c 03       	fmulsu	r16, r20
      70:	ad 03       	fmulsu	r18, r21
      72:	91 03       	fmuls	r17, r17
      74:	a6 03       	fmuls	r18, r22
      76:	bf 03       	fmulsu	r19, r23
      78:	ad 03       	fmulsu	r18, r21
      7a:	ad 03       	fmulsu	r18, r21
      7c:	ad 03       	fmulsu	r18, r21
      7e:	ad 03       	fmulsu	r18, r21
      80:	ad 03       	fmulsu	r18, r21
      82:	ad 03       	fmulsu	r18, r21
      84:	ad 03       	fmulsu	r18, r21
      86:	ad 03       	fmulsu	r18, r21
      88:	b1 03       	fmuls	r19, r17
      8a:	ad 03       	fmulsu	r18, r21
      8c:	ad 03       	fmulsu	r18, r21
      8e:	ad 03       	fmulsu	r18, r21
      90:	ad 03       	fmulsu	r18, r21
      92:	ad 03       	fmulsu	r18, r21

00000094 <__trampolines_end>:
      94:	00 00       	nop
      96:	00 08       	sbc	r0, r0
      98:	00 02       	muls	r16, r16
      9a:	01 00       	.word	0x0001	; ????
      9c:	00 03       	mulsu	r16, r16
      9e:	04 07       	cpc	r16, r20
	...

000000a8 <digital_pin_to_bit_mask_PGM>:
      a8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b8:	04 08 10 20                                         ... 

000000bc <digital_pin_to_port_PGM>:
      bc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      cc:	03 03 03 03                                         ....

000000d0 <port_to_input_PGM>:
      d0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000da <port_to_output_PGM>:
      da:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e4 <port_to_mode_PGM>:
      e4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ee <__ctors_start>:
      ee:	7a 01       	movw	r14, r20
      f0:	9f 06       	cpc	r9, r31

000000f2 <__ctors_end>:
      f2:	a6 01       	movw	r20, r12

000000f4 <__dtors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d8 e0       	ldi	r29, 0x08	; 8
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e4 e7       	ldi	r30, 0x74	; 116
     108:	fc e1       	ldi	r31, 0x1C	; 28
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a4 3f       	cpi	r26, 0xF4	; 244
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
     116:	22 e0       	ldi	r18, 0x02	; 2
     118:	a4 ef       	ldi	r26, 0xF4	; 244
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a7 3f       	cpi	r26, 0xF7	; 247
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>

00000126 <__do_global_ctors>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	c9 e7       	ldi	r28, 0x79	; 121
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_global_ctors+0x10>
     12e:	21 97       	sbiw	r28, 0x01	; 1
     130:	fe 01       	movw	r30, r28
     132:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__tablejump2__>
     136:	c7 37       	cpi	r28, 0x77	; 119
     138:	d1 07       	cpc	r29, r17
     13a:	c9 f7       	brne	.-14     	; 0x12e <__do_global_ctors+0x8>
     13c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <main>
     140:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__do_global_dtors>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <setup>:
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
ReedSwitch reedSwitch(PIN_D12);

unsigned long stopTime = 0;

void setup() {
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     14c:	26 e0       	ldi	r18, 0x06	; 6
     14e:	40 e8       	ldi	r20, 0x80	; 128
     150:	55 e2       	ldi	r21, 0x25	; 37
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	89 e0       	ldi	r24, 0x09	; 9
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN14HardwareSerial5beginEmh>
	#ifdef DEBUG
		Serial.begin(9600);
		Serial.println("Starting program for Alien Cake");
     15e:	60 e1       	ldi	r22, 0x10	; 16
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	89 e0       	ldi	r24, 0x09	; 9
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
	#endif
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX, MP3_BUSY);
     16a:	8e e2       	ldi	r24, 0x2E	; 46
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_Znwj>
     172:	ec 01       	movw	r28, r24
     174:	23 e0       	ldi	r18, 0x03	; 3
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	4b e0       	ldi	r20, 0x0B	; 11
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	6a e0       	ldi	r22, 0x0A	; 10
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN9Mp3PlayerC1Eiii>
     184:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <mp3+0x1>
     188:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <mp3>
	delay(1000); //Wait 1 second to mp3 player init itself
     18c:	68 ee       	ldi	r22, 0xE8	; 232
     18e:	73 e0       	ldi	r23, 0x03	; 3
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>

	led.TurnOff();
     198:	87 e0       	ldi	r24, 0x07	; 7
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN10LedBlinker7TurnOffEv>
	pinMode(PIN_D12, INPUT_PULLUP);
     1a0:	62 e0       	ldi	r22, 0x02	; 2
     1a2:	8c e0       	ldi	r24, 0x0C	; 12
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
	// put your setup code here, to run once:
	mp3 = new Mp3Player(MP3_RX, MP3_TX, MP3_BUSY);
	delay(1000); //Wait 1 second to mp3 player init itself

	led.TurnOff();
	pinMode(PIN_D12, INPUT_PULLUP);
     1a8:	0c 94 88 09 	jmp	0x1310	; 0x1310 <pinMode>

000001ac <loop>:
}

void loop() {
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
	#ifdef DEBUG
		Serial.println("Distance detector on");
     1b4:	60 e3       	ldi	r22, 0x30	; 48
     1b6:	71 e0       	ldi	r23, 0x01	; 1
     1b8:	89 e0       	ldi	r24, 0x09	; 9
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
	#endif
  // put your main code here, to run repeatedly:
	int distance = sensor.Measure();
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN12LengthSensor7MeasureEv>
     1c8:	ec 01       	movw	r28, r24
	
	#ifdef DEBUG
		Serial.println(distance);
     1ca:	4a e0       	ldi	r20, 0x0A	; 10
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	bc 01       	movw	r22, r24
     1d0:	89 e0       	ldi	r24, 0x09	; 9
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN5Print7printlnEii>
	#endif
		 
	if(distance > 0 && distance < 60) //About 1 meter
     1d8:	ce 01       	movw	r24, r28
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	cb 97       	sbiw	r24, 0x3b	; 59
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <loop+0x36>
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <loop+0xe0>
	{
		led.TurnOn();
     1e2:	87 e0       	ldi	r24, 0x07	; 7
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN10LedBlinker6TurnOnEv>
		//Check if player is playing mp3
		if(!mp3->isBusy())
     1ea:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mp3>
     1ee:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <mp3+0x1>
     1f2:	0e 94 32 03 	call	0x664	; 0x664 <_ZN9Mp3Player6isBusyEv>
     1f6:	81 11       	cpse	r24, r1
     1f8:	06 c0       	rjmp	.+12     	; 0x206 <loop+0x5a>
		{
			mp3->Play();
     1fa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mp3>
     1fe:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <mp3+0x1>
     202:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN9Mp3Player4PlayEv>
		}		
		
		if(distance < 40) //half a meter turn on motorized pole
     206:	a8 97       	sbiw	r28, 0x28	; 40
     208:	8c f5       	brge	.+98     	; 0x26c <loop+0xc0>
		{
			driver.Start(DriverCanalType::CANAL_1, 250);
     20a:	4a ef       	ldi	r20, 0xFA	; 250
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	8a ef       	ldi	r24, 0xFA	; 250
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN11MotorDriver5StartE15DriverCanalTypei>
			delay(3000);
     218:	68 eb       	ldi	r22, 0xB8	; 184
     21a:	7b e0       	ldi	r23, 0x0B	; 11
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>
			driver.Stop(DriverCanalType::CANAL_1);
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	8a ef       	ldi	r24, 0xFA	; 250
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN11MotorDriver4StopE15DriverCanalType>
			driver.ChangeDirection(DriverCanalType::CANAL_1, COUNTER_CLOCKWISE);
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	8a ef       	ldi	r24, 0xFA	; 250
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection>
			driver.Start(DriverCanalType::CANAL_1, 250);
     23a:	4a ef       	ldi	r20, 0xFA	; 250
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	8a ef       	ldi	r24, 0xFA	; 250
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN11MotorDriver5StartE15DriverCanalTypei>
			while(reedSwitch.Check() != LOW)
     248:	88 ef       	ldi	r24, 0xF8	; 248
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 43 03 	call	0x686	; 0x686 <_ZN10ReedSwitch5CheckEv>
     250:	89 2b       	or	r24, r25
     252:	39 f0       	breq	.+14     	; 0x262 <loop+0xb6>
			{
				//Run motor until switch is connected
				delay(10);
     254:	6a e0       	ldi	r22, 0x0A	; 10
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>
			driver.Start(DriverCanalType::CANAL_1, 250);
			delay(3000);
			driver.Stop(DriverCanalType::CANAL_1);
			driver.ChangeDirection(DriverCanalType::CANAL_1, COUNTER_CLOCKWISE);
			driver.Start(DriverCanalType::CANAL_1, 250);
			while(reedSwitch.Check() != LOW)
     260:	f3 cf       	rjmp	.-26     	; 0x248 <loop+0x9c>
			{
				//Run motor until switch is connected
				delay(10);
			}
			driver.Stop(DriverCanalType::CANAL_1);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	8a ef       	ldi	r24, 0xFA	; 250
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN11MotorDriver4StopE15DriverCanalType>
		}
		delay(2000);
     26c:	60 ed       	ldi	r22, 0xD0	; 208
     26e:	77 e0       	ldi	r23, 0x07	; 7
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>
		stopTime = millis();
     278:	0e 94 4d 08 	call	0x109a	; 0x109a <millis>
     27c:	60 93 f4 01 	sts	0x01F4, r22	; 0x8001f4 <__data_end>
     280:	70 93 f5 01 	sts	0x01F5, r23	; 0x8001f5 <__data_end+0x1>
     284:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <__data_end+0x2>
     288:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <__data_end+0x3>
	}

	if(mp3->isBusy() && (millis() - stopTime > 1000))
     28c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mp3>
     290:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <mp3+0x1>
     294:	0e 94 32 03 	call	0x664	; 0x664 <_ZN9Mp3Player6isBusyEv>
     298:	88 23       	and	r24, r24
     29a:	a9 f0       	breq	.+42     	; 0x2c6 <loop+0x11a>
     29c:	0e 94 4d 08 	call	0x109a	; 0x109a <millis>
     2a0:	00 91 f4 01 	lds	r16, 0x01F4	; 0x8001f4 <__data_end>
     2a4:	10 91 f5 01 	lds	r17, 0x01F5	; 0x8001f5 <__data_end+0x1>
     2a8:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <__data_end+0x2>
     2ac:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <__data_end+0x3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	80 1b       	sub	r24, r16
     2b6:	91 0b       	sbc	r25, r17
     2b8:	a2 0b       	sbc	r26, r18
     2ba:	b3 0b       	sbc	r27, r19
     2bc:	89 3e       	cpi	r24, 0xE9	; 233
     2be:	93 40       	sbci	r25, 0x03	; 3
     2c0:	a1 05       	cpc	r26, r1
     2c2:	b1 05       	cpc	r27, r1
     2c4:	40 f4       	brcc	.+16     	; 0x2d6 <loop+0x12a>
	{
		mp3->Stop();
		stopTime = 0;
	}

	led.TurnOff();
     2c6:	87 e0       	ldi	r24, 0x07	; 7
     2c8:	92 e0       	ldi	r25, 0x02	; 2
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
	{
		mp3->Stop();
		stopTime = 0;
	}

	led.TurnOff();
     2d2:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_ZN10LedBlinker7TurnOffEv>
		stopTime = millis();
	}

	if(mp3->isBusy() && (millis() - stopTime > 1000))
	{
		mp3->Stop();
     2d6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mp3>
     2da:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <mp3+0x1>
     2de:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN9Mp3Player4StopEv>
		stopTime = 0;
     2e2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <__data_end>
     2e6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <__data_end+0x1>
     2ea:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <__data_end+0x2>
     2ee:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <__data_end+0x3>
     2f2:	e9 cf       	rjmp	.-46     	; 0x2c6 <loop+0x11a>

000002f4 <_GLOBAL__sub_I_led>:
	}

	led.TurnOff();
}
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
//Reed switch
#define PIN_D12 12

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	87 e0       	ldi	r24, 0x07	; 7
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10LedBlinkerC1Ei>
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
     304:	46 e0       	ldi	r20, 0x06	; 6
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	67 e0       	ldi	r22, 0x07	; 7
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 bc 01 	call	0x378	; 0x378 <_ZN12LengthSensorC1Eii>
Mp3Player *mp3;
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_Znwj>
     31c:	ec 01       	movw	r28, r24
     31e:	25 e0       	ldi	r18, 0x05	; 5
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	48 e0       	ldi	r20, 0x08	; 8
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	69 e0       	ldi	r22, 0x09	; 9
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN18MotorDriverCConfigC1Eiii>
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	be 01       	movw	r22, r28
     334:	8a ef       	ldi	r24, 0xFA	; 250
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 93 02 	call	0x526	; 0x526 <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_>
ReedSwitch reedSwitch(PIN_D12);
     33c:	6c e0       	ldi	r22, 0x0C	; 12
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	88 ef       	ldi	r24, 0xF8	; 248
     342:	91 e0       	ldi	r25, 0x01	; 1
		mp3->Stop();
		stopTime = 0;
	}

	led.TurnOff();
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
LengthSensor sensor(ECHO_PIN, TRIG_PIN);
Mp3Player *mp3;
MotorDriver driver(new MotorDriverCConfig(MOTOR_ENABLE, MOTOR_INPUT_1, MOTOR_INPUT_2), NULL);
ReedSwitch reedSwitch(PIN_D12);
     348:	0c 94 3c 03 	jmp	0x678	; 0x678 <_ZN10ReedSwitchC1Ei>

0000034c <_GLOBAL__sub_D_led>:
//Reed switch
#define PIN_D12 12

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio
LedBlinker led(PIN_D4);
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0c 94 b1 01 	jmp	0x362	; 0x362 <_ZN10LedBlinkerD1Ev>

00000354 <_ZN10LedBlinkerC1Ei>:

#include <Arduino.h>
#include <LedBlinker.h>


LedBlinker::LedBlinker(int ledPin)
     354:	fc 01       	movw	r30, r24
     356:	86 2f       	mov	r24, r22
{
	m_ledPin = ledPin;
     358:	60 83       	st	Z, r22
     35a:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_ledPin, OUTPUT);	
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	0c 94 88 09 	jmp	0x1310	; 0x1310 <pinMode>

00000362 <_ZN10LedBlinkerD1Ev>:
}

LedBlinker::~LedBlinker()
     362:	08 95       	ret

00000364 <_ZN10LedBlinker6TurnOnEv>:
	//None
}

void LedBlinker::TurnOn()
{	
	digitalWrite(m_ledPin, HIGH);
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>

0000036e <_ZN10LedBlinker7TurnOffEv>:
}

void LedBlinker::TurnOff()
{
	digitalWrite(m_ledPin, LOW);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>

00000378 <_ZN12LengthSensorC1Eii>:
#include <LengthSensor.h>


LengthSensor::LengthSensor(int echoPin, int trigPin)
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
     37e:	86 2f       	mov	r24, r22
{
	m_echoPin = echoPin;
     380:	68 83       	st	Y, r22
     382:	79 83       	std	Y+1, r23	; 0x01
	m_trigPin = trigPin;
     384:	5b 83       	std	Y+3, r21	; 0x03
     386:	4a 83       	std	Y+2, r20	; 0x02
	
	pinMode(m_echoPin, INPUT);
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	pinMode(m_trigPin, OUTPUT);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	8a 81       	ldd	r24, Y+2	; 0x02
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
{
	m_echoPin = echoPin;
	m_trigPin = trigPin;
	
	pinMode(m_echoPin, INPUT);
	pinMode(m_trigPin, OUTPUT);
     396:	0c 94 88 09 	jmp	0x1310	; 0x1310 <pinMode>

0000039a <_ZN12LengthSensor4PingEv>:
}

void LengthSensor::Ping()
{	
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
	digitalWrite(m_trigPin, HIGH);
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
	delayMicroseconds(10);
     3a8:	8a e0       	ldi	r24, 0x0A	; 10
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 ba 08 	call	0x1174	; 0x1174 <delayMicroseconds>
	digitalWrite(m_trigPin, LOW);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28

void LengthSensor::Ping()
{	
	digitalWrite(m_trigPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(m_trigPin, LOW);
     3b8:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>

000003bc <_ZN12LengthSensor7MeasureEv>:
}

int LengthSensor::Measure()
{	
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
	  Ping();
     3ca:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN12LengthSensor4PingEv>
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     3ce:	88 81       	ld	r24, Y
     3d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <digitalRead>
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	29 f0       	breq	.+10     	; 0x3e2 <_ZN12LengthSensor7MeasureEv+0x26>
	  {
		  delayMicroseconds(1);
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 ba 08 	call	0x1174	; 0x1174 <delayMicroseconds>
int LengthSensor::Measure()
{	
	  Ping();
	  
	  //wait for high state, it can never occure. Wait for few milisekonds. Maybe try tree times before returning -1
	  while(digitalRead(m_echoPin) != HIGH)
     3e0:	f6 cf       	rjmp	.-20     	; 0x3ce <_ZN12LengthSensor7MeasureEv+0x12>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
     3e2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <micros>
     3e6:	6b 01       	movw	r12, r22
     3e8:	7c 01       	movw	r14, r24
	  while(digitalRead(m_echoPin) != LOW) {
     3ea:	88 81       	ld	r24, Y
     3ec:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <digitalRead>
     3f0:	89 2b       	or	r24, r25
     3f2:	29 f0       	breq	.+10     	; 0x3fe <_ZN12LengthSensor7MeasureEv+0x42>
		  delayMicroseconds(1);
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 ba 08 	call	0x1174	; 0x1174 <delayMicroseconds>
	  {
		  delayMicroseconds(1);
	  }
	  
	  unsigned long time = micros();
	  while(digitalRead(m_echoPin) != LOW) {
     3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <_ZN12LengthSensor7MeasureEv+0x2e>
		  delayMicroseconds(1);
	  }

	  time = micros() - time;
     3fe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <micros>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	2c 19       	sub	r18, r12
     408:	3d 09       	sbc	r19, r13
     40a:	4e 09       	sbc	r20, r14
     40c:	5f 09       	sbc	r21, r15
     40e:	69 01       	movw	r12, r18
     410:	7a 01       	movw	r14, r20
	  #ifdef DEBUG
		Serial.println(time);
     412:	2a e0       	ldi	r18, 0x0A	; 10
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	b7 01       	movw	r22, r14
     418:	a6 01       	movw	r20, r12
     41a:	89 e0       	ldi	r24, 0x09	; 9
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN5Print7printlnEmi>
	  #endif			  
	  return (time * 34) / 2000;
     422:	a2 e2       	ldi	r26, 0x22	; 34
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	a7 01       	movw	r20, r14
     428:	96 01       	movw	r18, r12
     42a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__muluhisi3>
     42e:	20 ed       	ldi	r18, 0xD0	; 208
     430:	37 e0       	ldi	r19, 0x07	; 7
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
}
     43a:	c9 01       	movw	r24, r18
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <_ZN18MotorDriverCConfigC1Eiii>:
	if(canal == NULL)
	{
		return;
	}

	analogWrite(canal->GetEnable(), actSpeed);
     44a:	fc 01       	movw	r30, r24
     44c:	75 83       	std	Z+5, r23	; 0x05
     44e:	64 83       	std	Z+4, r22	; 0x04
     450:	51 83       	std	Z+1, r21	; 0x01
     452:	40 83       	st	Z, r20
     454:	33 83       	std	Z+3, r19	; 0x03
     456:	22 83       	std	Z+2, r18	; 0x02
     458:	08 95       	ret

0000045a <_ZN11MotorDriver5StartE15DriverCanalTypei>:
     45a:	dc 01       	movw	r26, r24
     45c:	61 11       	cpse	r22, r1
     45e:	03 c0       	rjmp	.+6      	; 0x466 <_ZN11MotorDriver5StartE15DriverCanalTypei+0xc>
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	04 c0       	rjmp	.+8      	; 0x46e <_ZN11MotorDriver5StartE15DriverCanalTypei+0x14>
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	13 97       	sbiw	r26, 0x03	; 3
     46e:	30 97       	sbiw	r30, 0x00	; 0
     470:	21 f0       	breq	.+8      	; 0x47a <_ZN11MotorDriver5StartE15DriverCanalTypei+0x20>
     472:	ba 01       	movw	r22, r20
     474:	84 81       	ldd	r24, Z+4	; 0x04
     476:	0c 94 00 09 	jmp	0x1200	; 0x1200 <analogWrite>
     47a:	08 95       	ret

0000047c <_ZN11MotorDriver4StopE15DriverCanalType>:
     47c:	dc 01       	movw	r26, r24
     47e:	61 11       	cpse	r22, r1
     480:	03 c0       	rjmp	.+6      	; 0x488 <_ZN11MotorDriver4StopE15DriverCanalType+0xc>
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	04 c0       	rjmp	.+8      	; 0x490 <_ZN11MotorDriver4StopE15DriverCanalType+0x14>
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	ed 91       	ld	r30, X+
     48c:	fc 91       	ld	r31, X
     48e:	13 97       	sbiw	r26, 0x03	; 3
     490:	30 97       	sbiw	r30, 0x00	; 0
     492:	29 f0       	breq	.+10     	; 0x49e <_ZN11MotorDriver4StopE15DriverCanalType+0x22>
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	84 81       	ldd	r24, Z+4	; 0x04
     49a:	0c 94 00 09 	jmp	0x1200	; 0x1200 <analogWrite>
     49e:	08 95       	ret

000004a0 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	fc 01       	movw	r30, r24
     4a6:	84 81       	ldd	r24, Z+4	; 0x04
     4a8:	84 17       	cp	r24, r20
     4aa:	e1 f0       	breq	.+56     	; 0x4e4 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x44>
     4ac:	44 83       	std	Z+4, r20	; 0x04
     4ae:	61 11       	cpse	r22, r1
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x18>
     4b2:	c0 81       	ld	r28, Z
     4b4:	d1 81       	ldd	r29, Z+1	; 0x01
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x1c>
     4b8:	c2 81       	ldd	r28, Z+2	; 0x02
     4ba:	d3 81       	ldd	r29, Z+3	; 0x03
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	91 f0       	breq	.+36     	; 0x4e4 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x44>
     4c0:	41 11       	cpse	r20, r1
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x30>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	88 81       	ld	r24, Y
     4c8:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <_ZN11MotorDriver15ChangeDirectionE15DriverCanalType14MotorDirection+0x3a>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	88 81       	ld	r24, Y
     4d4:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>:
}

void MotorDriver::Initialize(MotorDriverCConfig *canal)
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	eb 01       	movw	r28, r22
	pinMode(canal->GetEnable(), OUTPUT);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	8c 81       	ldd	r24, Y+4	; 0x04
     4f4:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	pinMode(canal->GetInput1(), OUTPUT);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	88 81       	ld	r24, Y
     4fc:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	pinMode(canal->GetInput2(), OUTPUT);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	analogWrite(canal->GetEnable(), 0);
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	0e 94 00 09 	call	0x1200	; 0x1200 <analogWrite>
	digitalWrite(canal->GetInput1(), LOW);
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	88 81       	ld	r24, Y
     516:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
	digitalWrite(canal->GetInput2(), HIGH);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
	pinMode(canal->GetEnable(), OUTPUT);
	pinMode(canal->GetInput1(), OUTPUT);
	pinMode(canal->GetInput2(), OUTPUT);
	analogWrite(canal->GetEnable(), 0);
	digitalWrite(canal->GetInput1(), LOW);
	digitalWrite(canal->GetInput2(), HIGH);
     522:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>

00000526 <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_>:
{
	m_enable = enable;
}


MotorDriver::MotorDriver(MotorDriverCConfig* canal1, MotorDriverCConfig* canal2)
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
: m_canal1(canal1), m_canal2(canal2)
     52c:	79 83       	std	Y+1, r23	; 0x01
     52e:	68 83       	st	Y, r22
     530:	5b 83       	std	Y+3, r21	; 0x03
     532:	4a 83       	std	Y+2, r20	; 0x02
{
	m_motorDirection = MotorDirection::CLOCKWISE;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	8c 83       	std	Y+4, r24	; 0x04
	m_motorSpeed = 0;
     538:	1e 82       	std	Y+6, r1	; 0x06
     53a:	1d 82       	std	Y+5, r1	; 0x05
	
	if(m_canal1 != NULL)
     53c:	61 15       	cp	r22, r1
     53e:	71 05       	cpc	r23, r1
     540:	19 f0       	breq	.+6      	; 0x548 <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_+0x22>
	{
		Initialize(m_canal1);
     542:	ce 01       	movw	r24, r28
     544:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>
	}

	if(m_canal2 != NULL)
     548:	6a 81       	ldd	r22, Y+2	; 0x02
     54a:	7b 81       	ldd	r23, Y+3	; 0x03
     54c:	61 15       	cp	r22, r1
     54e:	71 05       	cpc	r23, r1
     550:	29 f0       	breq	.+10     	; 0x55c <_ZN11MotorDriverC1EP18MotorDriverCConfigS1_+0x36>
	{
		Initialize(m_canal2);
     552:	ce 01       	movw	r24, r28
	}	
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
		Initialize(m_canal1);
	}

	if(m_canal2 != NULL)
	{
		Initialize(m_canal2);
     558:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_ZN11MotorDriver10InitializeEP18MotorDriverCConfig>
	}	
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <_ZN9Mp3Player9VolumeMaxEv>:
}

void Mp3Player::VolumeMax()
{
	//Sets max volume
	m_mp3Player.volume(30);
     562:	6e e1       	ldi	r22, 0x1E	; 30
     564:	08 96       	adiw	r24, 0x08	; 8
     566:	0c 94 b6 04 	jmp	0x96c	; 0x96c <_ZN19DFRobotDFPlayerMini6volumeEh>

0000056a <_ZN9Mp3PlayerC1Eiii>:

#include <Arduino.h>
#include <Mp3Player.h>


Mp3Player::Mp3Player(int rxPin, int txPin, int busyPin)
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
     57c:	82 2f       	mov	r24, r18
     57e:	8e 01       	movw	r16, r28
     580:	08 5f       	subi	r16, 0xF8	; 248
     582:	1f 4f       	sbci	r17, 0xFF	; 255
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
     584:	94 ef       	ldi	r25, 0xF4	; 244
     586:	c9 2e       	mov	r12, r25
     588:	dd 24       	eor	r13, r13
     58a:	d3 94       	inc	r13
     58c:	e1 2c       	mov	r14, r1
     58e:	f1 2c       	mov	r15, r1
     590:	ce 86       	std	Y+14, r12	; 0x0e
     592:	df 86       	std	Y+15, r13	; 0x0f
     594:	e8 8a       	std	Y+16, r14	; 0x10
     596:	f9 8a       	std	Y+17, r15	; 0x11
     598:	9a e0       	ldi	r25, 0x0A	; 10
     59a:	e6 e0       	ldi	r30, 0x06	; 6
     59c:	f1 e0       	ldi	r31, 0x01	; 1
     59e:	de 01       	movw	r26, r28
     5a0:	5c 96       	adiw	r26, 0x1c	; 28
     5a2:	01 90       	ld	r0, Z+
     5a4:	0d 92       	st	X+, r0
     5a6:	9a 95       	dec	r25
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <_ZN9Mp3PlayerC1Eiii+0x38>
     5aa:	1e a2       	std	Y+38, r1	; 0x26
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	9f a3       	std	Y+39, r25	; 0x27
     5b0:	1c a6       	std	Y+44, r1	; 0x2c
     5b2:	1d a6       	std	Y+45, r1	; 0x2d
{
	m_rxPin = rxPin;
     5b4:	79 83       	std	Y+1, r23	; 0x01
     5b6:	68 83       	st	Y, r22
	m_txPin = txPin;
     5b8:	5b 83       	std	Y+3, r21	; 0x03
     5ba:	4a 83       	std	Y+2, r20	; 0x02
	m_busyPin = busyPin;
     5bc:	2c 83       	std	Y+4, r18	; 0x04
     5be:	3d 83       	std	Y+5, r19	; 0x05
	pinMode(m_busyPin, INPUT);
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	m_softwareSerial = new SoftwareSerial(m_rxPin, m_txPin);
     5c6:	8f e1       	ldi	r24, 0x1F	; 31
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_Znwj>
     5ce:	7c 01       	movw	r14, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	4a 81       	ldd	r20, Y+2	; 0x02
     5d4:	68 81       	ld	r22, Y
     5d6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN14SoftwareSerialC1Ehhb>
     5da:	ff 82       	std	Y+7, r15	; 0x07
     5dc:	ee 82       	std	Y+6, r14	; 0x06
	m_softwareSerial->begin(9600);
     5de:	40 e8       	ldi	r20, 0x80	; 128
     5e0:	55 e2       	ldi	r21, 0x25	; 37
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	c7 01       	movw	r24, r14
     5e8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN14SoftwareSerial5beginEl>
	if(!m_mp3Player.begin(*m_softwareSerial))
     5ec:	6e 81       	ldd	r22, Y+6	; 0x06
     5ee:	7f 81       	ldd	r23, Y+7	; 0x07
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
     5f8:	81 11       	cpse	r24, r1
     5fa:	13 c0       	rjmp	.+38     	; 0x622 <_ZN9Mp3PlayerC1Eiii+0xb8>
	{
		#ifdef DEBUG
			Serial.println("Unable to begin:");
     5fc:	65 e4       	ldi	r22, 0x45	; 69
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	89 e0       	ldi	r24, 0x09	; 9
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
			Serial.println("1. Please recheck the connection!");
     608:	66 e5       	ldi	r22, 0x56	; 86
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
			Serial.println("2. Please insert SD card!");
     614:	68 e7       	ldi	r22, 0x78	; 120
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	89 e0       	ldi	r24, 0x09	; 9
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
     620:	ff cf       	rjmp	.-2      	; 0x620 <_ZN9Mp3PlayerC1Eiii+0xb6>
		//Hangs here if something goes wrong
		while(true);
	}

	#ifdef DEBUG
		Serial.println("MP3 player is online");
     622:	62 e9       	ldi	r22, 0x92	; 146
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	89 e0       	ldi	r24, 0x09	; 9
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	c8 01       	movw	r24, r16
     632:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN19DFRobotDFPlayerMini2EQEh>
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);
     636:	62 e0       	ldi	r22, 0x02	; 2
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>

	VolumeMax();
     63e:	ce 01       	movw	r24, r28
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
		Serial.println("MP3 player is online");
	#endif
	m_mp3Player.EQ(DFPLAYER_EQ_NORMAL);
	m_mp3Player.outputDevice(DFPLAYER_DEVICE_SD);

	VolumeMax();
     650:	0c 94 b1 02 	jmp	0x562	; 0x562 <_ZN9Mp3Player9VolumeMaxEv>

00000654 <_ZN9Mp3Player4PlayEv>:
	m_mp3Player.volume(30);
}

void Mp3Player::Play()
{
	m_mp3Player.playMp3Folder(2);
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	08 96       	adiw	r24, 0x08	; 8
     65a:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>

0000065e <_ZN9Mp3Player4StopEv>:
}

void Mp3Player::Stop()
{
	m_mp3Player.stop();	
     65e:	08 96       	adiw	r24, 0x08	; 8
     660:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <_ZN19DFRobotDFPlayerMini4stopEv>

00000664 <_ZN9Mp3Player6isBusyEv>:
}

boolean Mp3Player::isBusy()
{
	int value = digitalRead(m_busyPin);
     664:	fc 01       	movw	r30, r24
     666:	84 81       	ldd	r24, Z+4	; 0x04
     668:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <digitalRead>
	return value == LOW;
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	89 2b       	or	r24, r25
     670:	09 f0       	breq	.+2      	; 0x674 <_ZN9Mp3Player6isBusyEv+0x10>
     672:	20 e0       	ldi	r18, 0x00	; 0
}
     674:	82 2f       	mov	r24, r18
     676:	08 95       	ret

00000678 <_ZN10ReedSwitchC1Ei>:
 */ 

 #include <ReedSwitch.h>
 #include <Arduino.h>

 ReedSwitch::ReedSwitch(int reedPin)
     678:	fc 01       	movw	r30, r24
     67a:	86 2f       	mov	r24, r22
 {
	m_reedPin = reedPin;
     67c:	60 83       	st	Z, r22
     67e:	71 83       	std	Z+1, r23	; 0x01
	pinMode(m_reedPin, INPUT_PULLUP);
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	0c 94 88 09 	jmp	0x1310	; 0x1310 <pinMode>

00000686 <_ZN10ReedSwitch5CheckEv>:
 }

 int ReedSwitch::Check()
 {
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
	#ifdef DEBUG
		Serial.println("Checking if reed is connected");
     68c:	67 ea       	ldi	r22, 0xA7	; 167
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	89 e0       	ldi	r24, 0x09	; 9
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5Print7printlnEPKc>
	#endif

	int result = digitalRead(m_reedPin);
     698:	88 81       	ld	r24, Y
     69a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <digitalRead>
     69e:	ec 01       	movw	r28, r24
	#ifdef DEBUG
		Serial.println(result);
     6a0:	4a e0       	ldi	r20, 0x0A	; 10
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	bc 01       	movw	r22, r24
     6a6:	89 e0       	ldi	r24, 0x09	; 9
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZN5Print7printlnEii>
	#endif

	return result;
     6ae:	ce 01       	movw	r24, r28
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::playLargeFolder(uint8_t folderNumber, uint16_t fileNumber){
  sendStack(0x14, (((uint16_t)folderNumber) << 12) | fileNumber);
}

void DFRobotDFPlayerMini::stopAdvertise(){
  sendStack(0x15);
     6b6:	fb 01       	movw	r30, r22
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	69 5f       	subi	r22, 0xF9	; 249
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	21 91       	ld	r18, Z+
     6c4:	82 0f       	add	r24, r18
     6c6:	91 1d       	adc	r25, r1
     6c8:	e6 17       	cp	r30, r22
     6ca:	f7 07       	cpc	r31, r23
     6cc:	d1 f7       	brne	.-12     	; 0x6c2 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0xc>
     6ce:	91 95       	neg	r25
     6d0:	81 95       	neg	r24
     6d2:	91 09       	sbc	r25, r1
     6d4:	08 95       	ret

000006d6 <_ZN19DFRobotDFPlayerMini10parseStackEv>:
     6d6:	dc 01       	movw	r26, r24
     6d8:	1d 96       	adiw	r26, 0x0d	; 13
     6da:	ec 91       	ld	r30, X
     6dc:	1d 97       	sbiw	r26, 0x0d	; 13
     6de:	91 96       	adiw	r26, 0x21	; 33
     6e0:	ec 93       	st	X, r30
     6e2:	91 97       	sbiw	r26, 0x21	; 33
     6e4:	1f 96       	adiw	r26, 0x0f	; 15
     6e6:	8c 91       	ld	r24, X
     6e8:	1f 97       	sbiw	r26, 0x0f	; 15
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	98 2f       	mov	r25, r24
     6ee:	88 27       	eor	r24, r24
     6f0:	50 96       	adiw	r26, 0x10	; 16
     6f2:	2c 91       	ld	r18, X
     6f4:	50 97       	sbiw	r26, 0x10	; 16
     6f6:	82 0f       	add	r24, r18
     6f8:	91 1d       	adc	r25, r1
     6fa:	93 96       	adiw	r26, 0x23	; 35
     6fc:	9c 93       	st	X, r25
     6fe:	8e 93       	st	-X, r24
     700:	92 97       	sbiw	r26, 0x22	; 34
     702:	4e 2f       	mov	r20, r30
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	fa 01       	movw	r30, r20
     708:	fa 97       	sbiw	r30, 0x3a	; 58
     70a:	e6 31       	cpi	r30, 0x16	; 22
     70c:	f1 05       	cpc	r31, r1
     70e:	48 f5       	brcc	.+82     	; 0x762 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x8c>
     710:	ec 5c       	subi	r30, 0xCC	; 204
     712:	ff 4f       	sbci	r31, 0xFF	; 255
     714:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__tablejump2__>
     718:	5e 96       	adiw	r26, 0x1e	; 30
     71a:	1c 92       	st	X, r1
     71c:	5e 97       	sbiw	r26, 0x1e	; 30
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	19 c0       	rjmp	.+50     	; 0x754 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     722:	81 ff       	sbrs	r24, 1
     724:	2e c0       	rjmp	.+92     	; 0x782 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     726:	5e 96       	adiw	r26, 0x1e	; 30
     728:	1c 92       	st	X, r1
     72a:	5e 97       	sbiw	r26, 0x1e	; 30
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	12 c0       	rjmp	.+36     	; 0x754 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     730:	81 ff       	sbrs	r24, 1
     732:	27 c0       	rjmp	.+78     	; 0x782 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     734:	5e 96       	adiw	r26, 0x1e	; 30
     736:	1c 92       	st	X, r1
     738:	5e 97       	sbiw	r26, 0x1e	; 30
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0b c0       	rjmp	.+22     	; 0x754 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     73e:	81 ff       	sbrs	r24, 1
     740:	20 c0       	rjmp	.+64     	; 0x782 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xac>
     742:	5e 96       	adiw	r26, 0x1e	; 30
     744:	1c 92       	st	X, r1
     746:	5e 97       	sbiw	r26, 0x1e	; 30
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	04 c0       	rjmp	.+8      	; 0x754 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     74c:	5e 96       	adiw	r26, 0x1e	; 30
     74e:	1c 92       	st	X, r1
     750:	5e 97       	sbiw	r26, 0x1e	; 30
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	90 96       	adiw	r26, 0x20	; 32
     756:	8c 93       	st	X, r24
     758:	90 97       	sbiw	r26, 0x20	; 32
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	94 96       	adiw	r26, 0x24	; 36
     75e:	8c 93       	st	X, r24
     760:	08 95       	ret
     762:	5e 96       	adiw	r26, 0x1e	; 30
     764:	1c 92       	st	X, r1
     766:	5e 97       	sbiw	r26, 0x1e	; 30
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 96       	adiw	r26, 0x20	; 32
     76c:	8c 93       	st	X, r24
     76e:	90 97       	sbiw	r26, 0x20	; 32
     770:	93 96       	adiw	r26, 0x23	; 35
     772:	1c 92       	st	X, r1
     774:	1e 92       	st	-X, r1
     776:	92 97       	sbiw	r26, 0x22	; 34
     778:	94 96       	adiw	r26, 0x24	; 36
     77a:	8c 93       	st	X, r24
     77c:	94 97       	sbiw	r26, 0x24	; 36
     77e:	95 96       	adiw	r26, 0x25	; 37
     780:	1c 92       	st	X, r1
     782:	08 95       	ret

00000784 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
     78a:	bc 01       	movw	r22, r24
     78c:	66 5f       	subi	r22, 0xF6	; 246
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     794:	29 89       	ldd	r18, Y+17	; 0x11
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	32 2f       	mov	r19, r18
     79a:	22 27       	eor	r18, r18
     79c:	4a 89       	ldd	r20, Y+18	; 0x12
     79e:	24 0f       	add	r18, r20
     7a0:	31 1d       	adc	r19, r1
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	28 17       	cp	r18, r24
     7a6:	39 07       	cpc	r19, r25
     7a8:	09 f0       	breq	.+2      	; 0x7ac <_ZN19DFRobotDFPlayerMini13validateStackEv+0x28>
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	84 2f       	mov	r24, r20
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <_ZN19DFRobotDFPlayerMini9availableEv>:
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
     7c6:	88 81       	ld	r24, Y
     7c8:	99 81       	ldd	r25, Y+1	; 0x01
     7ca:	dc 01       	movw	r26, r24
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	04 80       	ldd	r0, Z+4	; 0x04
     7d2:	f5 81       	ldd	r31, Z+5	; 0x05
     7d4:	e0 2d       	mov	r30, r0
     7d6:	09 95       	icall
     7d8:	89 2b       	or	r24, r25
     7da:	09 f4       	brne	.+2      	; 0x7de <_ZN19DFRobotDFPlayerMini9availableEv+0x2a>
     7dc:	44 c0       	rjmp	.+136    	; 0x866 <_ZN19DFRobotDFPlayerMini9availableEv+0xb2>
     7de:	0e 8d       	ldd	r16, Y+30	; 0x1e
     7e0:	88 81       	ld	r24, Y
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	dc 01       	movw	r26, r24
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	06 80       	ldd	r0, Z+6	; 0x06
     7ec:	f7 81       	ldd	r31, Z+7	; 0x07
     7ee:	e0 2d       	mov	r30, r0
     7f0:	01 11       	cpse	r16, r1
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <_ZN19DFRobotDFPlayerMini9availableEv+0x4e>
     7f4:	09 95       	icall
     7f6:	8a 87       	std	Y+10, r24	; 0x0a
     7f8:	8e 37       	cpi	r24, 0x7E	; 126
     7fa:	29 f7       	brne	.-54     	; 0x7c6 <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     7fc:	1c a2       	std	Y+36, r1	; 0x24
     7fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     800:	2f c0       	rjmp	.+94     	; 0x860 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     802:	09 95       	icall
     804:	fe 01       	movw	r30, r28
     806:	e0 0f       	add	r30, r16
     808:	f1 1d       	adc	r31, r1
     80a:	82 87       	std	Z+10, r24	; 0x0a
     80c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	49 f0       	breq	.+18     	; 0x824 <_ZN19DFRobotDFPlayerMini9availableEv+0x70>
     812:	89 30       	cpi	r24, 0x09	; 9
     814:	59 f0       	breq	.+22     	; 0x82c <_ZN19DFRobotDFPlayerMini9availableEv+0x78>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	19 f5       	brne	.+70     	; 0x860 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     81a:	9b 85       	ldd	r25, Y+11	; 0x0b
     81c:	9f 3f       	cpi	r25, 0xFF	; 255
     81e:	01 f1       	breq	.+64     	; 0x860 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     820:	1e 8e       	std	Y+30, r1	; 0x1e
     822:	1a c0       	rjmp	.+52     	; 0x858 <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
     824:	9c 85       	ldd	r25, Y+12	; 0x0c
     826:	96 30       	cpi	r25, 0x06	; 6
     828:	d9 f0       	breq	.+54     	; 0x860 <_ZN19DFRobotDFPlayerMini9availableEv+0xac>
     82a:	03 c0       	rjmp	.+6      	; 0x832 <_ZN19DFRobotDFPlayerMini9availableEv+0x7e>
     82c:	8b 89       	ldd	r24, Y+19	; 0x13
     82e:	8f 3e       	cpi	r24, 0xEF	; 239
     830:	11 f0       	breq	.+4      	; 0x836 <_ZN19DFRobotDFPlayerMini9availableEv+0x82>
     832:	1e 8e       	std	Y+30, r1	; 0x1e
     834:	10 c0       	rjmp	.+32     	; 0x856 <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     836:	ce 01       	movw	r24, r28
     838:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN19DFRobotDFPlayerMini13validateStackEv>
     83c:	1e 8e       	std	Y+30, r1	; 0x1e
     83e:	88 23       	and	r24, r24
     840:	51 f0       	breq	.+20     	; 0x856 <_ZN19DFRobotDFPlayerMini9availableEv+0xa2>
     842:	ce 01       	movw	r24, r28
     844:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN19DFRobotDFPlayerMini10parseStackEv>
     848:	1c a1       	ldd	r17, Y+36	; 0x24
     84a:	11 23       	and	r17, r17
     84c:	69 f1       	breq	.+90     	; 0x8a8 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     84e:	88 8d       	ldd	r24, Y+24	; 0x18
     850:	81 11       	cpse	r24, r1
     852:	2a c0       	rjmp	.+84     	; 0x8a8 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     854:	26 c0       	rjmp	.+76     	; 0x8a2 <_ZN19DFRobotDFPlayerMini9availableEv+0xee>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	88 a3       	std	Y+32, r24	; 0x20
     85a:	1b a2       	std	Y+35, r1	; 0x23
     85c:	1a a2       	std	Y+34, r1	; 0x22
     85e:	20 c0       	rjmp	.+64     	; 0x8a0 <_ZN19DFRobotDFPlayerMini9availableEv+0xec>
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	8e 8f       	std	Y+30, r24	; 0x1e
     864:	b0 cf       	rjmp	.-160    	; 0x7c6 <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     866:	8d a1       	ldd	r24, Y+37	; 0x25
     868:	88 23       	and	r24, r24
     86a:	e9 f0       	breq	.+58     	; 0x8a6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     86c:	0e 94 4d 08 	call	0x109a	; 0x109a <millis>
     870:	ca 80       	ldd	r12, Y+2	; 0x02
     872:	db 80       	ldd	r13, Y+3	; 0x03
     874:	ec 80       	ldd	r14, Y+4	; 0x04
     876:	fd 80       	ldd	r15, Y+5	; 0x05
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	8c 19       	sub	r24, r12
     87e:	9d 09       	sbc	r25, r13
     880:	ae 09       	sbc	r26, r14
     882:	bf 09       	sbc	r27, r15
     884:	ce 80       	ldd	r12, Y+6	; 0x06
     886:	df 80       	ldd	r13, Y+7	; 0x07
     888:	e8 84       	ldd	r14, Y+8	; 0x08
     88a:	f9 84       	ldd	r15, Y+9	; 0x09
     88c:	8c 15       	cp	r24, r12
     88e:	9d 05       	cpc	r25, r13
     890:	ae 05       	cpc	r26, r14
     892:	bf 05       	cpc	r27, r15
     894:	40 f0       	brcs	.+16     	; 0x8a6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
     896:	1e 8e       	std	Y+30, r1	; 0x1e
     898:	18 a2       	std	Y+32, r1	; 0x20
     89a:	1b a2       	std	Y+35, r1	; 0x23
     89c:	1a a2       	std	Y+34, r1	; 0x22
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	8c a3       	std	Y+36, r24	; 0x24
     8a2:	1d a2       	std	Y+37, r1	; 0x25
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <_ZN19DFRobotDFPlayerMini9availableEv+0xf4>
     8a6:	1c a1       	ldd	r17, Y+36	; 0x24
     8a8:	81 2f       	mov	r24, r17
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	08 95       	ret

000008bc <_ZN19DFRobotDFPlayerMini9sendStackEv>:
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
     8c2:	88 8d       	ldd	r24, Y+24	; 0x18
     8c4:	88 23       	and	r24, r24
     8c6:	39 f0       	breq	.+14     	; 0x8d6 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1a>
     8c8:	8d a1       	ldd	r24, Y+37	; 0x25
     8ca:	88 23       	and	r24, r24
     8cc:	51 f0       	breq	.+20     	; 0x8e2 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x26>
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN19DFRobotDFPlayerMini9availableEv>
     8d4:	f9 cf       	rjmp	.-14     	; 0x8c8 <_ZN19DFRobotDFPlayerMini9sendStackEv+0xc>
     8d6:	6a e0       	ldi	r22, 0x0A	; 10
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>
     8e2:	88 81       	ld	r24, Y
     8e4:	99 81       	ldd	r25, Y+1	; 0x01
     8e6:	dc 01       	movw	r26, r24
     8e8:	ed 91       	ld	r30, X+
     8ea:	fc 91       	ld	r31, X
     8ec:	02 80       	ldd	r0, Z+2	; 0x02
     8ee:	f3 81       	ldd	r31, Z+3	; 0x03
     8f0:	e0 2d       	mov	r30, r0
     8f2:	4a e0       	ldi	r20, 0x0A	; 10
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	be 01       	movw	r22, r28
     8f8:	6c 5e       	subi	r22, 0xEC	; 236
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	09 95       	icall
     8fe:	0e 94 4d 08 	call	0x109a	; 0x109a <millis>
     902:	6a 83       	std	Y+2, r22	; 0x02
     904:	7b 83       	std	Y+3, r23	; 0x03
     906:	8c 83       	std	Y+4, r24	; 0x04
     908:	9d 83       	std	Y+5, r25	; 0x05
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	98 8d       	ldd	r25, Y+24	; 0x18
     90e:	91 11       	cpse	r25, r1
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	8d a3       	std	Y+37, r24	; 0x25
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <_ZN19DFRobotDFPlayerMini9sendStackEhj>:
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	6f 8b       	std	Y+23, r22	; 0x17
     924:	59 8f       	std	Y+25, r21	; 0x19
     926:	4a 8f       	std	Y+26, r20	; 0x1a
     928:	bc 01       	movw	r22, r24
     92a:	6c 5e       	subi	r22, 0xEC	; 236
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     932:	9b 8f       	std	Y+27, r25	; 0x1b
     934:	8c 8f       	std	Y+28, r24	; 0x1c
     936:	ce 01       	movw	r24, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_ZN19DFRobotDFPlayerMini9sendStackEv>

00000940 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000948 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	8d a3       	std	Y+37, r24	; 0x25
     952:	ce 01       	movw	r24, r28
     954:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN19DFRobotDFPlayerMini9availableEv>
     958:	88 23       	and	r24, r24
     95a:	d9 f3       	breq	.-10     	; 0x952 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	98 a1       	ldd	r25, Y+32	; 0x20
     960:	91 11       	cpse	r25, r1
     962:	01 c0       	rjmp	.+2      	; 0x966 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0x1e>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <_ZN19DFRobotDFPlayerMini6volumeEh>:
     96c:	46 2f       	mov	r20, r22
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	66 e0       	ldi	r22, 0x06	; 6
     972:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000976 <_ZN19DFRobotDFPlayerMini2EQEh>:
     976:	46 2f       	mov	r20, r22
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	67 e0       	ldi	r22, 0x07	; 7
     97c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000980 <_ZN19DFRobotDFPlayerMini12outputDeviceEh>:
     980:	46 2f       	mov	r20, r22
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	69 e0       	ldi	r22, 0x09	; 9
     986:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     98a:	68 ec       	ldi	r22, 0xC8	; 200
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <delay>

00000996 <_ZN19DFRobotDFPlayerMini5resetEv>:
     996:	6c e0       	ldi	r22, 0x0C	; 12
     998:	0c 94 a0 04 	jmp	0x940	; 0x940 <_ZN19DFRobotDFPlayerMini9sendStackEh>

0000099c <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	14 2f       	mov	r17, r20
     9a6:	44 23       	and	r20, r20
     9a8:	19 f0       	breq	.+6      	; 0x9b0 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x14>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	88 8f       	std	Y+24, r24	; 0x18
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x16>
     9b0:	18 8e       	std	Y+24, r1	; 0x18
     9b2:	79 83       	std	Y+1, r23	; 0x01
     9b4:	68 83       	st	Y, r22
     9b6:	8e 81       	ldd	r24, Y+6	; 0x06
     9b8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ba:	a8 85       	ldd	r26, Y+8	; 0x08
     9bc:	b9 85       	ldd	r27, Y+9	; 0x09
     9be:	88 54       	subi	r24, 0x48	; 72
     9c0:	94 4f       	sbci	r25, 0xF4	; 244
     9c2:	af 4f       	sbci	r26, 0xFF	; 255
     9c4:	bf 4f       	sbci	r27, 0xFF	; 255
     9c6:	8e 83       	std	Y+6, r24	; 0x06
     9c8:	9f 83       	std	Y+7, r25	; 0x07
     9ca:	a8 87       	std	Y+8, r26	; 0x08
     9cc:	b9 87       	std	Y+9, r27	; 0x09
     9ce:	ce 01       	movw	r24, r28
     9d0:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN19DFRobotDFPlayerMini5resetEv>
     9d4:	ce 01       	movw	r24, r28
     9d6:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
     9da:	8e 81       	ldd	r24, Y+6	; 0x06
     9dc:	9f 81       	ldd	r25, Y+7	; 0x07
     9de:	a8 85       	ldd	r26, Y+8	; 0x08
     9e0:	b9 85       	ldd	r27, Y+9	; 0x09
     9e2:	88 5b       	subi	r24, 0xB8	; 184
     9e4:	9b 40       	sbci	r25, 0x0B	; 11
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 83       	std	Y+6, r24	; 0x06
     9ec:	9f 83       	std	Y+7, r25	; 0x07
     9ee:	a8 87       	std	Y+8, r26	; 0x08
     9f0:	b9 87       	std	Y+9, r27	; 0x09
     9f2:	68 ec       	ldi	r22, 0xC8	; 200
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 7e 08 	call	0x10fc	; 0x10fc <delay>
     9fe:	1c a2       	std	Y+36, r1	; 0x24
     a00:	88 a1       	ldd	r24, Y+32	; 0x20
     a02:	84 30       	cpi	r24, 0x04	; 4
     a04:	19 f0       	breq	.+6      	; 0xa0c <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x70>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	81 27       	eor	r24, r17
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x72>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	08 95       	ret

00000a16 <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>:
     a16:	ab 01       	movw	r20, r22
     a18:	62 e1       	ldi	r22, 0x12	; 18
     a1a:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_ZN19DFRobotDFPlayerMini9sendStackEhj>

00000a1e <_ZN19DFRobotDFPlayerMini4stopEv>:
}

void DFRobotDFPlayerMini::stop(){
  sendStack(0x16);
     a1e:	66 e1       	ldi	r22, 0x16	; 22
     a20:	0c 94 a0 04 	jmp	0x940	; 0x940 <_ZN19DFRobotDFPlayerMini9sendStackEh>

00000a24 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a24:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a26:	91 8d       	ldd	r25, Z+25	; 0x19
     a28:	22 8d       	ldd	r18, Z+26	; 0x1a
     a2a:	89 2f       	mov	r24, r25
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 5c       	subi	r24, 0xC0	; 192
     a30:	9f 4f       	sbci	r25, 0xFF	; 255
     a32:	82 1b       	sub	r24, r18
     a34:	91 09       	sbc	r25, r1
}
     a36:	8f 73       	andi	r24, 0x3F	; 63
     a38:	99 27       	eor	r25, r25
     a3a:	08 95       	ret

00000a3c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a3c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a3e:	91 8d       	ldd	r25, Z+25	; 0x19
     a40:	82 8d       	ldd	r24, Z+26	; 0x1a
     a42:	98 17       	cp	r25, r24
     a44:	31 f0       	breq	.+12     	; 0xa52 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a46:	82 8d       	ldd	r24, Z+26	; 0x1a
     a48:	e8 0f       	add	r30, r24
     a4a:	f1 1d       	adc	r31, r1
     a4c:	85 8d       	ldd	r24, Z+29	; 0x1d
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a56:	08 95       	ret

00000a58 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a58:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a5a:	91 8d       	ldd	r25, Z+25	; 0x19
     a5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a5e:	98 17       	cp	r25, r24
     a60:	61 f0       	breq	.+24     	; 0xa7a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a62:	82 8d       	ldd	r24, Z+26	; 0x1a
     a64:	df 01       	movw	r26, r30
     a66:	a8 0f       	add	r26, r24
     a68:	b1 1d       	adc	r27, r1
     a6a:	5d 96       	adiw	r26, 0x1d	; 29
     a6c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     a70:	9f 5f       	subi	r25, 0xFF	; 255
     a72:	9f 73       	andi	r25, 0x3F	; 63
     a74:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a7e:	08 95       	ret

00000a80 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a80:	85 e9       	ldi	r24, 0x95	; 149
     a82:	96 e0       	ldi	r25, 0x06	; 6
     a84:	89 2b       	or	r24, r25
     a86:	49 f0       	breq	.+18     	; 0xa9a <_Z14serialEventRunv+0x1a>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	89 2b       	or	r24, r25
     a8e:	29 f0       	breq	.+10     	; 0xa9a <_Z14serialEventRunv+0x1a>
     a90:	0e 94 95 06 	call	0xd2a	; 0xd2a <_Z17Serial0_availablev>
     a94:	81 11       	cpse	r24, r1
     a96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a9a:	08 95       	ret

00000a9c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a9c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a9e:	84 8d       	ldd	r24, Z+28	; 0x1c
     aa0:	df 01       	movw	r26, r30
     aa2:	a8 0f       	add	r26, r24
     aa4:	b1 1d       	adc	r27, r1
     aa6:	a3 5a       	subi	r26, 0xA3	; 163
     aa8:	bf 4f       	sbci	r27, 0xFF	; 255
     aaa:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     aac:	84 8d       	ldd	r24, Z+28	; 0x1c
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	8f 73       	andi	r24, 0x3F	; 63
     ab4:	99 27       	eor	r25, r25
     ab6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     ab8:	a6 89       	ldd	r26, Z+22	; 0x16
     aba:	b7 89       	ldd	r27, Z+23	; 0x17
     abc:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     abe:	a0 89       	ldd	r26, Z+16	; 0x10
     ac0:	b1 89       	ldd	r27, Z+17	; 0x11
     ac2:	8c 91       	ld	r24, X
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     ac8:	93 8d       	ldd	r25, Z+27	; 0x1b
     aca:	84 8d       	ldd	r24, Z+28	; 0x1c
     acc:	98 13       	cpse	r25, r24
     ace:	06 c0       	rjmp	.+12     	; 0xadc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ad0:	02 88       	ldd	r0, Z+18	; 0x12
     ad2:	f3 89       	ldd	r31, Z+19	; 0x13
     ad4:	e0 2d       	mov	r30, r0
     ad6:	80 81       	ld	r24, Z
     ad8:	8f 7d       	andi	r24, 0xDF	; 223
     ada:	80 83       	st	Z, r24
     adc:	08 95       	ret

00000ade <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ec 01       	movw	r28, r24
  _written = true;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     af0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     af2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     af4:	98 13       	cpse	r25, r24
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <_ZN14HardwareSerial5writeEh+0x24>
     af8:	e8 89       	ldd	r30, Y+16	; 0x10
     afa:	f9 89       	ldd	r31, Y+17	; 0x11
     afc:	80 81       	ld	r24, Z
     afe:	85 fd       	sbrc	r24, 5
     b00:	24 c0       	rjmp	.+72     	; 0xb4a <_ZN14HardwareSerial5writeEh+0x6c>
     b02:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b04:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	0f 5f       	subi	r16, 0xFF	; 255
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	0f 73       	andi	r16, 0x3F	; 63
     b0e:	11 27       	eor	r17, r17
     b10:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b14:	e8 12       	cpse	r14, r24
     b16:	0c c0       	rjmp	.+24     	; 0xb30 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	07 fc       	sbrc	r0, 7
     b1c:	fa cf       	rjmp	.-12     	; 0xb12 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b1e:	e8 89       	ldd	r30, Y+16	; 0x10
     b20:	f9 89       	ldd	r31, Y+17	; 0x11
     b22:	80 81       	ld	r24, Z
     b24:	85 ff       	sbrs	r24, 5
     b26:	f5 cf       	rjmp	.-22     	; 0xb12 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b2e:	f1 cf       	rjmp	.-30     	; 0xb12 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b32:	fe 01       	movw	r30, r28
     b34:	e8 0f       	add	r30, r24
     b36:	f1 1d       	adc	r31, r1
     b38:	e3 5a       	subi	r30, 0xA3	; 163
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b3e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b40:	ea 89       	ldd	r30, Y+18	; 0x12
     b42:	fb 89       	ldd	r31, Y+19	; 0x13
     b44:	80 81       	ld	r24, Z
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     b4a:	ee 89       	ldd	r30, Y+22	; 0x16
     b4c:	ff 89       	ldd	r31, Y+23	; 0x17
     b4e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b50:	e8 89       	ldd	r30, Y+16	; 0x10
     b52:	f9 89       	ldd	r31, Y+17	; 0x11
     b54:	80 81       	ld	r24, Z
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b72:	88 8d       	ldd	r24, Y+24	; 0x18
     b74:	88 23       	and	r24, r24
     b76:	c9 f0       	breq	.+50     	; 0xbaa <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b78:	ea 89       	ldd	r30, Y+18	; 0x12
     b7a:	fb 89       	ldd	r31, Y+19	; 0x13
     b7c:	80 81       	ld	r24, Z
     b7e:	85 fd       	sbrc	r24, 5
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <_ZN14HardwareSerial5flushEv+0x20>
     b82:	a8 89       	ldd	r26, Y+16	; 0x10
     b84:	b9 89       	ldd	r27, Y+17	; 0x11
     b86:	8c 91       	ld	r24, X
     b88:	86 fd       	sbrc	r24, 6
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	07 fc       	sbrc	r0, 7
     b90:	f5 cf       	rjmp	.-22     	; 0xb7c <_ZN14HardwareSerial5flushEv+0x10>
     b92:	80 81       	ld	r24, Z
     b94:	85 ff       	sbrs	r24, 5
     b96:	f2 cf       	rjmp	.-28     	; 0xb7c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     b98:	a8 89       	ldd	r26, Y+16	; 0x10
     b9a:	b9 89       	ldd	r27, Y+17	; 0x11
     b9c:	8c 91       	ld	r24, X
     b9e:	85 ff       	sbrs	r24, 5
     ba0:	ed cf       	rjmp	.-38     	; 0xb7c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ba8:	e7 cf       	rjmp	.-50     	; 0xb78 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	6a 01       	movw	r12, r20
     bc2:	7b 01       	movw	r14, r22
     bc4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     bc6:	e8 89       	ldd	r30, Y+16	; 0x10
     bc8:	f9 89       	ldd	r31, Y+17	; 0x11
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bce:	41 15       	cp	r20, r1
     bd0:	51 4e       	sbci	r21, 0xE1	; 225
     bd2:	61 05       	cpc	r22, r1
     bd4:	71 05       	cpc	r23, r1
     bd6:	b1 f0       	breq	.+44     	; 0xc04 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	79 e0       	ldi	r23, 0x09	; 9
     bdc:	8d e3       	ldi	r24, 0x3D	; 61
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a7 01       	movw	r20, r14
     be2:	96 01       	movw	r18, r12
     be4:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	a1 09       	sbc	r26, r1
     bf0:	b1 09       	sbc	r27, r1
     bf2:	b6 95       	lsr	r27
     bf4:	a7 95       	ror	r26
     bf6:	97 95       	ror	r25
     bf8:	87 95       	ror	r24
     bfa:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bfc:	21 15       	cp	r18, r1
     bfe:	80 e1       	ldi	r24, 0x10	; 16
     c00:	38 07       	cpc	r19, r24
     c02:	a8 f0       	brcs	.+42     	; 0xc2e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     c04:	e8 89       	ldd	r30, Y+16	; 0x10
     c06:	f9 89       	ldd	r31, Y+17	; 0x11
     c08:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c0a:	60 e8       	ldi	r22, 0x80	; 128
     c0c:	74 e8       	ldi	r23, 0x84	; 132
     c0e:	8e e1       	ldi	r24, 0x1E	; 30
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a7 01       	movw	r20, r14
     c14:	96 01       	movw	r18, r12
     c16:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
     c1a:	da 01       	movw	r26, r20
     c1c:	c9 01       	movw	r24, r18
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	a1 09       	sbc	r26, r1
     c22:	b1 09       	sbc	r27, r1
     c24:	b6 95       	lsr	r27
     c26:	a7 95       	ror	r26
     c28:	97 95       	ror	r25
     c2a:	87 95       	ror	r24
     c2c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c2e:	ec 85       	ldd	r30, Y+12	; 0x0c
     c30:	fd 85       	ldd	r31, Y+13	; 0x0d
     c32:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     c34:	ee 85       	ldd	r30, Y+14	; 0x0e
     c36:	ff 85       	ldd	r31, Y+15	; 0x0f
     c38:	20 83       	st	Z, r18

  _written = false;
     c3a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c3c:	ec 89       	ldd	r30, Y+20	; 0x14
     c3e:	fd 89       	ldd	r31, Y+21	; 0x15
     c40:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c42:	ea 89       	ldd	r30, Y+18	; 0x12
     c44:	fb 89       	ldd	r31, Y+19	; 0x13
     c46:	80 81       	ld	r24, Z
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c4c:	ea 89       	ldd	r30, Y+18	; 0x12
     c4e:	fb 89       	ldd	r31, Y+19	; 0x13
     c50:	80 81       	ld	r24, Z
     c52:	88 60       	ori	r24, 0x08	; 8
     c54:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c56:	ea 89       	ldd	r30, Y+18	; 0x12
     c58:	fb 89       	ldd	r31, Y+19	; 0x13
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c60:	ea 89       	ldd	r30, Y+18	; 0x12
     c62:	fb 89       	ldd	r31, Y+19	; 0x13
     c64:	80 81       	ld	r24, Z
     c66:	8f 7d       	andi	r24, 0xDF	; 223
     c68:	80 83       	st	Z, r24
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c8e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <Serial+0x10>
     c92:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <Serial+0x11>
     c96:	80 81       	ld	r24, Z
     c98:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <Serial+0x16>
     c9c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <Serial+0x17>
     ca0:	82 fd       	sbrc	r24, 2
     ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ca4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ca6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Serial+0x19>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     cae:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <Serial+0x1a>
     cb2:	82 17       	cp	r24, r18
     cb4:	51 f0       	breq	.+20     	; 0xcca <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     cb6:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <Serial+0x19>
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	e7 5f       	subi	r30, 0xF7	; 247
     cbe:	fd 4f       	sbci	r31, 0xFD	; 253
     cc0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     cc2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Serial+0x19>
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cc8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d2a:	89 e0       	ldi	r24, 0x09	; 9
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN14HardwareSerial9availableEv>
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	89 2b       	or	r24, r25
     d36:	09 f4       	brne	.+2      	; 0xd3a <_Z17Serial0_availablev+0x10>
     d38:	20 e0       	ldi	r18, 0x00	; 0
}
     d3a:	82 2f       	mov	r24, r18
     d3c:	08 95       	ret

00000d3e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d3e:	e9 e0       	ldi	r30, 0x09	; 9
     d40:	f2 e0       	ldi	r31, 0x02	; 2
     d42:	13 82       	std	Z+3, r1	; 0x03
     d44:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d46:	88 ee       	ldi	r24, 0xE8	; 232
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	84 83       	std	Z+4, r24	; 0x04
     d50:	95 83       	std	Z+5, r25	; 0x05
     d52:	a6 83       	std	Z+6, r26	; 0x06
     d54:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d56:	89 ec       	ldi	r24, 0xC9	; 201
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	85 ec       	ldi	r24, 0xC5	; 197
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	95 87       	std	Z+13, r25	; 0x0d
     d64:	84 87       	std	Z+12, r24	; 0x0c
     d66:	84 ec       	ldi	r24, 0xC4	; 196
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	97 87       	std	Z+15, r25	; 0x0f
     d6c:	86 87       	std	Z+14, r24	; 0x0e
     d6e:	80 ec       	ldi	r24, 0xC0	; 192
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	91 8b       	std	Z+17, r25	; 0x11
     d74:	80 8b       	std	Z+16, r24	; 0x10
     d76:	81 ec       	ldi	r24, 0xC1	; 193
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	93 8b       	std	Z+19, r25	; 0x13
     d7c:	82 8b       	std	Z+18, r24	; 0x12
     d7e:	82 ec       	ldi	r24, 0xC2	; 194
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	95 8b       	std	Z+21, r25	; 0x15
     d84:	84 8b       	std	Z+20, r24	; 0x14
     d86:	86 ec       	ldi	r24, 0xC6	; 198
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	97 8b       	std	Z+23, r25	; 0x17
     d8c:	86 8b       	std	Z+22, r24	; 0x16
     d8e:	11 8e       	std	Z+25, r1	; 0x19
     d90:	12 8e       	std	Z+26, r1	; 0x1a
     d92:	13 8e       	std	Z+27, r1	; 0x1b
     d94:	14 8e       	std	Z+28, r1	; 0x1c
     d96:	08 95       	ret

00000d98 <initVariant>:
     d98:	08 95       	ret

00000d9a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     d9a:	0e 94 c5 08 	call	0x118a	; 0x118a <init>

	initVariant();
     d9e:	0e 94 cc 06 	call	0xd98	; 0xd98 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     da2:	0e 94 a4 00 	call	0x148	; 0x148 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     da6:	c0 e4       	ldi	r28, 0x40	; 64
     da8:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     daa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <loop>
		if (serialEventRun) serialEventRun();
     dae:	20 97       	sbiw	r28, 0x00	; 0
     db0:	e1 f3       	breq	.-8      	; 0xdaa <main+0x10>
     db2:	0e 94 40 05 	call	0xa80	; 0xa80 <_Z14serialEventRunv>
     db6:	f9 cf       	rjmp	.-14     	; 0xdaa <main+0x10>

00000db8 <_Znwj>:
     db8:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <malloc>

00000dbc <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	6c 01       	movw	r12, r24
     dce:	7a 01       	movw	r14, r20
     dd0:	8b 01       	movw	r16, r22
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
     dd6:	ce 15       	cp	r28, r14
     dd8:	df 05       	cpc	r29, r15
     dda:	81 f0       	breq	.+32     	; 0xdfc <_ZN5Print5writeEPKhj+0x40>
     ddc:	d8 01       	movw	r26, r16
     dde:	6d 91       	ld	r22, X+
     de0:	8d 01       	movw	r16, r26
     de2:	d6 01       	movw	r26, r12
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
     de8:	01 90       	ld	r0, Z+
     dea:	f0 81       	ld	r31, Z
     dec:	e0 2d       	mov	r30, r0
     dee:	c6 01       	movw	r24, r12
     df0:	09 95       	icall
     df2:	89 2b       	or	r24, r25
     df4:	11 f0       	breq	.+4      	; 0xdfa <_ZN5Print5writeEPKhj+0x3e>
     df6:	21 96       	adiw	r28, 0x01	; 1
     df8:	ee cf       	rjmp	.-36     	; 0xdd6 <_ZN5Print5writeEPKhj+0x1a>
     dfa:	7e 01       	movw	r14, r28
     dfc:	c7 01       	movw	r24, r14
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	08 95       	ret

00000e10 <_ZN5Print5writeEPKc>:
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	79 f0       	breq	.+30     	; 0xe34 <_ZN5Print5writeEPKc+0x24>
     e16:	fb 01       	movw	r30, r22
     e18:	01 90       	ld	r0, Z+
     e1a:	00 20       	and	r0, r0
     e1c:	e9 f7       	brne	.-6      	; 0xe18 <_ZN5Print5writeEPKc+0x8>
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	af 01       	movw	r20, r30
     e22:	46 1b       	sub	r20, r22
     e24:	57 0b       	sbc	r21, r23
     e26:	dc 01       	movw	r26, r24
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	02 80       	ldd	r0, Z+2	; 0x02
     e2e:	f3 81       	ldd	r31, Z+3	; 0x03
     e30:	e0 2d       	mov	r30, r0
     e32:	09 94       	ijmp
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	08 95       	ret

00000e3a <_ZN5Print5printEc>:
     e3a:	dc 01       	movw	r26, r24
     e3c:	ed 91       	ld	r30, X+
     e3e:	fc 91       	ld	r31, X
     e40:	01 90       	ld	r0, Z+
     e42:	f0 81       	ld	r31, Z
     e44:	e0 2d       	mov	r30, r0
     e46:	09 94       	ijmp

00000e48 <_ZN5Print7printlnEv>:
     e48:	65 ed       	ldi	r22, 0xD5	; 213
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_ZN5Print5writeEPKc>

00000e50 <_ZN5Print7printlnEPKc>:
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
     e5a:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN5Print5writeEPKc>
     e5e:	8c 01       	movw	r16, r24
     e60:	ce 01       	movw	r24, r28
     e62:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print7printlnEv>
     e66:	80 0f       	add	r24, r16
     e68:	91 1f       	adc	r25, r17
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <_ZN5Print11printNumberEmh>:
     e74:	8f 92       	push	r8
     e76:	9f 92       	push	r9
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	a1 97       	sbiw	r28, 0x21	; 33
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	7c 01       	movw	r14, r24
     e9a:	fa 01       	movw	r30, r20
     e9c:	cb 01       	movw	r24, r22
     e9e:	19 a2       	std	Y+33, r1	; 0x21
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <_ZN5Print11printNumberEmh+0x32>
     ea4:	2a e0       	ldi	r18, 0x0A	; 10
     ea6:	8e 01       	movw	r16, r28
     ea8:	0f 5d       	subi	r16, 0xDF	; 223
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	82 2e       	mov	r8, r18
     eae:	91 2c       	mov	r9, r1
     eb0:	a1 2c       	mov	r10, r1
     eb2:	b1 2c       	mov	r11, r1
     eb4:	bf 01       	movw	r22, r30
     eb6:	a5 01       	movw	r20, r10
     eb8:	94 01       	movw	r18, r8
     eba:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
     ebe:	f9 01       	movw	r30, r18
     ec0:	ca 01       	movw	r24, r20
     ec2:	01 50       	subi	r16, 0x01	; 1
     ec4:	11 09       	sbc	r17, r1
     ec6:	6a 30       	cpi	r22, 0x0A	; 10
     ec8:	10 f4       	brcc	.+4      	; 0xece <_ZN5Print11printNumberEmh+0x5a>
     eca:	60 5d       	subi	r22, 0xD0	; 208
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <_ZN5Print11printNumberEmh+0x5c>
     ece:	69 5c       	subi	r22, 0xC9	; 201
     ed0:	d8 01       	movw	r26, r16
     ed2:	6c 93       	st	X, r22
     ed4:	23 2b       	or	r18, r19
     ed6:	24 2b       	or	r18, r20
     ed8:	25 2b       	or	r18, r21
     eda:	61 f7       	brne	.-40     	; 0xeb4 <_ZN5Print11printNumberEmh+0x40>
     edc:	b8 01       	movw	r22, r16
     ede:	c7 01       	movw	r24, r14
     ee0:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN5Print5writeEPKc>
     ee4:	a1 96       	adiw	r28, 0x21	; 33
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	08 95       	ret

00000f06 <_ZN5Print5printEmi>:
     f06:	21 15       	cp	r18, r1
     f08:	31 05       	cpc	r19, r1
     f0a:	41 f4       	brne	.+16     	; 0xf1c <_ZN5Print5printEmi+0x16>
     f0c:	dc 01       	movw	r26, r24
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	64 2f       	mov	r22, r20
     f1a:	09 94       	ijmp
     f1c:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_ZN5Print11printNumberEmh>

00000f20 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     f2a:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN5Print5printEmi>
     f2e:	8c 01       	movw	r16, r24
  n += println();
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print7printlnEv>
  return n;
}
     f36:	80 0f       	add	r24, r16
     f38:	91 1f       	adc	r25, r17
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
  if (base == 0) {
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	81 f4       	brne	.+32     	; 0xf7a <_ZN5Print5printEli+0x36>
    return write(n);
     f5a:	dc 01       	movw	r26, r24
     f5c:	ed 91       	ld	r30, X+
     f5e:	fc 91       	ld	r31, X
     f60:	01 90       	ld	r0, Z+
     f62:	f0 81       	ld	r31, Z
     f64:	e0 2d       	mov	r30, r0
     f66:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     f78:	09 94       	ijmp
  } else if (base == 10) {
     f7a:	2a 30       	cpi	r18, 0x0A	; 10
     f7c:	31 05       	cpc	r19, r1
     f7e:	01 f5       	brne	.+64     	; 0xfc0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     f80:	77 ff       	sbrs	r23, 7
     f82:	1d c0       	rjmp	.+58     	; 0xfbe <_ZN5Print5printEli+0x7a>
     f84:	6a 01       	movw	r12, r20
     f86:	7b 01       	movw	r14, r22
     f88:	ec 01       	movw	r28, r24
      int t = print('-');
     f8a:	6d e2       	ldi	r22, 0x2D	; 45
     f8c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN5Print5printEc>
     f90:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     f92:	44 27       	eor	r20, r20
     f94:	55 27       	eor	r21, r21
     f96:	ba 01       	movw	r22, r20
     f98:	4c 19       	sub	r20, r12
     f9a:	5d 09       	sbc	r21, r13
     f9c:	6e 09       	sbc	r22, r14
     f9e:	7f 09       	sbc	r23, r15
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	ce 01       	movw	r24, r28
     fa4:	0e 94 3a 07 	call	0xe74	; 0xe74 <_ZN5Print11printNumberEmh>
     fa8:	80 0f       	add	r24, r16
     faa:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     fbe:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     fd0:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_ZN5Print11printNumberEmh>

00000fd4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     fd4:	9a 01       	movw	r18, r20
  return print((long) n, base);
     fd6:	ab 01       	movw	r20, r22
     fd8:	77 0f       	add	r23, r23
     fda:	66 0b       	sbc	r22, r22
     fdc:	77 0b       	sbc	r23, r23
     fde:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <_ZN5Print5printEli>

00000fe2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     fec:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZN5Print5printEii>
     ff0:	8c 01       	movw	r16, r24
  n += println();
     ff2:	ce 01       	movw	r24, r28
     ff4:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print7printlnEv>
  return n;
}
     ff8:	80 0f       	add	r24, r16
     ffa:	91 1f       	adc	r25, r17
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    101c:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <timer0_millis>
    1020:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <timer0_millis+0x1>
    1024:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <timer0_millis+0x2>
    1028:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    102c:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1030:	23 e0       	ldi	r18, 0x03	; 3
    1032:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1034:	2d 37       	cpi	r18, 0x7D	; 125
    1036:	20 f4       	brcc	.+8      	; 0x1040 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	a1 1d       	adc	r26, r1
    103c:	b1 1d       	adc	r27, r1
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1040:	26 e8       	ldi	r18, 0x86	; 134
    1042:	23 0f       	add	r18, r19
		m += 1;
    1044:	02 96       	adiw	r24, 0x02	; 2
    1046:	a1 1d       	adc	r26, r1
    1048:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    104a:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <timer0_fract>
	timer0_millis = m;
    104e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <timer0_millis>
    1052:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <timer0_millis+0x1>
    1056:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <timer0_millis+0x2>
    105a:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <timer0_millis+0x3>
	timer0_overflow_count++;
    105e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_overflow_count>
    1062:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_overflow_count+0x1>
    1066:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <timer0_overflow_count+0x2>
    106a:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <timer0_overflow_count+0x3>
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	a1 1d       	adc	r26, r1
    1072:	b1 1d       	adc	r27, r1
    1074:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <timer0_overflow_count>
    1078:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <timer0_overflow_count+0x1>
    107c:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <timer0_overflow_count+0x2>
    1080:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <timer0_overflow_count+0x3>
}
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    109a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    109c:	f8 94       	cli
	m = timer0_millis;
    109e:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <timer0_millis>
    10a2:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <timer0_millis+0x1>
    10a6:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <timer0_millis+0x2>
    10aa:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <timer0_millis+0x3>
	SREG = oldSREG;
    10ae:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    10b0:	08 95       	ret

000010b2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    10b4:	f8 94       	cli
	m = timer0_overflow_count;
    10b6:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_overflow_count>
    10ba:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_overflow_count+0x1>
    10be:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <timer0_overflow_count+0x2>
    10c2:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    10c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    10c8:	a8 9b       	sbis	0x15, 0	; 21
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <micros+0x24>
    10cc:	2f 3f       	cpi	r18, 0xFF	; 255
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <micros+0x24>
		m++;
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	a1 1d       	adc	r26, r1
    10d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    10d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    10d8:	ba 2f       	mov	r27, r26
    10da:	a9 2f       	mov	r26, r25
    10dc:	98 2f       	mov	r25, r24
    10de:	88 27       	eor	r24, r24
    10e0:	82 0f       	add	r24, r18
    10e2:	91 1d       	adc	r25, r1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	b1 1d       	adc	r27, r1
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	4a 95       	dec	r20
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <micros+0x3c>
}
    10fa:	08 95       	ret

000010fc <delay>:

void delay(unsigned long ms)
{
    10fc:	8f 92       	push	r8
    10fe:	9f 92       	push	r9
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1110:	0e 94 59 08 	call	0x10b2	; 0x10b2 <micros>
    1114:	4b 01       	movw	r8, r22
    1116:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1118:	c1 14       	cp	r12, r1
    111a:	d1 04       	cpc	r13, r1
    111c:	e1 04       	cpc	r14, r1
    111e:	f1 04       	cpc	r15, r1
    1120:	01 f1       	breq	.+64     	; 0x1162 <delay+0x66>
		yield();
    1122:	0e 94 82 0c 	call	0x1904	; 0x1904 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1126:	0e 94 59 08 	call	0x10b2	; 0x10b2 <micros>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	88 19       	sub	r24, r8
    1130:	99 09       	sbc	r25, r9
    1132:	aa 09       	sbc	r26, r10
    1134:	bb 09       	sbc	r27, r11
    1136:	88 3e       	cpi	r24, 0xE8	; 232
    1138:	93 40       	sbci	r25, 0x03	; 3
    113a:	a1 05       	cpc	r26, r1
    113c:	b1 05       	cpc	r27, r1
    113e:	60 f3       	brcs	.-40     	; 0x1118 <delay+0x1c>
			ms--;
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	c2 1a       	sub	r12, r18
    1144:	d1 08       	sbc	r13, r1
    1146:	e1 08       	sbc	r14, r1
    1148:	f1 08       	sbc	r15, r1
			start += 1000;
    114a:	88 ee       	ldi	r24, 0xE8	; 232
    114c:	88 0e       	add	r8, r24
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	98 1e       	adc	r9, r24
    1152:	a1 1c       	adc	r10, r1
    1154:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1156:	c1 14       	cp	r12, r1
    1158:	d1 04       	cpc	r13, r1
    115a:	e1 04       	cpc	r14, r1
    115c:	f1 04       	cpc	r15, r1
    115e:	19 f7       	brne	.-58     	; 0x1126 <delay+0x2a>
    1160:	db cf       	rjmp	.-74     	; 0x1118 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	9f 90       	pop	r9
    1170:	8f 90       	pop	r8
    1172:	08 95       	ret

00001174 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	91 05       	cpc	r25, r1
    1178:	38 f0       	brcs	.+14     	; 0x1188 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1182:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <delayMicroseconds+0x10>
    1188:	08 95       	ret

0000118a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    118a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    118c:	84 b5       	in	r24, 0x24	; 36
    118e:	82 60       	ori	r24, 0x02	; 2
    1190:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1192:	84 b5       	in	r24, 0x24	; 36
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1198:	85 b5       	in	r24, 0x25	; 37
    119a:	82 60       	ori	r24, 0x02	; 2
    119c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    119e:	85 b5       	in	r24, 0x25	; 37
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11a4:	ee e6       	ldi	r30, 0x6E	; 110
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	81 60       	ori	r24, 0x01	; 1
    11ac:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11ae:	e1 e8       	ldi	r30, 0x81	; 129
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11b4:	80 81       	ld	r24, Z
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11ba:	80 81       	ld	r24, Z
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11ca:	e1 eb       	ldi	r30, 0xB1	; 177
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	84 60       	ori	r24, 0x04	; 4
    11d2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11d4:	e0 eb       	ldi	r30, 0xB0	; 176
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    11de:	ea e7       	ldi	r30, 0x7A	; 122
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	84 60       	ori	r24, 0x04	; 4
    11e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    11e8:	80 81       	ld	r24, Z
    11ea:	82 60       	ori	r24, 0x02	; 2
    11ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    11ee:	80 81       	ld	r24, Z
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11f4:	80 81       	ld	r24, Z
    11f6:	80 68       	ori	r24, 0x80	; 128
    11f8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11fe:	08 95       	ret

00001200 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	18 2f       	mov	r17, r24
    1208:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
	if (val == 0)
    1210:	20 97       	sbiw	r28, 0x00	; 0
    1212:	11 f4       	brne	.+4      	; 0x1218 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <analogWrite+0x20>
	}
	else if (val == 255)
    1218:	cf 3f       	cpi	r28, 0xFF	; 255
    121a:	d1 05       	cpc	r29, r1
    121c:	39 f4       	brne	.+14     	; 0x122c <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1228:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    122c:	e1 2f       	mov	r30, r17
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ec 56       	subi	r30, 0x6C	; 108
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	e4 91       	lpm	r30, Z
    1236:	e3 30       	cpi	r30, 0x03	; 3
    1238:	f9 f0       	breq	.+62     	; 0x1278 <analogWrite+0x78>
    123a:	48 f4       	brcc	.+18     	; 0x124e <analogWrite+0x4e>
    123c:	e1 30       	cpi	r30, 0x01	; 1
    123e:	b9 f0       	breq	.+46     	; 0x126e <analogWrite+0x6e>
    1240:	e2 30       	cpi	r30, 0x02	; 2
    1242:	a1 f5       	brne	.+104    	; 0x12ac <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1244:	84 b5       	in	r24, 0x24	; 36
    1246:	80 62       	ori	r24, 0x20	; 32
    1248:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    124a:	c8 bd       	out	0x28, r28	; 40
				break;
    124c:	34 c0       	rjmp	.+104    	; 0x12b6 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    124e:	e7 30       	cpi	r30, 0x07	; 7
    1250:	e9 f0       	breq	.+58     	; 0x128c <analogWrite+0x8c>
    1252:	e8 30       	cpi	r30, 0x08	; 8
    1254:	19 f1       	breq	.+70     	; 0x129c <analogWrite+0x9c>
    1256:	e4 30       	cpi	r30, 0x04	; 4
    1258:	49 f5       	brne	.+82     	; 0x12ac <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    125a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    125e:	80 62       	ori	r24, 0x20	; 32
    1260:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    1264:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1268:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    126c:	24 c0       	rjmp	.+72     	; 0x12b6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    126e:	84 b5       	in	r24, 0x24	; 36
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1274:	c7 bd       	out	0x27, r28	; 39
				break;
    1276:	1f c0       	rjmp	.+62     	; 0x12b6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1278:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1282:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1286:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    128a:	15 c0       	rjmp	.+42     	; 0x12b6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    128c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1290:	80 68       	ori	r24, 0x80	; 128
    1292:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    1296:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    129c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    12a6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    12ac:	c0 38       	cpi	r28, 0x80	; 128
    12ae:	d1 05       	cpc	r29, r1
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <analogWrite+0xb4>
    12b2:	b5 cf       	rjmp	.-150    	; 0x121e <analogWrite+0x1e>
    12b4:	af cf       	rjmp	.-162    	; 0x1214 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	08 95       	ret

000012be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <turnOffPWM+0x24>
    12c2:	28 f4       	brcc	.+10     	; 0x12ce <turnOffPWM+0x10>
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	99 f0       	breq	.+38     	; 0x12ee <turnOffPWM+0x30>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	a1 f0       	breq	.+40     	; 0x12f4 <turnOffPWM+0x36>
    12cc:	08 95       	ret
    12ce:	87 30       	cpi	r24, 0x07	; 7
    12d0:	a9 f0       	breq	.+42     	; 0x12fc <turnOffPWM+0x3e>
    12d2:	88 30       	cpi	r24, 0x08	; 8
    12d4:	b9 f0       	breq	.+46     	; 0x1304 <turnOffPWM+0x46>
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	d1 f4       	brne	.+52     	; 0x130e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    12de:	8f 7d       	andi	r24, 0xDF	; 223
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    12e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    12e6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    12ec:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    12ee:	84 b5       	in	r24, 0x24	; 36
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    12f4:	84 b5       	in	r24, 0x24	; 36
    12f6:	8f 7d       	andi	r24, 0xDF	; 223
    12f8:	84 bd       	out	0x24, r24	; 36
    12fa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1300:	8f 77       	andi	r24, 0x7F	; 127
    1302:	03 c0       	rjmp	.+6      	; 0x130a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1304:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    130e:	08 95       	ret

00001310 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	fc 01       	movw	r30, r24
    1318:	e8 55       	subi	r30, 0x58	; 88
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    131e:	fc 01       	movw	r30, r24
    1320:	e4 54       	subi	r30, 0x44	; 68
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1326:	88 23       	and	r24, r24
    1328:	61 f1       	breq	.+88     	; 0x1382 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	fc 01       	movw	r30, r24
    1332:	ec 51       	subi	r30, 0x1C	; 28
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	c5 91       	lpm	r28, Z+
    1338:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    133a:	fc 01       	movw	r30, r24
    133c:	e6 52       	subi	r30, 0x26	; 38
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	a5 91       	lpm	r26, Z+
    1342:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1344:	61 11       	cpse	r22, r1
    1346:	09 c0       	rjmp	.+18     	; 0x135a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1348:	9f b7       	in	r25, 0x3f	; 63
                cli();
    134a:	f8 94       	cli
		*reg &= ~bit;
    134c:	88 81       	ld	r24, Y
    134e:	20 95       	com	r18
    1350:	82 23       	and	r24, r18
    1352:	88 83       	st	Y, r24
		*out &= ~bit;
    1354:	ec 91       	ld	r30, X
    1356:	2e 23       	and	r18, r30
    1358:	0b c0       	rjmp	.+22     	; 0x1370 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    135a:	62 30       	cpi	r22, 0x02	; 2
    135c:	61 f4       	brne	.+24     	; 0x1376 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    135e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1360:	f8 94       	cli
		*reg &= ~bit;
    1362:	88 81       	ld	r24, Y
    1364:	32 2f       	mov	r19, r18
    1366:	30 95       	com	r19
    1368:	83 23       	and	r24, r19
    136a:	88 83       	st	Y, r24
		*out |= bit;
    136c:	ec 91       	ld	r30, X
    136e:	2e 2b       	or	r18, r30
    1370:	2c 93       	st	X, r18
		SREG = oldSREG;
    1372:	9f bf       	out	0x3f, r25	; 63
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1376:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1378:	f8 94       	cli
		*reg |= bit;
    137a:	e8 81       	ld	r30, Y
    137c:	2e 2b       	or	r18, r30
    137e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1380:	8f bf       	out	0x3f, r24	; 63
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	f9 01       	movw	r30, r18
    1394:	ec 56       	subi	r30, 0x6C	; 108
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    139a:	f9 01       	movw	r30, r18
    139c:	e8 55       	subi	r30, 0x58	; 88
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13a2:	f9 01       	movw	r30, r18
    13a4:	e4 54       	subi	r30, 0x44	; 68
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13aa:	cc 23       	and	r28, r28
    13ac:	c1 f0       	breq	.+48     	; 0x13de <digitalWrite+0x56>
    13ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13b0:	81 11       	cpse	r24, r1
    13b2:	0e 94 5f 09 	call	0x12be	; 0x12be <turnOffPWM>

	out = portOutputRegister(port);
    13b6:	ec 2f       	mov	r30, r28
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	e6 52       	subi	r30, 0x26	; 38
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	a5 91       	lpm	r26, Z+
    13c4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    13c6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    13c8:	f8 94       	cli

	if (val == LOW) {
    13ca:	11 11       	cpse	r17, r1
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <digitalWrite+0x4e>
		*out &= ~bit;
    13ce:	8c 91       	ld	r24, X
    13d0:	d0 95       	com	r29
    13d2:	d8 23       	and	r29, r24
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <digitalWrite+0x52>
	} else {
		*out |= bit;
    13d6:	ec 91       	ld	r30, X
    13d8:	de 2b       	or	r29, r30
    13da:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    13dc:	9f bf       	out	0x3f, r25	; 63
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	08 95       	ret

000013e6 <digitalRead>:

int digitalRead(uint8_t pin)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	f9 01       	movw	r30, r18
    13f0:	ec 56       	subi	r30, 0x6C	; 108
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13f6:	f9 01       	movw	r30, r18
    13f8:	e8 55       	subi	r30, 0x58	; 88
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13fe:	f9 01       	movw	r30, r18
    1400:	e4 54       	subi	r30, 0x44	; 68
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1406:	cc 23       	and	r28, r28
    1408:	91 f0       	breq	.+36     	; 0x142e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    140a:	81 11       	cpse	r24, r1
    140c:	0e 94 5f 09 	call	0x12be	; 0x12be <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1410:	ec 2f       	mov	r30, r28
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e0 53       	subi	r30, 0x30	; 48
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	a5 91       	lpm	r26, Z+
    141e:	b4 91       	lpm	r27, Z
    1420:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1422:	ed 23       	and	r30, r29
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	21 f4       	brne	.+8      	; 0x1432 <digitalRead+0x4c>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <digitalRead+0x4c>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1438:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    143c:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    1440:	28 17       	cp	r18, r24
    1442:	39 07       	cpc	r19, r25
    1444:	b9 f4       	brne	.+46     	; 0x1474 <_ZN14SoftwareSerial4readEv+0x3c>
    1446:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    144a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    144e:	98 17       	cp	r25, r24
    1450:	89 f0       	breq	.+34     	; 0x1474 <_ZN14SoftwareSerial4readEv+0x3c>
    1452:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	ef 54       	subi	r30, 0x4F	; 79
    145a:	fd 4f       	sbci	r31, 0xFD	; 253
    145c:	80 81       	ld	r24, Z
    145e:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	2f 5f       	subi	r18, 0xFF	; 255
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	2f 73       	andi	r18, 0x3F	; 63
    146a:	33 27       	eor	r19, r19
    146c:	20 93 af 02 	sts	0x02AF, r18	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	08 95       	ret
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	9f ef       	ldi	r25, 0xFF	; 255
    1478:	08 95       	ret

0000147a <_ZN14SoftwareSerial5writeEh>:
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	dc 01       	movw	r26, r24
    1482:	5c 96       	adiw	r26, 0x1c	; 28
    1484:	8d 91       	ld	r24, X+
    1486:	9c 91       	ld	r25, X
    1488:	5d 97       	sbiw	r26, 0x1d	; 29
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	39 f4       	brne	.+14     	; 0x149c <_ZN14SoftwareSerial5writeEh+0x22>
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	13 96       	adiw	r26, 0x03	; 3
    1494:	3c 93       	st	X, r19
    1496:	2e 93       	st	-X, r18
    1498:	12 97       	sbiw	r26, 0x02	; 2
    149a:	3b c0       	rjmp	.+118    	; 0x1512 <_ZN14SoftwareSerial5writeEh+0x98>
    149c:	51 96       	adiw	r26, 0x11	; 17
    149e:	ed 91       	ld	r30, X+
    14a0:	fc 91       	ld	r31, X
    14a2:	52 97       	sbiw	r26, 0x12	; 18
    14a4:	50 96       	adiw	r26, 0x10	; 16
    14a6:	2c 91       	ld	r18, X
    14a8:	50 97       	sbiw	r26, 0x10	; 16
    14aa:	32 2f       	mov	r19, r18
    14ac:	30 95       	com	r19
    14ae:	1f b7       	in	r17, 0x3f	; 63
    14b0:	5e 96       	adiw	r26, 0x1e	; 30
    14b2:	4c 91       	ld	r20, X
    14b4:	5e 97       	sbiw	r26, 0x1e	; 30
    14b6:	74 2f       	mov	r23, r20
    14b8:	72 70       	andi	r23, 0x02	; 2
    14ba:	41 fd       	sbrc	r20, 1
    14bc:	60 95       	com	r22
    14be:	f8 94       	cli
    14c0:	40 81       	ld	r20, Z
    14c2:	77 23       	and	r23, r23
    14c4:	11 f0       	breq	.+4      	; 0x14ca <_ZN14SoftwareSerial5writeEh+0x50>
    14c6:	42 2b       	or	r20, r18
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <_ZN14SoftwareSerial5writeEh+0x52>
    14ca:	43 23       	and	r20, r19
    14cc:	40 83       	st	Z, r20
    14ce:	ec 01       	movw	r28, r24
    14d0:	21 97       	sbiw	r28, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <_ZN14SoftwareSerial5writeEh+0x56>
    14d4:	48 e0       	ldi	r20, 0x08	; 8
    14d6:	50 81       	ld	r21, Z
    14d8:	60 ff       	sbrs	r22, 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <_ZN14SoftwareSerial5writeEh+0x66>
    14dc:	52 2b       	or	r21, r18
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <_ZN14SoftwareSerial5writeEh+0x68>
    14e0:	53 23       	and	r21, r19
    14e2:	50 83       	st	Z, r21
    14e4:	ec 01       	movw	r28, r24
    14e6:	21 97       	sbiw	r28, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <_ZN14SoftwareSerial5writeEh+0x6c>
    14ea:	66 95       	lsr	r22
    14ec:	41 50       	subi	r20, 0x01	; 1
    14ee:	99 f7       	brne	.-26     	; 0x14d6 <_ZN14SoftwareSerial5writeEh+0x5c>
    14f0:	80 81       	ld	r24, Z
    14f2:	77 23       	and	r23, r23
    14f4:	19 f0       	breq	.+6      	; 0x14fc <_ZN14SoftwareSerial5writeEh+0x82>
    14f6:	83 23       	and	r24, r19
    14f8:	80 83       	st	Z, r24
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <_ZN14SoftwareSerial5writeEh+0x86>
    14fc:	28 2b       	or	r18, r24
    14fe:	20 83       	st	Z, r18
    1500:	1f bf       	out	0x3f, r17	; 63
    1502:	5c 96       	adiw	r26, 0x1c	; 28
    1504:	8d 91       	ld	r24, X+
    1506:	9c 91       	ld	r25, X
    1508:	5d 97       	sbiw	r26, 0x1d	; 29
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <_ZN14SoftwareSerial5writeEh+0x90>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	08 95       	ret

0000151a <_ZN14SoftwareSerial5flushEv>:
    151a:	08 95       	ret

0000151c <_ZN14SoftwareSerial4peekEv>:
    151c:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    1520:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    1524:	28 17       	cp	r18, r24
    1526:	39 07       	cpc	r19, r25
    1528:	71 f4       	brne	.+28     	; 0x1546 <_ZN14SoftwareSerial4peekEv+0x2a>
    152a:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    152e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1532:	98 17       	cp	r25, r24
    1534:	41 f0       	breq	.+16     	; 0x1546 <_ZN14SoftwareSerial4peekEv+0x2a>
    1536:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	ef 54       	subi	r30, 0x4F	; 79
    153e:	fd 4f       	sbci	r31, 0xFD	; 253
    1540:	80 81       	ld	r24, Z
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	08 95       	ret
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <_ZN14SoftwareSerial9availableEv>:
    154c:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    1550:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    1554:	28 17       	cp	r18, r24
    1556:	39 07       	cpc	r19, r25
    1558:	71 f4       	brne	.+28     	; 0x1576 <_ZN14SoftwareSerial9availableEv+0x2a>
    155a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    155e:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	80 5c       	subi	r24, 0xC0	; 192
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	82 1b       	sub	r24, r18
    156a:	91 09       	sbc	r25, r1
    156c:	60 e4       	ldi	r22, 0x40	; 64
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	0e 94 83 0c 	call	0x1906	; 0x1906 <__divmodhi4>
    1574:	08 95       	ret
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	08 95       	ret

0000157c <_ZN14SoftwareSerial13stopListeningEv>:
    157c:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    1580:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    1584:	e8 17       	cp	r30, r24
    1586:	f9 07       	cpc	r31, r25
    1588:	69 f4       	brne	.+26     	; 0x15a4 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    158a:	a3 89       	ldd	r26, Z+19	; 0x13
    158c:	b4 89       	ldd	r27, Z+20	; 0x14
    158e:	9c 91       	ld	r25, X
    1590:	85 89       	ldd	r24, Z+21	; 0x15
    1592:	80 95       	com	r24
    1594:	89 23       	and	r24, r25
    1596:	8c 93       	st	X, r24
    1598:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    159c:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	08 95       	ret
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	08 95       	ret

000015a8 <_ZN14SoftwareSerial6listenEv>:
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
    15ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15b2:	89 2b       	or	r24, r25
    15b4:	f1 f0       	breq	.+60     	; 0x15f2 <_ZN14SoftwareSerial6listenEv+0x4a>
    15b6:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    15ba:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    15be:	c8 17       	cp	r28, r24
    15c0:	d9 07       	cpc	r29, r25
    15c2:	b9 f0       	breq	.+46     	; 0x15f2 <_ZN14SoftwareSerial6listenEv+0x4a>
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	11 f0       	breq	.+4      	; 0x15cc <_ZN14SoftwareSerial6listenEv+0x24>
    15c8:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN14SoftwareSerial13stopListeningEv>
    15cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	8e 8f       	std	Y+30, r24	; 0x1e
    15d2:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15d6:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    15da:	d0 93 f2 02 	sts	0x02F2, r29	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    15de:	c0 93 f1 02 	sts	0x02F1, r28	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    15e2:	eb 89       	ldd	r30, Y+19	; 0x13
    15e4:	fc 89       	ldd	r31, Y+20	; 0x14
    15e6:	90 81       	ld	r25, Z
    15e8:	8d 89       	ldd	r24, Y+21	; 0x15
    15ea:	89 2b       	or	r24, r25
    15ec:	80 83       	st	Z, r24
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <_ZN14SoftwareSerial6listenEv+0x4c>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <__vector_3>:
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <_ZN14SoftwareSerial13active_objectE>
    1620:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <_ZN14SoftwareSerial13active_objectE+0x1>
    1624:	30 97       	sbiw	r30, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <__vector_3+0x30>
    1628:	51 c0       	rjmp	.+162    	; 0x16cc <__vector_3+0xd2>
    162a:	96 8d       	ldd	r25, Z+30	; 0x1e
    162c:	a6 85       	ldd	r26, Z+14	; 0x0e
    162e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1630:	85 85       	ldd	r24, Z+13	; 0x0d
    1632:	91 ff       	sbrs	r25, 1
    1634:	04 c0       	rjmp	.+8      	; 0x163e <__vector_3+0x44>
    1636:	9c 91       	ld	r25, X
    1638:	89 23       	and	r24, r25
    163a:	29 f4       	brne	.+10     	; 0x1646 <__vector_3+0x4c>
    163c:	47 c0       	rjmp	.+142    	; 0x16cc <__vector_3+0xd2>
    163e:	9c 91       	ld	r25, X
    1640:	89 23       	and	r24, r25
    1642:	09 f0       	breq	.+2      	; 0x1646 <__vector_3+0x4c>
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <__vector_3+0xd2>
    1646:	a3 89       	ldd	r26, Z+19	; 0x13
    1648:	b4 89       	ldd	r27, Z+20	; 0x14
    164a:	9c 91       	ld	r25, X
    164c:	85 89       	ldd	r24, Z+21	; 0x15
    164e:	80 95       	com	r24
    1650:	89 23       	and	r24, r25
    1652:	8c 93       	st	X, r24
    1654:	86 89       	ldd	r24, Z+22	; 0x16
    1656:	97 89       	ldd	r25, Z+23	; 0x17
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <__vector_3+0x5e>
    165c:	60 8d       	ldd	r22, Z+24	; 0x18
    165e:	71 8d       	ldd	r23, Z+25	; 0x19
    1660:	a6 85       	ldd	r26, Z+14	; 0x0e
    1662:	b7 85       	ldd	r27, Z+15	; 0x0f
    1664:	55 85       	ldd	r21, Z+13	; 0x0d
    1666:	38 e0       	ldi	r19, 0x08	; 8
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	cb 01       	movw	r24, r22
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <__vector_3+0x72>
    1670:	82 2f       	mov	r24, r18
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	28 2f       	mov	r18, r24
    167a:	4c 91       	ld	r20, X
    167c:	45 23       	and	r20, r21
    167e:	09 f0       	breq	.+2      	; 0x1682 <__vector_3+0x88>
    1680:	20 68       	ori	r18, 0x80	; 128
    1682:	31 50       	subi	r19, 0x01	; 1
    1684:	91 f7       	brne	.-28     	; 0x166a <__vector_3+0x70>
    1686:	86 8d       	ldd	r24, Z+30	; 0x1e
    1688:	81 fd       	sbrc	r24, 1
    168a:	20 95       	com	r18
    168c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	8f 73       	andi	r24, 0x3F	; 63
    1696:	99 27       	eor	r25, r25
    1698:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <_ZN14SoftwareSerial20_receive_buffer_headE>
    169c:	38 17       	cp	r19, r24
    169e:	49 f0       	breq	.+18     	; 0x16b2 <__vector_3+0xb8>
    16a0:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	af 54       	subi	r26, 0x4F	; 79
    16a8:	bd 4f       	sbci	r27, 0xFD	; 253
    16aa:	2c 93       	st	X, r18
    16ac:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <__vector_3+0xbe>
    16b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    16b4:	81 60       	ori	r24, 0x01	; 1
    16b6:	86 8f       	std	Z+30, r24	; 0x1e
    16b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <__vector_3+0xc2>
    16c0:	a3 89       	ldd	r26, Z+19	; 0x13
    16c2:	b4 89       	ldd	r27, Z+20	; 0x14
    16c4:	9c 91       	ld	r25, X
    16c6:	85 89       	ldd	r24, Z+21	; 0x15
    16c8:	89 2b       	or	r24, r25
    16ca:	8c 93       	st	X, r24
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <_ZN14SoftwareSerial5setTXEh>:
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
    16f6:	16 2f       	mov	r17, r22
    16f8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    16fa:	66 95       	lsr	r22
    16fc:	61 70       	andi	r22, 0x01	; 1
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	68 27       	eor	r22, r24
    1702:	81 2f       	mov	r24, r17
    1704:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	81 2f       	mov	r24, r17
    170c:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
    1710:	81 2f       	mov	r24, r17
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	fc 01       	movw	r30, r24
    1716:	e8 55       	subi	r30, 0x58	; 88
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	e4 91       	lpm	r30, Z
    171c:	e8 8b       	std	Y+16, r30	; 0x10
    171e:	fc 01       	movw	r30, r24
    1720:	e4 54       	subi	r30, 0x44	; 68
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	e4 91       	lpm	r30, Z
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	e6 52       	subi	r30, 0x26	; 38
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	85 91       	lpm	r24, Z+
    1732:	94 91       	lpm	r25, Z
    1734:	9a 8b       	std	Y+18, r25	; 0x12
    1736:	89 8b       	std	Y+17, r24	; 0x11
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	08 95       	ret

00001740 <_ZN14SoftwareSerial5setRXEh>:
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    1748:	16 2f       	mov	r17, r22
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	81 2f       	mov	r24, r17
    174e:	0e 94 88 09 	call	0x1310	; 0x1310 <pinMode>
    1752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1754:	81 fd       	sbrc	r24, 1
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <_ZN14SoftwareSerial5setRXEh+0x20>
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	81 2f       	mov	r24, r17
    175c:	0e 94 c4 09 	call	0x1388	; 0x1388 <digitalWrite>
    1760:	1c 87       	std	Y+12, r17	; 0x0c
    1762:	81 2f       	mov	r24, r17
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	fc 01       	movw	r30, r24
    1768:	e8 55       	subi	r30, 0x58	; 88
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	e4 91       	lpm	r30, Z
    176e:	ed 87       	std	Y+13, r30	; 0x0d
    1770:	fc 01       	movw	r30, r24
    1772:	e4 54       	subi	r30, 0x44	; 68
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	e4 91       	lpm	r30, Z
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	e0 53       	subi	r30, 0x30	; 48
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	85 91       	lpm	r24, Z+
    1784:	94 91       	lpm	r25, Z
    1786:	9f 87       	std	Y+15, r25	; 0x0f
    1788:	8e 87       	std	Y+14, r24	; 0x0e
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	08 95       	ret

00001792 <_ZN14SoftwareSerialC1Ehhb>:
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	16 2f       	mov	r17, r22
    179c:	1b 82       	std	Y+3, r1	; 0x03
    179e:	1a 82       	std	Y+2, r1	; 0x02
    17a0:	88 ee       	ldi	r24, 0xE8	; 232
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	a0 e0       	ldi	r26, 0x00	; 0
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	8c 83       	std	Y+4, r24	; 0x04
    17aa:	9d 83       	std	Y+5, r25	; 0x05
    17ac:	ae 83       	std	Y+6, r26	; 0x06
    17ae:	bf 83       	std	Y+7, r27	; 0x07
    17b0:	88 ee       	ldi	r24, 0xE8	; 232
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	99 83       	std	Y+1, r25	; 0x01
    17b6:	88 83       	st	Y, r24
    17b8:	1f 8a       	std	Y+23, r1	; 0x17
    17ba:	1e 8a       	std	Y+22, r1	; 0x16
    17bc:	19 8e       	std	Y+25, r1	; 0x19
    17be:	18 8e       	std	Y+24, r1	; 0x18
    17c0:	1b 8e       	std	Y+27, r1	; 0x1b
    17c2:	1a 8e       	std	Y+26, r1	; 0x1a
    17c4:	1d 8e       	std	Y+29, r1	; 0x1d
    17c6:	1c 8e       	std	Y+28, r1	; 0x1c
    17c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ca:	8e 7f       	andi	r24, 0xFE	; 254
    17cc:	20 fb       	bst	r18, 0
    17ce:	81 f9       	bld	r24, 1
    17d0:	8e 8f       	std	Y+30, r24	; 0x1e
    17d2:	64 2f       	mov	r22, r20
    17d4:	ce 01       	movw	r24, r28
    17d6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN14SoftwareSerial5setTXEh>
    17da:	61 2f       	mov	r22, r17
    17dc:	ce 01       	movw	r24, r28
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_ZN14SoftwareSerial5setRXEh>

000017e8 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
    17ee:	9a 01       	movw	r18, r20
    17f0:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    17f2:	1b 8e       	std	Y+27, r1	; 0x1b
    17f4:	1a 8e       	std	Y+26, r1	; 0x1a
    17f6:	19 8e       	std	Y+25, r1	; 0x19
    17f8:	18 8e       	std	Y+24, r1	; 0x18
    17fa:	1f 8a       	std	Y+23, r1	; 0x17
    17fc:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	79 e0       	ldi	r23, 0x09	; 9
    1802:	8d e3       	ldi	r24, 0x3D	; 61
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divmodsi4>
    180a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    180c:	24 30       	cpi	r18, 0x04	; 4
    180e:	31 05       	cpc	r19, r1
    1810:	18 f0       	brcs	.+6      	; 0x1818 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1812:	c9 01       	movw	r24, r18
    1814:	03 97       	sbiw	r24, 0x03	; 3
    1816:	02 c0       	rjmp	.+4      	; 0x181c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    181c:	9d 8f       	std	Y+29, r25	; 0x1d
    181e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    1820:	6c 85       	ldd	r22, Y+12	; 0x0c
    1822:	66 31       	cpi	r22, 0x16	; 22
    1824:	08 f0       	brcs	.+2      	; 0x1828 <_ZN14SoftwareSerial5beginEl+0x40>
    1826:	69 c0       	rjmp	.+210    	; 0x18fa <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1828:	c9 01       	movw	r24, r18
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    182e:	84 31       	cpi	r24, 0x14	; 20
    1830:	91 05       	cpc	r25, r1
    1832:	10 f0       	brcs	.+4      	; 0x1838 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    1834:	43 97       	sbiw	r24, 0x13	; 19
    1836:	02 c0       	rjmp	.+4      	; 0x183c <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    183c:	9f 8b       	std	Y+23, r25	; 0x17
    183e:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1840:	36 97       	sbiw	r30, 0x06	; 6
    1842:	18 f0       	brcs	.+6      	; 0x184a <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    1844:	c9 01       	movw	r24, r18
    1846:	05 97       	sbiw	r24, 0x05	; 5
    1848:	02 c0       	rjmp	.+4      	; 0x184e <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    184e:	99 8f       	std	Y+25, r25	; 0x19
    1850:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1852:	c9 01       	movw	r24, r18
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	28 0f       	add	r18, r24
    185a:	39 1f       	adc	r19, r25
    185c:	36 95       	lsr	r19
    185e:	27 95       	ror	r18
    1860:	36 95       	lsr	r19
    1862:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1864:	2d 30       	cpi	r18, 0x0D	; 13
    1866:	31 05       	cpc	r19, r1
    1868:	18 f0       	brcs	.+6      	; 0x1870 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    186a:	2c 50       	subi	r18, 0x0C	; 12
    186c:	31 09       	sbc	r19, r1
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    1870:	21 e0       	ldi	r18, 0x01	; 1
    1872:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1874:	3b 8f       	std	Y+27, r19	; 0x1b
    1876:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1878:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    187c:	68 30       	cpi	r22, 0x08	; 8
    187e:	50 f0       	brcs	.+20     	; 0x1894 <_ZN14SoftwareSerial5beginEl+0xac>
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	6e 30       	cpi	r22, 0x0E	; 14
    1884:	08 f4       	brcc	.+2      	; 0x1888 <_ZN14SoftwareSerial5beginEl+0xa0>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	01 c0       	rjmp	.+2      	; 0x188e <_ZN14SoftwareSerial5beginEl+0xa6>
    188c:	88 0f       	add	r24, r24
    188e:	2a 95       	dec	r18
    1890:	ea f7       	brpl	.-6      	; 0x188c <_ZN14SoftwareSerial5beginEl+0xa4>
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <_ZN14SoftwareSerial5beginEl+0xae>
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	89 2b       	or	r24, r25
    1898:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    189c:	9c 85       	ldd	r25, Y+12	; 0x0c
    189e:	98 30       	cpi	r25, 0x08	; 8
    18a0:	38 f0       	brcs	.+14     	; 0x18b0 <_ZN14SoftwareSerial5beginEl+0xc8>
    18a2:	9e 30       	cpi	r25, 0x0E	; 14
    18a4:	40 f0       	brcs	.+16     	; 0x18b6 <_ZN14SoftwareSerial5beginEl+0xce>
    18a6:	96 31       	cpi	r25, 0x16	; 22
    18a8:	48 f0       	brcs	.+18     	; 0x18bc <_ZN14SoftwareSerial5beginEl+0xd4>
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <_ZN14SoftwareSerial5beginEl+0xd8>
    18b0:	2d e6       	ldi	r18, 0x6D	; 109
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <_ZN14SoftwareSerial5beginEl+0xd8>
    18b6:	2b e6       	ldi	r18, 0x6B	; 107
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <_ZN14SoftwareSerial5beginEl+0xd8>
    18bc:	2c e6       	ldi	r18, 0x6C	; 108
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 8b       	std	Y+20, r19	; 0x14
    18c2:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    18c4:	98 30       	cpi	r25, 0x08	; 8
    18c6:	30 f4       	brcc	.+12     	; 0x18d4 <_ZN14SoftwareSerial5beginEl+0xec>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <_ZN14SoftwareSerial5beginEl+0xe6>
    18cc:	88 0f       	add	r24, r24
    18ce:	9a 95       	dec	r25
    18d0:	ea f7       	brpl	.-6      	; 0x18cc <_ZN14SoftwareSerial5beginEl+0xe4>
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <_ZN14SoftwareSerial5beginEl+0x108>
    18d4:	29 2f       	mov	r18, r25
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	9e 30       	cpi	r25, 0x0E	; 14
    18da:	18 f4       	brcc	.+6      	; 0x18e2 <_ZN14SoftwareSerial5beginEl+0xfa>
    18dc:	28 50       	subi	r18, 0x08	; 8
    18de:	31 09       	sbc	r19, r1
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <_ZN14SoftwareSerial5beginEl+0xfe>
    18e2:	2e 50       	subi	r18, 0x0E	; 14
    18e4:	31 09       	sbc	r19, r1
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <_ZN14SoftwareSerial5beginEl+0x104>
    18ea:	88 0f       	add	r24, r24
    18ec:	2a 95       	dec	r18
    18ee:	ea f7       	brpl	.-6      	; 0x18ea <_ZN14SoftwareSerial5beginEl+0x102>
    18f0:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    18f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    18fa:	ce 01       	movw	r24, r28
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1900:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <_ZN14SoftwareSerial6listenEv>

00001904 <yield>:
    1904:	08 95       	ret

00001906 <__divmodhi4>:
    1906:	97 fb       	bst	r25, 7
    1908:	07 2e       	mov	r0, r23
    190a:	16 f4       	brtc	.+4      	; 0x1910 <__divmodhi4+0xa>
    190c:	00 94       	com	r0
    190e:	07 d0       	rcall	.+14     	; 0x191e <__divmodhi4_neg1>
    1910:	77 fd       	sbrc	r23, 7
    1912:	09 d0       	rcall	.+18     	; 0x1926 <__divmodhi4_neg2>
    1914:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__udivmodhi4>
    1918:	07 fc       	sbrc	r0, 7
    191a:	05 d0       	rcall	.+10     	; 0x1926 <__divmodhi4_neg2>
    191c:	3e f4       	brtc	.+14     	; 0x192c <__divmodhi4_exit>

0000191e <__divmodhi4_neg1>:
    191e:	90 95       	com	r25
    1920:	81 95       	neg	r24
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	08 95       	ret

00001926 <__divmodhi4_neg2>:
    1926:	70 95       	com	r23
    1928:	61 95       	neg	r22
    192a:	7f 4f       	sbci	r23, 0xFF	; 255

0000192c <__divmodhi4_exit>:
    192c:	08 95       	ret

0000192e <__udivmodsi4>:
    192e:	a1 e2       	ldi	r26, 0x21	; 33
    1930:	1a 2e       	mov	r1, r26
    1932:	aa 1b       	sub	r26, r26
    1934:	bb 1b       	sub	r27, r27
    1936:	fd 01       	movw	r30, r26
    1938:	0d c0       	rjmp	.+26     	; 0x1954 <__udivmodsi4_ep>

0000193a <__udivmodsi4_loop>:
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	ee 1f       	adc	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	a2 17       	cp	r26, r18
    1944:	b3 07       	cpc	r27, r19
    1946:	e4 07       	cpc	r30, r20
    1948:	f5 07       	cpc	r31, r21
    194a:	20 f0       	brcs	.+8      	; 0x1954 <__udivmodsi4_ep>
    194c:	a2 1b       	sub	r26, r18
    194e:	b3 0b       	sbc	r27, r19
    1950:	e4 0b       	sbc	r30, r20
    1952:	f5 0b       	sbc	r31, r21

00001954 <__udivmodsi4_ep>:
    1954:	66 1f       	adc	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	1a 94       	dec	r1
    195e:	69 f7       	brne	.-38     	; 0x193a <__udivmodsi4_loop>
    1960:	60 95       	com	r22
    1962:	70 95       	com	r23
    1964:	80 95       	com	r24
    1966:	90 95       	com	r25
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	bd 01       	movw	r22, r26
    196e:	cf 01       	movw	r24, r30
    1970:	08 95       	ret

00001972 <__divmodsi4>:
    1972:	05 2e       	mov	r0, r21
    1974:	97 fb       	bst	r25, 7
    1976:	1e f4       	brtc	.+6      	; 0x197e <__divmodsi4+0xc>
    1978:	00 94       	com	r0
    197a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__negsi2>
    197e:	57 fd       	sbrc	r21, 7
    1980:	07 d0       	rcall	.+14     	; 0x1990 <__divmodsi4_neg2>
    1982:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
    1986:	07 fc       	sbrc	r0, 7
    1988:	03 d0       	rcall	.+6      	; 0x1990 <__divmodsi4_neg2>
    198a:	4e f4       	brtc	.+18     	; 0x199e <__divmodsi4_exit>
    198c:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__negsi2>

00001990 <__divmodsi4_neg2>:
    1990:	50 95       	com	r21
    1992:	40 95       	com	r20
    1994:	30 95       	com	r19
    1996:	21 95       	neg	r18
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	4f 4f       	sbci	r20, 0xFF	; 255
    199c:	5f 4f       	sbci	r21, 0xFF	; 255

0000199e <__divmodsi4_exit>:
    199e:	08 95       	ret

000019a0 <__negsi2>:
    19a0:	90 95       	com	r25
    19a2:	80 95       	com	r24
    19a4:	70 95       	com	r23
    19a6:	61 95       	neg	r22
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	8f 4f       	sbci	r24, 0xFF	; 255
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	08 95       	ret

000019b0 <__tablejump2__>:
    19b0:	ee 0f       	add	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	05 90       	lpm	r0, Z+
    19b6:	f4 91       	lpm	r31, Z
    19b8:	e0 2d       	mov	r30, r0
    19ba:	09 94       	ijmp

000019bc <__muluhisi3>:
    19bc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__umulhisi3>
    19c0:	a5 9f       	mul	r26, r21
    19c2:	90 0d       	add	r25, r0
    19c4:	b4 9f       	mul	r27, r20
    19c6:	90 0d       	add	r25, r0
    19c8:	a4 9f       	mul	r26, r20
    19ca:	80 0d       	add	r24, r0
    19cc:	91 1d       	adc	r25, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	08 95       	ret

000019d2 <__udivmodhi4>:
    19d2:	aa 1b       	sub	r26, r26
    19d4:	bb 1b       	sub	r27, r27
    19d6:	51 e1       	ldi	r21, 0x11	; 17
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <__udivmodhi4_ep>

000019da <__udivmodhi4_loop>:
    19da:	aa 1f       	adc	r26, r26
    19dc:	bb 1f       	adc	r27, r27
    19de:	a6 17       	cp	r26, r22
    19e0:	b7 07       	cpc	r27, r23
    19e2:	10 f0       	brcs	.+4      	; 0x19e8 <__udivmodhi4_ep>
    19e4:	a6 1b       	sub	r26, r22
    19e6:	b7 0b       	sbc	r27, r23

000019e8 <__udivmodhi4_ep>:
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	5a 95       	dec	r21
    19ee:	a9 f7       	brne	.-22     	; 0x19da <__udivmodhi4_loop>
    19f0:	80 95       	com	r24
    19f2:	90 95       	com	r25
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	08 95       	ret

000019fa <__umulhisi3>:
    19fa:	a2 9f       	mul	r26, r18
    19fc:	b0 01       	movw	r22, r0
    19fe:	b3 9f       	mul	r27, r19
    1a00:	c0 01       	movw	r24, r0
    1a02:	a3 9f       	mul	r26, r19
    1a04:	70 0d       	add	r23, r0
    1a06:	81 1d       	adc	r24, r1
    1a08:	11 24       	eor	r1, r1
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	b2 9f       	mul	r27, r18
    1a0e:	70 0d       	add	r23, r0
    1a10:	81 1d       	adc	r24, r1
    1a12:	11 24       	eor	r1, r1
    1a14:	91 1d       	adc	r25, r1
    1a16:	08 95       	ret

00001a18 <malloc>:
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	91 05       	cpc	r25, r1
    1a24:	10 f4       	brcc	.+4      	; 0x1a2a <malloc+0x12>
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <__flp>
    1a2e:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <__flp+0x1>
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	30 97       	sbiw	r30, 0x00	; 0
    1a3c:	19 f1       	breq	.+70     	; 0x1a84 <malloc+0x6c>
    1a3e:	40 81       	ld	r20, Z
    1a40:	51 81       	ldd	r21, Z+1	; 0x01
    1a42:	02 81       	ldd	r16, Z+2	; 0x02
    1a44:	13 81       	ldd	r17, Z+3	; 0x03
    1a46:	48 17       	cp	r20, r24
    1a48:	59 07       	cpc	r21, r25
    1a4a:	c8 f0       	brcs	.+50     	; 0x1a7e <malloc+0x66>
    1a4c:	84 17       	cp	r24, r20
    1a4e:	95 07       	cpc	r25, r21
    1a50:	69 f4       	brne	.+26     	; 0x1a6c <malloc+0x54>
    1a52:	10 97       	sbiw	r26, 0x00	; 0
    1a54:	31 f0       	breq	.+12     	; 0x1a62 <malloc+0x4a>
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	0c 93       	st	X, r16
    1a5a:	12 97       	sbiw	r26, 0x02	; 2
    1a5c:	13 96       	adiw	r26, 0x03	; 3
    1a5e:	1c 93       	st	X, r17
    1a60:	27 c0       	rjmp	.+78     	; 0x1ab0 <malloc+0x98>
    1a62:	00 93 f5 02 	sts	0x02F5, r16	; 0x8002f5 <__flp>
    1a66:	10 93 f6 02 	sts	0x02F6, r17	; 0x8002f6 <__flp+0x1>
    1a6a:	22 c0       	rjmp	.+68     	; 0x1ab0 <malloc+0x98>
    1a6c:	21 15       	cp	r18, r1
    1a6e:	31 05       	cpc	r19, r1
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <malloc+0x60>
    1a72:	42 17       	cp	r20, r18
    1a74:	53 07       	cpc	r21, r19
    1a76:	18 f4       	brcc	.+6      	; 0x1a7e <malloc+0x66>
    1a78:	9a 01       	movw	r18, r20
    1a7a:	bd 01       	movw	r22, r26
    1a7c:	ef 01       	movw	r28, r30
    1a7e:	df 01       	movw	r26, r30
    1a80:	f8 01       	movw	r30, r16
    1a82:	db cf       	rjmp	.-74     	; 0x1a3a <malloc+0x22>
    1a84:	21 15       	cp	r18, r1
    1a86:	31 05       	cpc	r19, r1
    1a88:	f9 f0       	breq	.+62     	; 0x1ac8 <malloc+0xb0>
    1a8a:	28 1b       	sub	r18, r24
    1a8c:	39 0b       	sbc	r19, r25
    1a8e:	24 30       	cpi	r18, 0x04	; 4
    1a90:	31 05       	cpc	r19, r1
    1a92:	80 f4       	brcc	.+32     	; 0x1ab4 <malloc+0x9c>
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	61 15       	cp	r22, r1
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	21 f0       	breq	.+8      	; 0x1aa6 <malloc+0x8e>
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	93 83       	std	Z+3, r25	; 0x03
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <malloc+0x96>
    1aa6:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <__flp+0x1>
    1aaa:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <__flp>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	32 96       	adiw	r30, 0x02	; 2
    1ab2:	44 c0       	rjmp	.+136    	; 0x1b3c <malloc+0x124>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e2 0f       	add	r30, r18
    1ab8:	f3 1f       	adc	r31, r19
    1aba:	81 93       	st	Z+, r24
    1abc:	91 93       	st	Z+, r25
    1abe:	22 50       	subi	r18, 0x02	; 2
    1ac0:	31 09       	sbc	r19, r1
    1ac2:	39 83       	std	Y+1, r19	; 0x01
    1ac4:	28 83       	st	Y, r18
    1ac6:	3a c0       	rjmp	.+116    	; 0x1b3c <malloc+0x124>
    1ac8:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    1acc:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1ad0:	23 2b       	or	r18, r19
    1ad2:	41 f4       	brne	.+16     	; 0x1ae4 <malloc+0xcc>
    1ad4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ad8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1adc:	30 93 f4 02 	sts	0x02F4, r19	; 0x8002f4 <__brkval+0x1>
    1ae0:	20 93 f3 02 	sts	0x02F3, r18	; 0x8002f3 <__brkval>
    1ae4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1ae8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1aec:	21 15       	cp	r18, r1
    1aee:	31 05       	cpc	r19, r1
    1af0:	41 f4       	brne	.+16     	; 0x1b02 <malloc+0xea>
    1af2:	2d b7       	in	r18, 0x3d	; 61
    1af4:	3e b7       	in	r19, 0x3e	; 62
    1af6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1afa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1afe:	24 1b       	sub	r18, r20
    1b00:	35 0b       	sbc	r19, r21
    1b02:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <__brkval>
    1b06:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1b0a:	e2 17       	cp	r30, r18
    1b0c:	f3 07       	cpc	r31, r19
    1b0e:	a0 f4       	brcc	.+40     	; 0x1b38 <malloc+0x120>
    1b10:	2e 1b       	sub	r18, r30
    1b12:	3f 0b       	sbc	r19, r31
    1b14:	28 17       	cp	r18, r24
    1b16:	39 07       	cpc	r19, r25
    1b18:	78 f0       	brcs	.+30     	; 0x1b38 <malloc+0x120>
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	4e 5f       	subi	r20, 0xFE	; 254
    1b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b20:	24 17       	cp	r18, r20
    1b22:	35 07       	cpc	r19, r21
    1b24:	48 f0       	brcs	.+18     	; 0x1b38 <malloc+0x120>
    1b26:	4e 0f       	add	r20, r30
    1b28:	5f 1f       	adc	r21, r31
    1b2a:	50 93 f4 02 	sts	0x02F4, r21	; 0x8002f4 <__brkval+0x1>
    1b2e:	40 93 f3 02 	sts	0x02F3, r20	; 0x8002f3 <__brkval>
    1b32:	81 93       	st	Z+, r24
    1b34:	91 93       	st	Z+, r25
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <malloc+0x124>
    1b38:	e0 e0       	ldi	r30, 0x00	; 0
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret

00001b48 <free>:
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <free+0xa>
    1b50:	81 c0       	rjmp	.+258    	; 0x1c54 <free+0x10c>
    1b52:	fc 01       	movw	r30, r24
    1b54:	32 97       	sbiw	r30, 0x02	; 2
    1b56:	13 82       	std	Z+3, r1	; 0x03
    1b58:	12 82       	std	Z+2, r1	; 0x02
    1b5a:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <__flp>
    1b5e:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <__flp+0x1>
    1b62:	10 97       	sbiw	r26, 0x00	; 0
    1b64:	81 f4       	brne	.+32     	; 0x1b86 <free+0x3e>
    1b66:	20 81       	ld	r18, Z
    1b68:	31 81       	ldd	r19, Z+1	; 0x01
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    1b72:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1b76:	28 17       	cp	r18, r24
    1b78:	39 07       	cpc	r19, r25
    1b7a:	51 f5       	brne	.+84     	; 0x1bd0 <free+0x88>
    1b7c:	f0 93 f4 02 	sts	0x02F4, r31	; 0x8002f4 <__brkval+0x1>
    1b80:	e0 93 f3 02 	sts	0x02F3, r30	; 0x8002f3 <__brkval>
    1b84:	67 c0       	rjmp	.+206    	; 0x1c54 <free+0x10c>
    1b86:	ed 01       	movw	r28, r26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	ce 17       	cp	r28, r30
    1b8e:	df 07       	cpc	r29, r31
    1b90:	40 f4       	brcc	.+16     	; 0x1ba2 <free+0x5a>
    1b92:	4a 81       	ldd	r20, Y+2	; 0x02
    1b94:	5b 81       	ldd	r21, Y+3	; 0x03
    1b96:	9e 01       	movw	r18, r28
    1b98:	41 15       	cp	r20, r1
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	f1 f0       	breq	.+60     	; 0x1bda <free+0x92>
    1b9e:	ea 01       	movw	r28, r20
    1ba0:	f5 cf       	rjmp	.-22     	; 0x1b8c <free+0x44>
    1ba2:	d3 83       	std	Z+3, r29	; 0x03
    1ba4:	c2 83       	std	Z+2, r28	; 0x02
    1ba6:	40 81       	ld	r20, Z
    1ba8:	51 81       	ldd	r21, Z+1	; 0x01
    1baa:	84 0f       	add	r24, r20
    1bac:	95 1f       	adc	r25, r21
    1bae:	c8 17       	cp	r28, r24
    1bb0:	d9 07       	cpc	r29, r25
    1bb2:	59 f4       	brne	.+22     	; 0x1bca <free+0x82>
    1bb4:	88 81       	ld	r24, Y
    1bb6:	99 81       	ldd	r25, Y+1	; 0x01
    1bb8:	84 0f       	add	r24, r20
    1bba:	95 1f       	adc	r25, r21
    1bbc:	02 96       	adiw	r24, 0x02	; 2
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc6:	93 83       	std	Z+3, r25	; 0x03
    1bc8:	82 83       	std	Z+2, r24	; 0x02
    1bca:	21 15       	cp	r18, r1
    1bcc:	31 05       	cpc	r19, r1
    1bce:	29 f4       	brne	.+10     	; 0x1bda <free+0x92>
    1bd0:	f0 93 f6 02 	sts	0x02F6, r31	; 0x8002f6 <__flp+0x1>
    1bd4:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <__flp>
    1bd8:	3d c0       	rjmp	.+122    	; 0x1c54 <free+0x10c>
    1bda:	e9 01       	movw	r28, r18
    1bdc:	fb 83       	std	Y+3, r31	; 0x03
    1bde:	ea 83       	std	Y+2, r30	; 0x02
    1be0:	49 91       	ld	r20, Y+
    1be2:	59 91       	ld	r21, Y+
    1be4:	c4 0f       	add	r28, r20
    1be6:	d5 1f       	adc	r29, r21
    1be8:	ec 17       	cp	r30, r28
    1bea:	fd 07       	cpc	r31, r29
    1bec:	61 f4       	brne	.+24     	; 0x1c06 <free+0xbe>
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	84 0f       	add	r24, r20
    1bf4:	95 1f       	adc	r25, r21
    1bf6:	02 96       	adiw	r24, 0x02	; 2
    1bf8:	e9 01       	movw	r28, r18
    1bfa:	99 83       	std	Y+1, r25	; 0x01
    1bfc:	88 83       	st	Y, r24
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	e0 e0       	ldi	r30, 0x00	; 0
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	12 96       	adiw	r26, 0x02	; 2
    1c0c:	8d 91       	ld	r24, X+
    1c0e:	9c 91       	ld	r25, X
    1c10:	13 97       	sbiw	r26, 0x03	; 3
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <free+0xd4>
    1c16:	fd 01       	movw	r30, r26
    1c18:	dc 01       	movw	r26, r24
    1c1a:	f7 cf       	rjmp	.-18     	; 0x1c0a <free+0xc2>
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9c 91       	ld	r25, X
    1c20:	11 97       	sbiw	r26, 0x01	; 1
    1c22:	9d 01       	movw	r18, r26
    1c24:	2e 5f       	subi	r18, 0xFE	; 254
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    1c30:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1c34:	28 17       	cp	r18, r24
    1c36:	39 07       	cpc	r19, r25
    1c38:	69 f4       	brne	.+26     	; 0x1c54 <free+0x10c>
    1c3a:	30 97       	sbiw	r30, 0x00	; 0
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <free+0x100>
    1c3e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__flp+0x1>
    1c42:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <__flp>
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <free+0x104>
    1c48:	13 82       	std	Z+3, r1	; 0x03
    1c4a:	12 82       	std	Z+2, r1	; 0x02
    1c4c:	b0 93 f4 02 	sts	0x02F4, r27	; 0x8002f4 <__brkval+0x1>
    1c50:	a0 93 f3 02 	sts	0x02F3, r26	; 0x8002f3 <__brkval>
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <__do_global_dtors>:
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
    1c5c:	c9 e7       	ldi	r28, 0x79	; 121
    1c5e:	d0 e0       	ldi	r29, 0x00	; 0
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <__do_global_dtors+0x10>
    1c62:	fe 01       	movw	r30, r28
    1c64:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__tablejump2__>
    1c68:	21 96       	adiw	r28, 0x01	; 1
    1c6a:	ca 37       	cpi	r28, 0x7A	; 122
    1c6c:	d1 07       	cpc	r29, r17
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__do_global_dtors+0x8>
    1c70:	f8 94       	cli

00001c72 <__stop_program>:
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <__stop_program>
